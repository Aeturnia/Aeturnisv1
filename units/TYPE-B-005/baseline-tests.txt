
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/__tests__/AffinityService.test.ts (22 tests | 2 failed) 86ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 23ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 3ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 1ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 12ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 1ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 1ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 2ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 1ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 2ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 1ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 14ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 1ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 3ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 1ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 1ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 8ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 3ms
 ❯ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests | 9 failed) 84ms
   × MockNPCService > getNPCsInZone > should return NPCs for a valid zone 35ms
     → expected 0 to be greater than 0
   × MockNPCService > getNPCsInZone > should return different NPCs for different zones 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCsInZone > should return empty array for unknown zone 10ms
   × MockNPCService > getNPCById > should return NPC by id 5ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCById > should return null for non-existent NPC 1ms
   × MockNPCService > startInteraction > should start an interaction with an NPC 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > startInteraction > should throw error for non-existent NPC 9ms
   × MockNPCService > advanceDialogue > should advance dialogue based on choice 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > advanceDialogue > should end dialogue on goodbye choice 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > getQuestGivers > should return NPCs that give quests 9ms
     → expected undefined to be true // Object.is equality
   × MockNPCService > getMerchants > should return NPCs that are merchants 3ms
     → expected undefined to be true // Object.is equality
   ✓ MockNPCService > getInteractionHistory > should return empty array for new character 1ms
   × MockNPCService > getInteractionHistory > should track interaction history 1ms
     → Cannot read properties of undefined (reading 'id')
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 89ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 41ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 4ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 10ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 2ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 5ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 2ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 5ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 4ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 5ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 2ms
     → service.getSpawnPoints is not a function
 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 3 failed) 467ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 166ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 22ms
     → expected 0 to be greater than 0
   ✓ ServiceProvider Integration Tests > Mock Services > should maintain state between calls 60ms
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 35ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 33ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 56ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 39ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 45ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 1ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 8ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 6 failed) 506ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 182ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 20ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 12ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 24ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 8ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 25ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 16ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 23ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 54ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 12ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 7ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 10ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 43ms
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 33ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 1ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 3ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 1ms
   × Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 8ms
     → promise resolved "{ success: true, …(3) }" instead of rejecting
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 2ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 10ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 2ms
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 3ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 3ms
     → expected 0 to be greater than 0
 ❯ src/__tests__/CacheService.test.ts (14 tests | 14 failed) 140ms
   × CacheService > get > should return parsed value for existing key 66ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 2ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 20ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 21ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 4ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 16ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 3ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 1ms
     → Cannot read properties of null (reading 'quit')
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 5 failed) 63ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 13ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 12ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 7ms
     → characterService.updatePrestige is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 5ms
     → characterService.updateParagonDistribution is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 8ms
     → characterService.updateStats is not a function
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 8ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 3ms
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 785ms
 ✓ src/__tests__/TutorialService.test.ts (25 tests) 54ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 304ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1921ms
   ✓ Socket.IO Integration Flow > Authentication Flow > should authenticate with test token  327ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  626ms
 ✓ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests) 142ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 154ms
 ✓ src/__tests__/monster.service.test.ts (16 tests) 22ms
 ✓ src/__tests__/npc.service.test.ts (20 tests) 24ms
 ✓ src/index.test.ts (2 tests) 6ms
 ✓ src/__tests__/index.test.ts (5 tests) 6ms
 ✓ src/services/AuthService.test.ts (14 tests) 9592ms
   ✓ AuthService > User Registration > should register a new user successfully  1353ms
   ✓ AuthService > User Registration > should throw ConflictError if email already exists  750ms
   ✓ AuthService > User Registration > should throw ConflictError if username already exists  441ms
   ✓ AuthService > User Login > should login successfully with email  746ms
   ✓ AuthService > User Login > should login successfully with username  1246ms
   ✓ AuthService > User Login > should throw UnauthorizedError for invalid credentials  873ms
   ✓ AuthService > User Login > should throw ValidationError for invalid input  1075ms
   ✓ AuthService > Token Verification > should verify valid access token  787ms
   ✓ AuthService > Token Verification > should throw error for invalid token  841ms
   ✓ AuthService > Token Verification > should throw error for malformed token  468ms
   ✓ AuthService > Security Features > should normalize email addresses to lowercase  503ms
   ✓ AuthService > Security Features > should not include password hash in response  363ms
 ❯ src/__tests__/auth.endpoints.test.ts (5 tests | 1 failed) 13099ms
   ✓ Authentication API Endpoints > should register a new user successfully  2458ms
   × Authentication API Endpoints > should login successfully 3649ms
     → expected 401 to be 200 // Object.is equality
   ✓ Authentication API Endpoints > should handle validation errors  1509ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1532ms
   ✓ Authentication API Endpoints > should return server health status  1505ms

 Test Files  10 failed | 11 passed (22)
      Tests  49 failed | 199 passed (263)
     Errors  1 error
   Start at  22:19:37
   Duration  63.03s (transform 4.30s, setup 841ms, collect 17.90s, tests 27.54s, environment 15ms, prepare 7.02s)


> @aeturnis/shared@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/shared

 ✓ src/__tests__/utils.test.ts (13 tests) 8ms

 Test Files  1 passed (1)
      Tests  13 passed (13)
   Start at  22:20:41
   Duration  493ms (transform 63ms, setup 0ms, collect 59ms, tests 8ms, environment 0ms, prepare 92ms)

