
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 3 failed) 261ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 175ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 37ms
     → expected 0 to be greater than 0
   ✓ ServiceProvider Integration Tests > Mock Services > should maintain state between calls 8ms
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 2ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 4ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 9ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 6ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 8ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 0ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 7ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 6 failed) 391ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 158ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 38ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 7ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 7ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 8ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 12ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 6ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 5ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 10ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 15ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 8ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 4ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 17ms
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 31ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 4ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 3ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 3ms
   × Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 13ms
     → promise resolved "{ success: true, …(3) }" instead of rejecting
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 2ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 9ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 4ms
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 5ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 19ms
     → expected 0 to be greater than 0
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts (13 tests | 6 failed) 175ms
   ✓ Combat Controller > getPlayerStats > should return mock player stats successfully 19ms
   ✓ Combat Controller > getPlayerStats > should handle errors gracefully 3ms
   ✓ Combat Controller > getCombatSession > should return combat session when found 3ms
   × Combat Controller > getCombatSession > should return 400 when session ID is missing 55ms
     → expected "spy" to be called with arguments: [ { success: false, …(1) } ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[2m    {[22m
[31m+     "details": undefined,[90m
[31m+     "error": "Validation Error",[90m
[2m      "message": "Session ID is required",[22m
[2m      "success": false,[22m
[2m    },[22m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   × Combat Controller > getCombatSession > should return 404 when session not found 14ms
     → expected "spy" to be called with arguments: [ { success: false, …(1) } ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[2m    {[22m
[32m-     "message": "Combat session not found",[90m
[31m+     "details": undefined,[90m
[31m+     "error": "Not Found",[90m
[31m+     "message": "Combat session with ID 'non-existent' not found",[90m
[2m      "success": false,[22m
[2m    },[22m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   × Combat Controller > getCombatSession > should handle service errors 3ms
     → expected "spy" to be called with arguments: [ { success: false, …(1) } ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[2m    {[22m
[31m+     "details": undefined,[90m
[31m+     "error": "Internal server error",[90m
[2m      "message": "Database error",[22m
[2m      "success": false,[22m
[2m    },[22m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   × Combat Controller > performTestAction > should perform combat action successfully 6ms
     → expected "spy" to be called with arguments: [ 'session-123', …(2) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should return 400 when session ID is missing 2ms
   ✓ Combat Controller > performTestAction > should return 400 when action is missing 3ms
   ✓ Combat Controller > performTestAction > should validate action type 2ms
   × Combat Controller > performTestAction > should auto-select target for attack actions when not provided 34ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should handle combat service not available 6ms
   × Combat Controller > performTestAction > should handle different action types 3ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/services/CharacterService.test.ts (18 tests | 15 failed) 231ms
   × CharacterService > getCharactersByAccount > should return characters from cache when available 49ms
     → expected '[{"id":"afcbd4c9-c5a5-4f2d-9ecc-6a8e8…' to deeply equal [ { …(23) }, { …(23) } ]
   × CharacterService > getCharactersByAccount > should fetch from repository when not cached 5ms
     → expected "spy" to be called with arguments: [ …(3) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > getCharactersByAccount > should return empty array when user has no characters 3ms
     → expected "spy" to be called at least once
   × CharacterService > getCharactersByAccount > should handle cache errors gracefully 14ms
     → Cache error
   × CharacterService > getCharacterWithStats > should return character with calculated stats 30ms
     → expected { character: { …(23) }, …(1) } to deeply equal { character: { …(23) }, …(1) }
   ✓ CharacterService > getCharacterWithStats > should return null when character not found 8ms
   × CharacterService > getCharacterWithStats > should cache character data 11ms
     → expected "spy" to be called with arguments: [ 'character:test-character-id', …(2) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > createCharacter > should create character successfully 29ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > createCharacter > should throw error when character limit reached 6ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Maximum character limit reached'
   × CharacterService > createCharacter > should throw error when name already exists 20ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Character name already exists'
   × CharacterService > createCharacter > should validate character name format 36ms
     → expected 'this.characterRepo.isNameTaken is not…' to match /Invalid character name/
   × CharacterService > createCharacter > should set initial stats based on race and class 2ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > deleteCharacter > should delete character successfully 2ms
     → this.characterRepo.softDelete is not a function
   ✓ CharacterService > deleteCharacter > should return false when character not found 2ms
   ✓ CharacterService > deleteCharacter > should return false when user does not own character 1ms
   × CharacterService > updateCharacterPosition > should update position successfully 1ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle character not found 2ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle unauthorized access 1ms
     → characterService.updateCharacterPosition is not a function
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 73ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 26ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 2ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 14ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 5ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 2ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 12ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 4ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 1ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 1ms
     → service.getSpawnPoints is not a function
 ❯ src/__tests__/unit/routes/auth.routes.test.ts (10 tests | 6 failed) 220ms
   × Auth Routes > POST /api/auth/register > should register a new user successfully 117ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/register > should handle registration errors 18ms
     → expected 201 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/login > should login successfully 17ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/login > should handle invalid credentials 11ms
     → expected 200 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/refresh > should refresh tokens successfully 8ms
     → expected { success: true } to deeply equal { success: true, data: { …(2) } }
   ✓ Auth Routes > POST /api/auth/refresh > should require refresh token 7ms
   × Auth Routes > POST /api/auth/logout > should logout successfully 13ms
     → expected "spy" to be called with arguments: [ 'valid_token' ][90m

Number of calls: [1m0[22m
[39m
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return profile when authenticated 6ms
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return 401 when not authenticated 6ms
   ✓ Auth Routes > Protected routes > GET /api/auth/verify > should verify token 12ms
 ❯ src/tests/services/StatsService.test.ts (22 tests | 13 failed) 98ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should calculate tier progression correctly when base stat reaches 100 44ms
     → expected false to be true // Object.is equality
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should not tier up if base stat < 100 even with high total points 1ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should handle multiple tier progressions correctly 5ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should unlock paragon system at level 100 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should not unlock paragon before level 100 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should apply paragon points with logarithmic scaling 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should unlock prestige at level 500 5ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should apply prestige multiplier correctly 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should apply equipment bonuses with logarithmic scaling 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should handle zero equipment bonuses 3ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Tier 50+ Simulation > should handle extremely high tier values (Tier 50) 9ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Paragon 100K+ Simulation > should handle massive paragon point allocation (100K) 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Prestige 1K+ Simulation > should handle extreme prestige levels (1000) 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Extreme Value Soft Cap > should apply soft cap for values exceeding 1000 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > BigInt Enforcement > should handle BigInt values for resource pools 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply race modifiers correctly 1ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply class scaling correctly 15ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should calculate all derived stats from effective stats only 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should enforce percentage caps correctly 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should clamp negative base stats to positive values 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should ensure resource pools are always ≥1 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 6. Formula Transparency > should provide effective stat breakdown for UI transparency 1ms
     → actual value must be number or bigint, received "undefined"
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 5 failed) 120ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 30ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 2ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 2ms
     → characterService.updatePrestige is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 31ms
     → characterService.updateParagonDistribution is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 21ms
     → characterService.updateStats is not a function
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 17ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 9ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 267ms
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 758ms
 ✓ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests) 51ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 52ms
 ✓ src/__tests__/unit/services/npc.service.test.ts (20 tests) 10ms
 ✓ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests) 30ms
 ✓ src/__tests__/unit/services/monster.service.test.ts (16 tests) 9ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1604ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  611ms
 ✓ src/services/AuthService.test.ts (14 tests) 3414ms
   ✓ AuthService > User Registration > should register a new user successfully  845ms
   ✓ AuthService > User Login > should login successfully with email  302ms
   ✓ AuthService > User Login > should login successfully with username  333ms

 Test Files  24 failed | 9 passed (33)
      Tests  63 failed | 175 passed (238)
   Start at  13:54:33
   Duration  9.02s (transform 2.50s, setup 669ms, collect 9.00s, tests 7.76s, environment 20ms, prepare 4.96s)


> @aeturnis/shared@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/shared

 ✓ src/__tests__/utils.test.ts (13 tests) 8ms

 Test Files  1 passed (1)
      Tests  13 passed (13)
   Start at  13:54:42
   Duration  529ms (transform 88ms, setup 0ms, collect 71ms, tests 8ms, environment 0ms, prepare 170ms)

