
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 3 failed) 114ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 67ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 9ms
     → expected 0 to be greater than 0
   ✓ ServiceProvider Integration Tests > Mock Services > should maintain state between calls 9ms
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 2ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 4ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 5ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 5ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 5ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 1ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 5ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 5 failed) 202ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 68ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 15ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 7ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 8ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 6ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 11ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 7ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 10ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 12ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 6ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 4ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 9ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 8ms
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 6ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 2ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 1ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 2ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 3ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 1ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 4ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 5ms
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 2ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 2ms
     → expected 0 to be greater than 0
 ❯ src/__tests__/unit/routes/auth.routes.test.ts (10 tests | 6 failed) 112ms
   × Auth Routes > POST /api/auth/register > should register a new user successfully 47ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/register > should handle registration errors 6ms
     → expected 201 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/login > should login successfully 6ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/login > should handle invalid credentials 4ms
     → expected 200 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/refresh > should refresh tokens successfully 5ms
     → expected { success: true } to deeply equal { success: true, data: { …(2) } }
   ✓ Auth Routes > POST /api/auth/refresh > should require refresh token 9ms
   × Auth Routes > POST /api/auth/logout > should logout successfully 7ms
     → expected "spy" to be called with arguments: [ 'valid_token' ][90m

Number of calls: [1m0[22m
[39m
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return profile when authenticated 13ms
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return 401 when not authenticated 5ms
   ✓ Auth Routes > Protected routes > GET /api/auth/verify > should verify token 6ms
 ❯ src/__tests__/unit/services/AffinityService.test.ts (22 tests | 2 failed) 47ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 10ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 1ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 9ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 1ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 1ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 2ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 1ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 2ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 0ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 4ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 0ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 1ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 1ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 1ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 2ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 2ms
 ❯ src/__tests__/unit/services/CharacterService.test.ts (18 tests | 15 failed) 71ms
   × CharacterService > getCharactersByAccount > should return characters from cache when available 23ms
     → expected '[{"id":"b1ef0fbc-19dd-400a-be53-4352f…' to deeply equal [ { …(44) }, { …(44) } ]
   × CharacterService > getCharactersByAccount > should fetch from repository when not cached 4ms
     → expected "spy" to be called with arguments: [ …(3) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > getCharactersByAccount > should return empty array when user has no characters 2ms
     → expected "spy" to be called at least once
   × CharacterService > getCharactersByAccount > should handle cache errors gracefully 1ms
     → Cache error
   × CharacterService > getCharacterWithStats > should return character with calculated stats 8ms
     → expected { character: { …(44) }, …(1) } to deeply equal { character: { …(44) }, …(1) }
   ✓ CharacterService > getCharacterWithStats > should return null when character not found 2ms
   × CharacterService > getCharacterWithStats > should cache character data 2ms
     → expected "spy" to be called with arguments: [ 'character:test-character-id', …(2) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > createCharacter > should create character successfully 8ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > createCharacter > should throw error when character limit reached 4ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Maximum character limit reached'
   × CharacterService > createCharacter > should throw error when name already exists 2ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Character name already exists'
   × CharacterService > createCharacter > should validate character name format 2ms
     → expected 'this.characterRepo.isNameTaken is not…' to match /Invalid character name/
   × CharacterService > createCharacter > should set initial stats based on race and class 2ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > deleteCharacter > should delete character successfully 3ms
     → this.characterRepo.softDelete is not a function
   ✓ CharacterService > deleteCharacter > should return false when character not found 1ms
   ✓ CharacterService > deleteCharacter > should return false when user does not own character 1ms
   × CharacterService > updateCharacterPosition > should update position successfully 1ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle character not found 1ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle unauthorized access 1ms
     → characterService.updateCharacterPosition is not a function
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts (13 tests | 3 failed) 53ms
   ✓ Combat Controller > getPlayerStats > should return mock player stats successfully 7ms
   ✓ Combat Controller > getPlayerStats > should handle errors gracefully 1ms
   ✓ Combat Controller > getCombatSession > should return combat session when found 2ms
   ✓ Combat Controller > getCombatSession > should return 400 when session ID is missing 2ms
   ✓ Combat Controller > getCombatSession > should return 404 when session not found 1ms
   ✓ Combat Controller > getCombatSession > should handle service errors 1ms
   × Combat Controller > performTestAction > should perform combat action successfully 17ms
     → expected "spy" to be called with arguments: [ 'session-123', …(2) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should return 400 when session ID is missing 1ms
   ✓ Combat Controller > performTestAction > should return 400 when action is missing 1ms
   ✓ Combat Controller > performTestAction > should validate action type 2ms
   × Combat Controller > performTestAction > should auto-select target for attack actions when not provided 10ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should handle combat service not available 1ms
   × Combat Controller > performTestAction > should handle different action types 2ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/services/TutorialService.test.ts (25 tests | 18 failed) 67ms
   ✓ MockTutorialService > getTutorialZone > should return tutorial zone information 11ms
   × MockTutorialService > getTutorialZone > should include expected NPCs 14ms
     → expected [ Array(3) ] to include 'Merchant Finn'
   × MockTutorialService > getTutorialStatus > should return existing character status 3ms
     → expected undefined to be 'basic_movement' // Object.is equality
   × MockTutorialService > getTutorialStatus > should create default status for new character 1ms
     → expected undefined to be 'basic_movement' // Object.is equality
   ✓ MockTutorialService > getAllQuests > should return all tutorial quests 1ms
   × MockTutorialService > getAllQuests > should include proper quest structure 1ms
     → expected undefined to be true // Object.is equality
   ✓ MockTutorialService > getAllQuests > should have proper quest progression 1ms
   × MockTutorialService > updateProgress > should update tutorial progress successfully 1ms
     → Cannot read properties of undefined (reading 'currentQuestId')
   × MockTutorialService > updateProgress > should complete quest when reaching final step 1ms
     → expected undefined to be true // Object.is equality
   × MockTutorialService > updateProgress > should complete entire tutorial after all quests 1ms
     → Cannot read properties of undefined (reading 'isComplete')
   × MockTutorialService > updateProgress > should throw error for invalid quest ID 4ms
     → promise resolved "{ success: false, …(2) }" instead of rejecting
   × MockTutorialService > updateProgress > should throw error for invalid step index 8ms
     → promise resolved "{ success: true, …(3) }" instead of rejecting
   × MockTutorialService > getGuidance > should return guidance for character in progress 1ms
     → expected undefined to be defined
   × MockTutorialService > getGuidance > should return completion guidance for finished tutorial 1ms
     → expected undefined to be defined
   × MockTutorialService > getGuidance > should return default guidance for new character 1ms
     → expected undefined to be 'trainer_marcus' // Object.is equality
   × MockTutorialService > getHelp > should return all help messages without filters 2ms
     → Target cannot be null or undefined.
   × MockTutorialService > getHelp > should filter by category 1ms
     → Cannot read properties of undefined (reading 'length')
   × MockTutorialService > getHelp > should filter by context 1ms
     → Cannot read properties of undefined (reading 'length')
   ✓ MockTutorialService > getHelp > should return appropriate suggested actions for combat 1ms
   × MockTutorialService > getHelp > should return appropriate suggested actions for magic 1ms
     → expected [ …(4) ] to include 'Talk to Sage Elara about magic'
   ✓ MockTutorialService > Error Handling > should handle missing character ID gracefully 1ms
   × MockTutorialService > Error Handling > should handle malformed help requests 1ms
     → expected undefined to be an instance of Array
   ✓ MockTutorialService > Mock Data Validation > should have consistent quest step structure 3ms
   × MockTutorialService > Mock Data Validation > should have valid reward types 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ MockTutorialService > Mock Data Validation > should have consistent NPC references 1ms
 ❯ src/__tests__/unit/controllers/character.controller.test.ts (19 tests | 10 failed) 277ms
   × Character Routes > GET /api/characters > should return all characters for authenticated user 53ms
     → expected 500 to be 200 // Object.is equality
   × Character Routes > GET /api/characters > should return empty array when user has no characters 13ms
     → expected 500 to be 200 // Object.is equality
   ✓ Character Routes > GET /api/characters > should require authentication 9ms
   × Character Routes > GET /api/characters/:id > should return character with stats when owned by user 11ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > GET /api/characters/:id > should return 404 when character not found 14ms
   × Character Routes > GET /api/characters/:id > should return 403 when character owned by different user 10ms
     → expected 404 to be 403 // Object.is equality
   ✓ Character Routes > GET /api/characters/:id > should validate character ID format 7ms
   × Character Routes > POST /api/characters > should create character successfully 21ms
     → expected undefined to deeply equal { …(44) }
   ✓ Character Routes > POST /api/characters > should validate character name 9ms
   ✓ Character Routes > POST /api/characters > should validate character name format 15ms
   ✓ Character Routes > POST /api/characters > should validate race enum 11ms
   × Character Routes > POST /api/characters > should handle duplicate name error 8ms
     → expected 201 to be 400 // Object.is equality
   × Character Routes > POST /api/characters > should handle character limit error 6ms
     → expected 201 to be 400 // Object.is equality
   × Character Routes > DELETE /api/characters/:id > should delete character successfully 6ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > DELETE /api/characters/:id > should return 404 when character not found 5ms
   ✓ Character Routes > DELETE /api/characters/:id > should validate character ID format 5ms
   × Character Routes > PATCH /api/characters/:id/position > should update character position successfully 7ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > PATCH /api/characters/:id/position > should validate position data 7ms
   × Character Routes > PATCH /api/characters/:id/position > should allow optional rotation 49ms
     → expected 404 to be 200 // Object.is equality
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 48ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 19ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 3ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 4ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 1ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 5ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 2ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 5ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 3ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 1ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 1ms
     → service.getSpawnPoints is not a function
 ❯ src/tests/services/StatsService.test.ts (22 tests | 2 failed) 54ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should calculate tier progression correctly when base stat reaches 100 26ms
     → expected false to be true // Object.is equality
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should not tier up if base stat < 100 even with high total points 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should handle multiple tier progressions correctly 9ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should unlock paragon system at level 100 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should not unlock paragon before level 100 2ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should apply paragon points with logarithmic scaling 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should unlock prestige at level 500 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should apply prestige multiplier correctly 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should apply equipment bonuses with logarithmic scaling 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should handle zero equipment bonuses 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Tier 50+ Simulation > should handle extremely high tier values (Tier 50) 4ms
     → expected 1344.2 to be greater than 2400
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Paragon 100K+ Simulation > should handle massive paragon point allocation (100K) 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Prestige 1K+ Simulation > should handle extreme prestige levels (1000) 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Extreme Value Soft Cap > should apply soft cap for values exceeding 1000 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > BigInt Enforcement > should handle BigInt values for resource pools 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply race modifiers correctly 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply class scaling correctly 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should calculate all derived stats from effective stats only 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should enforce percentage caps correctly 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should clamp negative base stats to positive values 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should ensure resource pools are always ≥1 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 6. Formula Transparency > should provide effective stat breakdown for UI transparency 0ms
 ❯ src/__tests__/unit/services/CacheService.test.ts (14 tests | 14 failed) 21ms
   × CacheService > get > should return parsed value for existing key 6ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 4ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 1ms
     → Cannot read properties of null (reading 'quit')
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 4 failed) 29ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 10ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 1ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   ✓ AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 2ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 1ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 6ms
     → Cannot read properties of undefined (reading 'strength')
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 3ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 3ms
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 734ms
 ❯ src/__tests__/integration/CharacterRoutes.test.ts (21 tests | 11 failed) 2159ms
   × Character Routes > GET /api/v1/characters/test > should return system operational status 79ms
     → expected 200 "OK", got 401 "Unauthorized"
   ✓ Character Routes > GET /api/v1/characters > should return empty array for new user 88ms
   ✓ Character Routes > GET /api/v1/characters > should require authentication 24ms
   × Character Routes > GET /api/v1/characters > should return user characters after creation 92ms
     → expected +0 to be 1 // Object.is equality
   × Character Routes > POST /api/v1/characters > should create a new character successfully 159ms
     → actual value must be number or bigint, received "undefined"
   ✓ Character Routes > POST /api/v1/characters > should require authentication 23ms
   ✓ Character Routes > POST /api/v1/characters > should validate required fields 33ms
   ✓ Character Routes > POST /api/v1/characters > should validate character name length 23ms
   ✓ Character Routes > POST /api/v1/characters > should validate character race 25ms
   × Character Routes > POST /api/v1/characters > should handle duplicate character names 78ms
     → expected 201 "Created", got 400 "Bad Request"
   × Character Routes > GET /api/v1/characters/:id > should get character by ID with stats 184ms
     → insert or update on table "characters" violates foreign key constraint "characters_account_id_users_id_fk"
   × Character Routes > GET /api/v1/characters/:id > should return 404 for non-existent character 107ms
     → expected 404 "Not Found", got 400 "Bad Request"
   ✓ Character Routes > GET /api/v1/characters/:id > should deny access to other users characters 201ms
   ✓ Character Routes > GET /api/v1/characters/:id > should require valid UUID format 18ms
   × Character Routes > POST /api/v1/characters/validate-name > should validate available character name 32ms
     → expected undefined to be true // Object.is equality
   × Character Routes > POST /api/v1/characters/validate-name > should validate unavailable character name 53ms
     → insert or update on table "characters" violates foreign key constraint "characters_account_id_users_id_fk"
   ✓ Character Routes > POST /api/v1/characters/validate-name > should validate invalid character name length 126ms
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for human 24ms
     → expected 200 "OK", got 400 "Bad Request"
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for elf 19ms
     → expected 200 "OK", got 400 "Bad Request"
   ✓ Character Routes > GET /api/v1/characters/appearance/:race > should return 400 for invalid race 21ms
   × Character Routes > Character Creation Workflow Integration > should complete full character creation workflow 22ms
     → expected undefined to be true // Object.is equality
 ✓ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests) 31ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 249ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 37ms
 ✓ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests) 19ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1591ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  607ms
 ✓ src/__tests__/unit/services/monster.service.test.ts (16 tests) 10ms
 ✓ src/__tests__/unit/services/npc.service.test.ts (20 tests) 9ms
 ✓ src/index.test.ts (2 tests) 4ms
 ✓ src/__tests__/index.test.ts (5 tests) 5ms
 ✓ src/services/AuthService.test.ts (14 tests) 2895ms
   ✓ AuthService > User Registration > should register a new user successfully  376ms
 ✓ src/__tests__/integration/auth.endpoints.test.ts (5 tests) 11578ms
   ✓ Authentication API Endpoints > should register a new user successfully  1625ms
   ✓ Authentication API Endpoints > should login successfully  3222ms
   ✓ Authentication API Endpoints > should handle validation errors  1512ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1519ms
   ✓ Authentication API Endpoints > should return server health status  1505ms

 Test Files  13 failed | 12 passed (26)
      Tests  102 failed | 249 passed (366)
     Errors  1 error
   Start at  23:37:12
   Duration  35.26s (transform 1.41s, setup 393ms, collect 8.46s, tests 20.42s, environment 10ms, prepare 2.33s)


> @aeturnis/shared@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/shared

 ✓ src/__tests__/utils.test.ts (13 tests) 6ms

 Test Files  1 passed (1)
      Tests  13 passed (13)
   Start at  23:37:48
   Duration  285ms (transform 41ms, setup 0ms, collect 34ms, tests 6ms, environment 0ms, prepare 68ms)

