
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/__tests__/AffinityService.test.ts (22 tests | 2 failed) 91ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 13ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 1ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 20ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 2ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 7ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 1ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 4ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 7ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 4ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 1ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 5ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 2ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 2ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 1ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 1ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 1ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 1ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 6ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 3ms
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 49ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 18ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 2ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 2ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 4ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 4ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 6ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 5ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 1ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 1ms
     → service.getSpawnPoints is not a function
 ❯ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests | 20 failed) 66ms
   × MockCurrencyService > getBalance > should return balance for a character 39ms
     → expected undefined to be 'character-001' // Object.is equality
   × MockCurrencyService > getBalance > should return zero balance for new character 2ms
     → expected undefined to be 0n // Object.is equality
   × MockCurrencyService > getBalance > should calculate totalInCopper correctly 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > addCurrency > should add currency to character balance 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > addCurrency > should accumulate multiple additions 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > deductCurrency > should deduct currency from character balance 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > deductCurrency > should fail when insufficient funds 1ms
     → service.deductCurrency is not a function
   × MockCurrencyService > transferCurrency > should transfer currency between characters 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > transferCurrency > should transfer without fee when specified 2ms
     → service.addCurrency is not a function
   × MockCurrencyService > transferCurrency > should fail when sender has insufficient funds 4ms
     → service.transferCurrency is not a function
   ✓ MockCurrencyService > getTransactionHistory > should return empty history for new character 1ms
   × MockCurrencyService > getTransactionHistory > should track transaction history 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > getTransactionHistory > should respect limit parameter 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > canAfford > should return true when character has enough currency 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > canAfford > should return false when character lacks currency 1ms
     → service.addCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert copper to silver correctly 1ms
     → service.convertCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert silver to gold correctly 1ms
     → service.convertCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert gold to copper correctly 1ms
     → service.convertCurrency is not a function
   × MockCurrencyService > formatCurrency > should format currency with all denominations 1ms
     → service.formatCurrency is not a function
   × MockCurrencyService > formatCurrency > should omit zero denominations 1ms
     → service.formatCurrency is not a function
   × MockCurrencyService > formatCurrency > should show 0c for zero amount 1ms
     → service.formatCurrency is not a function
 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 4 failed) 167ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 92ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 18ms
     → expected 0 to be greater than 0
   × ServiceProvider Integration Tests > Mock Services > should maintain state between calls 8ms
     → currencyService.addCurrency is not a function
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 7ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 10ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 9ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 5ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 6ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 0ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 7ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 9 failed) 258ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 97ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 19ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 7ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 6ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 7ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 10ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 6ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 6ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 14ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 20ms
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 10ms
     → currencyService.deductCurrency is not a function
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 13ms
     → currencyService.transferCurrency is not a function
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 18ms
     → currencyService.addCurrency is not a function
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 7ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 2ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 2ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 1ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 3ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 1ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 2ms
   × Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 1ms
     → currencyService.addCurrency is not a function
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 2ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 1ms
     → expected 0 to be greater than 0
 ❯ src/__tests__/CacheService.test.ts (14 tests | 14 failed) 62ms
   × CacheService > get > should return parsed value for existing key 34ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 8ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 4ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 1ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 1ms
     → Cannot read properties of null (reading 'quit')
 ❯ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests | 9 failed) 61ms
   × MockNPCService > getNPCsInZone > should return NPCs for a valid zone 18ms
     → expected 0 to be greater than 0
   × MockNPCService > getNPCsInZone > should return different NPCs for different zones 5ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCsInZone > should return empty array for unknown zone 5ms
   × MockNPCService > getNPCById > should return NPC by id 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCById > should return null for non-existent NPC 6ms
   × MockNPCService > startInteraction > should start an interaction with an NPC 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > startInteraction > should throw error for non-existent NPC 5ms
   × MockNPCService > advanceDialogue > should advance dialogue based on choice 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > advanceDialogue > should end dialogue on goodbye choice 6ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > getQuestGivers > should return NPCs that give quests 5ms
     → expected undefined to be true // Object.is equality
   × MockNPCService > getMerchants > should return NPCs that are merchants 2ms
     → expected undefined to be true // Object.is equality
   ✓ MockNPCService > getInteractionHistory > should return empty array for new character 1ms
   × MockNPCService > getInteractionHistory > should track interaction history 1ms
     → Cannot read properties of undefined (reading 'id')
 ❯ src/__tests__/TutorialService.test.ts (25 tests | 4 failed) 83ms
   ✓ MockTutorialService > getTutorialZone > should return tutorial zone information 7ms
   ✓ MockTutorialService > getTutorialZone > should include expected NPCs 2ms
   ✓ MockTutorialService > getTutorialStatus > should return existing character status 1ms
   ✓ MockTutorialService > getTutorialStatus > should create default status for new character 1ms
   ✓ MockTutorialService > getAllQuests > should return all tutorial quests 1ms
   × MockTutorialService > getAllQuests > should include proper quest structure 8ms
     → Cannot read properties of undefined (reading 'BEGINNER')
   ✓ MockTutorialService > getAllQuests > should have proper quest progression 1ms
   ✓ MockTutorialService > updateProgress > should update tutorial progress successfully 1ms
   ✓ MockTutorialService > updateProgress > should complete quest when reaching final step 2ms
   ✓ MockTutorialService > updateProgress > should complete entire tutorial after all quests 15ms
   ✓ MockTutorialService > updateProgress > should throw error for invalid quest ID 1ms
   ✓ MockTutorialService > updateProgress > should throw error for invalid step index 1ms
   × MockTutorialService > getGuidance > should return guidance for character in progress 1ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   ✓ MockTutorialService > getGuidance > should return completion guidance for finished tutorial 1ms
   × MockTutorialService > getGuidance > should return default guidance for new character 3ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   ✓ MockTutorialService > getHelp > should return all help messages without filters 1ms
   ✓ MockTutorialService > getHelp > should filter by category 1ms
   ✓ MockTutorialService > getHelp > should filter by context 1ms
   ✓ MockTutorialService > getHelp > should return appropriate suggested actions for combat 1ms
   × MockTutorialService > getHelp > should return appropriate suggested actions for magic 7ms
     → expected [ …(4) ] to include 'Talk to Sage Elara about magic'
   ✓ MockTutorialService > Error Handling > should handle missing character ID gracefully 1ms
   ✓ MockTutorialService > Error Handling > should handle malformed help requests 1ms
   ✓ MockTutorialService > Mock Data Validation > should have consistent quest step structure 21ms
   ✓ MockTutorialService > Mock Data Validation > should have valid reward types 1ms
   ✓ MockTutorialService > Mock Data Validation > should have consistent NPC references 1ms
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 5 failed) 78ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 25ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 5ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 7ms
     → characterService.updatePrestige is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 2ms
     → characterService.updateParagonDistribution is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 14ms
     → characterService.updateStats is not a function
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 4ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 14ms
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 766ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 71ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 314ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1685ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  627ms
 ✓ src/__tests__/monster.service.test.ts (16 tests) 10ms
 ✓ src/__tests__/npc.service.test.ts (20 tests) 12ms
 ✓ src/__tests__/index.test.ts (5 tests) 10ms
 ✓ src/index.test.ts (2 tests) 3ms
 ✓ src/services/AuthService.test.ts (14 tests) 4603ms
   ✓ AuthService > User Registration > should register a new user successfully  823ms
   ✓ AuthService > User Registration > should throw ConflictError if email already exists  322ms
   ✓ AuthService > User Login > should login successfully with email  665ms
   ✓ AuthService > User Login > should login successfully with username  517ms
   ✓ AuthService > User Login > should throw UnauthorizedError for invalid credentials  483ms
 ✓ src/__tests__/auth.endpoints.test.ts (5 tests) 11963ms
   ✓ Authentication API Endpoints > should register a new user successfully  1718ms
   ✓ Authentication API Endpoints > should login successfully  3449ms
   ✓ Authentication API Endpoints > should handle validation errors  1511ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1526ms
   ✓ Authentication API Endpoints > should return server health status  1515ms

 Test Files  11 failed | 10 passed (22)
      Tests  76 failed | 172 passed (263)
     Errors  1 error
   Start at  18:20:00
   Duration  51.37s (transform 2.05s, setup 547ms, collect 9.05s, tests 20.35s, environment 8ms, prepare 3.10s)


> @aeturnis/shared@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/shared

 ✓ src/__tests__/utils.test.ts (13 tests) 7ms

 Test Files  1 passed (1)
      Tests  13 passed (13)
   Start at  18:20:53
   Duration  613ms (transform 69ms, setup 0ms, collect 62ms, tests 7ms, environment 0ms, prepare 129ms)

