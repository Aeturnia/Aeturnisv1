
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/__tests__/AffinityService.test.ts (22 tests | 2 failed) 84ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 8ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 1ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 35ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 2ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 1ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 1ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 2ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 1ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 4ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 1ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 6ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 0ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 1ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 1ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 1ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 3ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 3ms
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 63ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 13ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 10ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 6ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 2ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 10ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 2ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 8ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 3ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 4ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 1ms
     → service.getSpawnPoints is not a function
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 5 failed) 72ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 13ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 2ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 23ms
     → characterService.updatePrestige is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 6ms
     → characterService.updateParagonDistribution is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 17ms
     → characterService.updateStats is not a function
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 8ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 2ms
 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 4 failed) 192ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 84ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 14ms
     → expected 0 to be greater than 0
   × ServiceProvider Integration Tests > Mock Services > should maintain state between calls 15ms
     → currencyService.addCurrency is not a function
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 15ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 12ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 18ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 9ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 13ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 1ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 6ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 9 failed) 322ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 116ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 19ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 7ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 8ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 7ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 10ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 8ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 9ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 13ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 13ms
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 27ms
     → currencyService.deductCurrency is not a function
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 15ms
     → currencyService.transferCurrency is not a function
   × Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 15ms
     → currencyService.addCurrency is not a function
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 14ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 7ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 2ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 3ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 2ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 1ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 4ms
   × Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 4ms
     → currencyService.addCurrency is not a function
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 8ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 4ms
     → expected 0 to be greater than 0
 ❯ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests | 20 failed) 109ms
   × MockCurrencyService > getBalance > should return balance for a character 31ms
     → expected undefined to be 'character-001' // Object.is equality
   × MockCurrencyService > getBalance > should return zero balance for new character 2ms
     → expected undefined to be 0n // Object.is equality
   × MockCurrencyService > getBalance > should calculate totalInCopper correctly 8ms
     → service.addCurrency is not a function
   × MockCurrencyService > addCurrency > should add currency to character balance 3ms
     → service.addCurrency is not a function
   × MockCurrencyService > addCurrency > should accumulate multiple additions 4ms
     → service.addCurrency is not a function
   × MockCurrencyService > deductCurrency > should deduct currency from character balance 2ms
     → service.addCurrency is not a function
   × MockCurrencyService > deductCurrency > should fail when insufficient funds 1ms
     → service.deductCurrency is not a function
   × MockCurrencyService > transferCurrency > should transfer currency between characters 5ms
     → service.addCurrency is not a function
   × MockCurrencyService > transferCurrency > should transfer without fee when specified 4ms
     → service.addCurrency is not a function
   × MockCurrencyService > transferCurrency > should fail when sender has insufficient funds 11ms
     → service.transferCurrency is not a function
   ✓ MockCurrencyService > getTransactionHistory > should return empty history for new character 4ms
   × MockCurrencyService > getTransactionHistory > should track transaction history 2ms
     → service.addCurrency is not a function
   × MockCurrencyService > getTransactionHistory > should respect limit parameter 5ms
     → service.addCurrency is not a function
   × MockCurrencyService > canAfford > should return true when character has enough currency 4ms
     → service.addCurrency is not a function
   × MockCurrencyService > canAfford > should return false when character lacks currency 4ms
     → service.addCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert copper to silver correctly 3ms
     → service.convertCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert silver to gold correctly 3ms
     → service.convertCurrency is not a function
   × MockCurrencyService > convertCurrency > should convert gold to copper correctly 1ms
     → service.convertCurrency is not a function
   × MockCurrencyService > formatCurrency > should format currency with all denominations 4ms
     → service.formatCurrency is not a function
   × MockCurrencyService > formatCurrency > should omit zero denominations 3ms
     → service.formatCurrency is not a function
   × MockCurrencyService > formatCurrency > should show 0c for zero amount 1ms
     → service.formatCurrency is not a function
 ❯ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests | 9 failed) 91ms
   × MockNPCService > getNPCsInZone > should return NPCs for a valid zone 21ms
     → expected 0 to be greater than 0
   × MockNPCService > getNPCsInZone > should return different NPCs for different zones 12ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCsInZone > should return empty array for unknown zone 9ms
   × MockNPCService > getNPCById > should return NPC by id 15ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > getNPCById > should return null for non-existent NPC 1ms
   × MockNPCService > startInteraction > should start an interaction with an NPC 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockNPCService > startInteraction > should throw error for non-existent NPC 2ms
   × MockNPCService > advanceDialogue > should advance dialogue based on choice 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > advanceDialogue > should end dialogue on goodbye choice 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockNPCService > getQuestGivers > should return NPCs that give quests 13ms
     → expected undefined to be true // Object.is equality
   × MockNPCService > getMerchants > should return NPCs that are merchants 5ms
     → expected undefined to be true // Object.is equality
   ✓ MockNPCService > getInteractionHistory > should return empty array for new character 1ms
   × MockNPCService > getInteractionHistory > should track interaction history 2ms
     → Cannot read properties of undefined (reading 'id')
 ❯ src/__tests__/CacheService.test.ts (14 tests | 14 failed) 27ms
   × CacheService > get > should return parsed value for existing key 7ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 1ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 2ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 3ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 1ms
     → Cannot read properties of null (reading 'quit')
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 803ms
 ✓ src/__tests__/TutorialService.test.ts (25 tests) 47ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 290ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1760ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  613ms
 ✓ src/__tests__/npc.service.test.ts (20 tests) 26ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 101ms
 ✓ src/__tests__/monster.service.test.ts (16 tests) 21ms
 ✓ src/__tests__/index.test.ts (5 tests) 26ms
 ✓ src/index.test.ts (2 tests) 4ms
 ✓ src/services/AuthService.test.ts (14 tests) 5760ms
   ✓ AuthService > User Registration > should register a new user successfully  949ms
   ✓ AuthService > User Registration > should throw ConflictError if email already exists  371ms
   ✓ AuthService > User Login > should login successfully with email  734ms
   ✓ AuthService > User Login > should login successfully with username  705ms
   ✓ AuthService > User Login > should throw UnauthorizedError for invalid credentials  916ms
   ✓ AuthService > User Login > should throw ValidationError for invalid input  364ms
   ✓ AuthService > Token Verification > should verify valid access token  312ms
 ✓ src/__tests__/auth.endpoints.test.ts (5 tests) 11986ms
   ✓ Authentication API Endpoints > should register a new user successfully  1731ms
   ✓ Authentication API Endpoints > should login successfully  3324ms
   ✓ Authentication API Endpoints > should handle validation errors  1514ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1528ms
   ✓ Authentication API Endpoints > should return server health status  1506ms

 Test Files  10 failed | 11 passed (22)
      Tests  72 failed | 176 passed (263)
     Errors  1 error
   Start at  19:09:59
   Duration  50.06s (transform 2.21s, setup 545ms, collect 10.59s, tests 21.78s, environment 8ms, prepare 4.54s)


> @aeturnis/shared@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/shared

 ✓ src/__tests__/utils.test.ts (13 tests) 11ms

 Test Files  1 passed (1)
      Tests  13 passed (13)
   Start at  19:10:50
   Duration  540ms (transform 87ms, setup 0ms, collect 60ms, tests 11ms, environment 0ms, prepare 155ms)

