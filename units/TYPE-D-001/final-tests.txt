
> @aeturnis/monorepo@1.0.0 test
> npm run test --workspaces --if-present


> @aeturnis/server@1.0.0 test
> vitest run


 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/__tests__/AffinityService.test.ts (22 tests | 2 failed) 63ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 8ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 1ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 9ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 1ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 1ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 2ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 1ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 2ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 1ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 3ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 1ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 1ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 1ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 1ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 0ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 9ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 13ms
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 49ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 14ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 5ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 2ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 5ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 1ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 3ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 7ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 3ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 1ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 4ms
     → service.getSpawnPoints is not a function
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 5 failed) 32ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 11ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 2ms
     → characterService.updateStats is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 1ms
     → characterService.updatePrestige is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 5ms
     → characterService.updateParagonDistribution is not a function
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 1ms
     → characterService.updateStats is not a function
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 4ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 3ms
 ❯ src/__tests__/CacheService.test.ts (14 tests | 14 failed) 25ms
   × CacheService > get > should return parsed value for existing key 13ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 0ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 0ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 0ms
     → Cannot read properties of null (reading 'quit')
 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 3 failed) 155ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 36ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 24ms
     → expected 0 to be greater than 0
   ✓ ServiceProvider Integration Tests > Mock Services > should maintain state between calls 12ms
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 14ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 14ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 14ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 12ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 15ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 1ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 9ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 6 failed) 282ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 94ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 22ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 8ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 6ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 5ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 8ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 10ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 6ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 16ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 12ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 9ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 12ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 8ms
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 5ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 1ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 1ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 1ms
   × Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 12ms
     → promise resolved "{ success: true, …(3) }" instead of rejecting
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 9ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 12ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 2ms
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 13ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 5ms
     → expected 0 to be greater than 0
 ❯ src/tests/services/StatsService.test.ts (22 tests | 13 failed) 73ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should calculate tier progression correctly when base stat reaches 100 18ms
     → expected false to be true // Object.is equality
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should not tier up if base stat < 100 even with high total points 1ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should handle multiple tier progressions correctly 7ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should unlock paragon system at level 100 8ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should not unlock paragon before level 100 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should apply paragon points with logarithmic scaling 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should unlock prestige at level 500 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should apply prestige multiplier correctly 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should apply equipment bonuses with logarithmic scaling 9ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should handle zero equipment bonuses 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Tier 50+ Simulation > should handle extremely high tier values (Tier 50) 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Paragon 100K+ Simulation > should handle massive paragon point allocation (100K) 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Prestige 1K+ Simulation > should handle extreme prestige levels (1000) 1ms
     → actual value must be number or bigint, received "undefined"
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Extreme Value Soft Cap > should apply soft cap for values exceeding 1000 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > BigInt Enforcement > should handle BigInt values for resource pools 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply race modifiers correctly 1ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply class scaling correctly 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should calculate all derived stats from effective stats only 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should enforce percentage caps correctly 2ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should clamp negative base stats to positive values 1ms
     → actual value must be number or bigint, received "undefined"
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should ensure resource pools are always ≥1 1ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 6. Formula Transparency > should provide effective stat breakdown for UI transparency 14ms
     → actual value must be number or bigint, received "undefined"
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 745ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 283ms
 ✓ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests) 47ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1621ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  611ms
 ✓ src/__tests__/TutorialService.test.ts (25 tests) 48ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 41ms
 ✓ src/__tests__/npc.service.test.ts (20 tests) 13ms
 ✓ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests) 33ms
 ✓ src/__tests__/monster.service.test.ts (16 tests) 22ms
 ❯ src/__tests__/CharacterRoutes.test.ts (21 tests | 14 failed) 2773ms
   ✓ Character Routes > GET /api/v1/characters/test > should return system operational status 48ms
   ✓ Character Routes > GET /api/v1/characters > should return empty array for new user 46ms
   ✓ Character Routes > GET /api/v1/characters > should require authentication 22ms
   × Character Routes > GET /api/v1/characters > should return user characters after creation 68ms
     → column "gold" of relation "characters" does not exist
   × Character Routes > POST /api/v1/characters > should create a new character successfully 199ms
     → expected 201 "Created", got 400 "Bad Request"
   ✓ Character Routes > POST /api/v1/characters > should require authentication 110ms
   ✓ Character Routes > POST /api/v1/characters > should validate required fields 60ms
   ✓ Character Routes > POST /api/v1/characters > should validate character name length 82ms
   ✓ Character Routes > POST /api/v1/characters > should validate character race 182ms
   × Character Routes > POST /api/v1/characters > should handle duplicate character names 201ms
     → expected 201 "Created", got 400 "Bad Request"
   × Character Routes > GET /api/v1/characters/:id > should get character by ID with stats 180ms
     → column "gold" of relation "characters" does not exist
   × Character Routes > GET /api/v1/characters/:id > should return 404 for non-existent character 144ms
     → expected 404 "Not Found", got 500 "Internal Server Error"
   × Character Routes > GET /api/v1/characters/:id > should deny access to other users characters 472ms
     → column "gold" of relation "characters" does not exist
   × Character Routes > GET /api/v1/characters/:id > should require valid UUID format 142ms
     → expected 400 "Bad Request", got 500 "Internal Server Error"
   × Character Routes > POST /api/v1/characters/validate-name > should validate available character name 134ms
     → expected undefined to be true // Object.is equality
   × Character Routes > POST /api/v1/characters/validate-name > should validate unavailable character name 59ms
     → column "gold" of relation "characters" does not exist
   × Character Routes > POST /api/v1/characters/validate-name > should validate invalid character name length 123ms
     → expected 400 "Bad Request", got 200 "OK"
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for human 23ms
     → expected { skinTone: 'fair', …(6) } to have property "skinColor"
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for elf 20ms
     → expected { skinTone: 'fair', …(6) } to have property "skinColor"
   × Character Routes > GET /api/v1/characters/appearance/:race > should return 400 for invalid race 27ms
     → expected 400 "Bad Request", got 200 "OK"
   × Character Routes > Character Creation Workflow Integration > should complete full character creation workflow 33ms
     → expected undefined to be true // Object.is equality
 ✓ src/__tests__/index.test.ts (5 tests) 8ms
 ✓ src/index.test.ts (2 tests) 5ms
 ❯ src/services/AuthService.test.ts (14 tests | 1 failed) 4718ms
   × AuthService > User Registration > should register a new user successfully 952ms
     → duplicate key value violates unique constraint "users_username_unique"
   ✓ AuthService > User Registration > should throw ConflictError if email already exists 268ms
   ✓ AuthService > User Registration > should throw ConflictError if username already exists 215ms
   ✓ AuthService > User Registration > should throw ValidationError for invalid email format 58ms
   ✓ AuthService > User Registration > should throw ValidationError for weak password 58ms
   ✓ AuthService > User Login > should login successfully with email  486ms
   ✓ AuthService > User Login > should login successfully with username  608ms
   ✓ AuthService > User Login > should throw UnauthorizedError for invalid credentials  437ms
   ✓ AuthService > User Login > should throw ValidationError for invalid input 284ms
   ✓ AuthService > Token Verification > should verify valid access token 264ms
   ✓ AuthService > Token Verification > should throw error for invalid token  313ms
   ✓ AuthService > Token Verification > should throw error for malformed token 222ms
   ✓ AuthService > Security Features > should normalize email addresses to lowercase  312ms
   ✓ AuthService > Security Features > should not include password hash in response 237ms
 ✓ src/__tests__/auth.endpoints.test.ts (5 tests) 12328ms
   ✓ Authentication API Endpoints > should register a new user successfully  1841ms
   ✓ Authentication API Endpoints > should login successfully  3661ms
   ✓ Authentication API Endpoints > should handle validation errors  1514ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1557ms
   ✓ Authentication API Endpoints > should return server health status  1524ms
