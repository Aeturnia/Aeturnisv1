
> @aeturnis/server@1.0.0 test
> vitest run

[33mThe CJS build of Vite's Node API is deprecated. See https://vite.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.[39m

 RUN  v3.2.4 /home/runner/workspace/packages/server

 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts (10 tests | 3 failed) 194ms
   ✓ ServiceProvider Integration Tests > Mock Services > should register all mock services 96ms
   × ServiceProvider Integration Tests > Mock Services > should return mock data from services 14ms
     → expected 0 to be greater than 0
   ✓ ServiceProvider Integration Tests > Mock Services > should maintain state between calls 33ms
   ✓ ServiceProvider Integration Tests > Real Services > should register all real services 3ms
   × ServiceProvider Integration Tests > Real Services > should use real service implementations 6ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   × ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment 13ms
     → expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality
   ✓ ServiceProvider Integration Tests > Error Handling > should throw error for unregistered service 5ms
   ✓ ServiceProvider Integration Tests > Error Handling > should handle service errors gracefully 10ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should return same instance 1ms
   ✓ ServiceProvider Integration Tests > Singleton Pattern > should share registered services across calls 5ms
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts (23 tests | 6 failed) 259ms
   ✓ Service Provider Error Scenarios > Service Registration Errors > should throw error when getting unregistered service 76ms
   × Service Provider Error Scenarios > Service Registration Errors > should handle null service registration 16ms
     → Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
   ✓ Service Provider Error Scenarios > Service Registration Errors > should allow re-registration of services 6ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle non-existent monster updates 6ms
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle invalid zone queries 5ms
   × Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster 8ms
     → promise rejected "Error: Monster non-existent-id not found" instead of resolving
   ✓ Service Provider Error Scenarios > Monster Service Error Scenarios > should handle spawning at non-existent spawn point 5ms
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should handle interaction with non-existent NPC 6ms
   × Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue 59ms
     → expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'
   ✓ Service Provider Error Scenarios > NPC Service Error Scenarios > should return null for non-existent NPC lookup 5ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for deduction 5ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle insufficient funds for transfer 6ms
   ✓ Service Provider Error Scenarios > Currency Service Error Scenarios > should handle negative amounts gracefully 5ms
   × Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank 8ms
     → expected 'Item not found' to contain 'Bank is full'
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle withdrawing non-existent item 2ms
   ✓ Service Provider Error Scenarios > Bank Service Error Scenarios > should handle invalid bank type access 2ms
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should handle combat with non-existent target 2ms
   × Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session 18ms
     → promise resolved "{ success: true, …(3) }" instead of rejecting
   ✓ Service Provider Error Scenarios > Combat Service Error Scenarios > should return null for non-existent combat session 2ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent service access 4ms
   ✓ Service Provider Error Scenarios > Concurrent Access Scenarios > should handle concurrent modifications 2ms
   ✓ Service Provider Error Scenarios > Service Lifecycle Errors > should handle service initialization failures gracefully 7ms
   × Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors 4ms
     → expected 0 to be greater than 0
 ❯ src/__tests__/unit/routes/auth.routes.test.ts (10 tests | 6 failed) 288ms
   × Auth Routes > POST /api/auth/register > should register a new user successfully 111ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/register > should handle registration errors 28ms
     → expected 201 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/login > should login successfully 24ms
     → expected { success: true } to deeply equal { success: true, data: { …(3) } }
   × Auth Routes > POST /api/auth/login > should handle invalid credentials 8ms
     → expected 200 to be 500 // Object.is equality
   × Auth Routes > POST /api/auth/refresh > should refresh tokens successfully 10ms
     → expected { success: true } to deeply equal { success: true, data: { …(2) } }
   ✓ Auth Routes > POST /api/auth/refresh > should require refresh token 10ms
   × Auth Routes > POST /api/auth/logout > should logout successfully 37ms
     → expected "spy" to be called with arguments: [ 'valid_token' ][90m

Number of calls: [1m0[22m
[39m
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return profile when authenticated 12ms
   ✓ Auth Routes > Protected routes > GET /api/auth/profile > should return 401 when not authenticated 19ms
   ✓ Auth Routes > Protected routes > GET /api/auth/verify > should verify token 24ms
 ❯ src/__tests__/unit/services/TutorialService.test.ts (25 tests | 9 failed) 65ms
   ✓ MockTutorialService > getTutorialZone > should return tutorial zone information 12ms
   ✓ MockTutorialService > getTutorialZone > should include expected NPCs 2ms
   ✓ MockTutorialService > getTutorialStatus > should return existing character status 2ms
   ✓ MockTutorialService > getTutorialStatus > should create default status for new character 1ms
   ✓ MockTutorialService > getAllQuests > should return all tutorial quests 1ms
   × MockTutorialService > getAllQuests > should include proper quest structure 12ms
     → expected undefined to be true // Object.is equality
   ✓ MockTutorialService > getAllQuests > should have proper quest progression 1ms
   × MockTutorialService > updateProgress > should update tutorial progress successfully 5ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   × MockTutorialService > updateProgress > should complete quest when reaching final step 2ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   × MockTutorialService > updateProgress > should complete entire tutorial after all quests 1ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   ✓ MockTutorialService > updateProgress > should throw error for invalid quest ID 2ms
   ✓ MockTutorialService > updateProgress > should throw error for invalid step index 1ms
   × MockTutorialService > getGuidance > should return guidance for character in progress 1ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   × MockTutorialService > getGuidance > should return completion guidance for finished tutorial 1ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   × MockTutorialService > getGuidance > should return default guidance for new character 2ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   ✓ MockTutorialService > getHelp > should return all help messages without filters 1ms
   ✓ MockTutorialService > getHelp > should filter by category 1ms
   ✓ MockTutorialService > getHelp > should filter by context 1ms
   ✓ MockTutorialService > getHelp > should return appropriate suggested actions for combat 1ms
   ✓ MockTutorialService > getHelp > should return appropriate suggested actions for magic 1ms
   × MockTutorialService > Error Handling > should handle missing character ID gracefully 1ms
     → Cannot read properties of undefined (reading 'MEDIUM')
   ✓ MockTutorialService > Error Handling > should handle malformed help requests 1ms
   ✓ MockTutorialService > Mock Data Validation > should have consistent quest step structure 4ms
   × MockTutorialService > Mock Data Validation > should have valid reward types 3ms
     → actual value must be number or bigint, received "undefined"
   ✓ MockTutorialService > Mock Data Validation > should have consistent NPC references 1ms
 ❯ src/__tests__/unit/services/CharacterService.test.ts (18 tests | 15 failed) 143ms
   × CharacterService > getCharactersByAccount > should return characters from cache when available 22ms
     → expected '[{"id":"f9caaa25-9c70-4044-b75a-4690e…' to deeply equal [ { …(44) }, { …(44) } ]
   × CharacterService > getCharactersByAccount > should fetch from repository when not cached 12ms
     → expected "spy" to be called with arguments: [ …(3) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > getCharactersByAccount > should return empty array when user has no characters 5ms
     → expected "spy" to be called at least once
   × CharacterService > getCharactersByAccount > should handle cache errors gracefully 3ms
     → Cache error
   × CharacterService > getCharacterWithStats > should return character with calculated stats 13ms
     → expected { character: { …(44) }, …(1) } to deeply equal { character: { …(44) }, …(1) }
   ✓ CharacterService > getCharacterWithStats > should return null when character not found 2ms
   × CharacterService > getCharacterWithStats > should cache character data 2ms
     → expected "spy" to be called with arguments: [ 'character:test-character-id', …(2) ][90m

Number of calls: [1m0[22m
[39m
   × CharacterService > createCharacter > should create character successfully 4ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > createCharacter > should throw error when character limit reached 6ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Maximum character limit reached'
   × CharacterService > createCharacter > should throw error when name already exists 15ms
     → expected 'this.characterRepo.isNameTaken is not…' to contain 'Character name already exists'
   × CharacterService > createCharacter > should validate character name format 25ms
     → expected 'this.characterRepo.isNameTaken is not…' to match /Invalid character name/
   × CharacterService > createCharacter > should set initial stats based on race and class 5ms
     → this.characterRepo.isNameTaken is not a function
   × CharacterService > deleteCharacter > should delete character successfully 10ms
     → this.characterRepo.softDelete is not a function
   ✓ CharacterService > deleteCharacter > should return false when character not found 3ms
   ✓ CharacterService > deleteCharacter > should return false when user does not own character 2ms
   × CharacterService > updateCharacterPosition > should update position successfully 2ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle character not found 1ms
     → characterService.updateCharacterPosition is not a function
   × CharacterService > updateCharacterPosition > should handle unauthorized access 3ms
     → characterService.updateCharacterPosition is not a function
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts (13 tests | 3 failed) 103ms
   ✓ Combat Controller > getPlayerStats > should return mock player stats successfully 7ms
   ✓ Combat Controller > getPlayerStats > should handle errors gracefully 2ms
   ✓ Combat Controller > getCombatSession > should return combat session when found 3ms
   ✓ Combat Controller > getCombatSession > should return 400 when session ID is missing 5ms
   ✓ Combat Controller > getCombatSession > should return 404 when session not found 2ms
   ✓ Combat Controller > getCombatSession > should handle service errors 3ms
   × Combat Controller > performTestAction > should perform combat action successfully 21ms
     → expected "spy" to be called with arguments: [ 'session-123', …(2) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should return 400 when session ID is missing 1ms
   ✓ Combat Controller > performTestAction > should return 400 when action is missing 2ms
   ✓ Combat Controller > performTestAction > should validate action type 5ms
   × Combat Controller > performTestAction > should auto-select target for attack actions when not provided 28ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
   ✓ Combat Controller > performTestAction > should handle combat service not available 7ms
   × Combat Controller > performTestAction > should handle different action types 10ms
     → expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/controllers/character.controller.test.ts (19 tests | 10 failed) 488ms
   × Character Routes > GET /api/characters > should return all characters for authenticated user 139ms
     → expected 500 to be 200 // Object.is equality
   × Character Routes > GET /api/characters > should return empty array when user has no characters 11ms
     → expected 500 to be 200 // Object.is equality
   ✓ Character Routes > GET /api/characters > should require authentication 15ms
   × Character Routes > GET /api/characters/:id > should return character with stats when owned by user 21ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > GET /api/characters/:id > should return 404 when character not found 20ms
   × Character Routes > GET /api/characters/:id > should return 403 when character owned by different user 22ms
     → expected 404 to be 403 // Object.is equality
   ✓ Character Routes > GET /api/characters/:id > should validate character ID format 9ms
   × Character Routes > POST /api/characters > should create character successfully 29ms
     → expected undefined to deeply equal { …(44) }
   ✓ Character Routes > POST /api/characters > should validate character name 10ms
   ✓ Character Routes > POST /api/characters > should validate character name format 13ms
   ✓ Character Routes > POST /api/characters > should validate race enum 16ms
   × Character Routes > POST /api/characters > should handle duplicate name error 13ms
     → expected 201 to be 400 // Object.is equality
   × Character Routes > POST /api/characters > should handle character limit error 14ms
     → expected 201 to be 400 // Object.is equality
   × Character Routes > DELETE /api/characters/:id > should delete character successfully 10ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > DELETE /api/characters/:id > should return 404 when character not found 12ms
   ✓ Character Routes > DELETE /api/characters/:id > should validate character ID format 24ms
   × Character Routes > PATCH /api/characters/:id/position > should update character position successfully 18ms
     → expected 404 to be 200 // Object.is equality
   ✓ Character Routes > PATCH /api/characters/:id/position > should validate position data 9ms
   × Character Routes > PATCH /api/characters/:id/position > should allow optional rotation 51ms
     → expected 404 to be 200 // Object.is equality
 ❯ src/__tests__/unit/services/AffinityService.test.ts (22 tests | 2 failed) 317ms
   ✓ MockAffinityService > getAffinitySummary > should return affinity summary for existing character 33ms
   ✓ MockAffinityService > getAffinitySummary > should return empty summary for new character 2ms
   ✓ MockAffinityService > getAffinitySummary > should include recommendations for new character 12ms
   ✓ MockAffinityService > getAffinitySummary > should exclude achievements and milestones when not requested 3ms
   × MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type 32ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackWeaponUse > should update existing weapon affinity 1ms
   ✓ MockAffinityService > trackWeaponUse > should apply context modifiers correctly 2ms
   ✓ MockAffinityService > trackWeaponUse > should apply diminishing returns for high usage 1ms
   ✓ MockAffinityService > trackWeaponUse > should calculate rank progression correctly 4ms
   × MockAffinityService > trackMagicUse > should track magic usage for new school 5ms
     → expected 1 to be greater than 1
   ✓ MockAffinityService > trackMagicUse > should update existing magic affinity 99ms
   ✓ MockAffinityService > trackMagicUse > should limit favorite spells to 5 51ms
   ✓ MockAffinityService > trackMagicUse > should apply different bonuses for magic vs weapons 13ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should have correct rank thresholds 8ms
   ✓ MockAffinityService > Rank and Bonus Calculations > should provide appropriate bonuses for each rank 22ms
   ✓ MockAffinityService > Error Handling and Validation > should handle empty character IDs 3ms
   ✓ MockAffinityService > Error Handling and Validation > should handle invalid weapon types gracefully 1ms
   ✓ MockAffinityService > Error Handling and Validation > should maintain data consistency 2ms
   ✓ MockAffinityService > Mock Data Validation > should have consistent demo data 2ms
   ✓ MockAffinityService > Mock Data Validation > should have valid progression formulas 1ms
   ✓ MockAffinityService > Mock Data Validation > should handle all weapon types 4ms
   ✓ MockAffinityService > Mock Data Validation > should handle all magic schools 4ms
 ❯ src/tests/services/StatsService.test.ts (22 tests | 2 failed) 38ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should calculate tier progression correctly when base stat reaches 100 21ms
     → expected false to be true // Object.is equality
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should not tier up if base stat < 100 even with high total points 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should handle multiple tier progressions correctly 2ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should unlock paragon system at level 100 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should not unlock paragon before level 100 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Paragon Point Mechanics > should apply paragon points with logarithmic scaling 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should unlock prestige at level 500 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Prestige System > should apply prestige multiplier correctly 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should apply equipment bonuses with logarithmic scaling 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Equipment Stat Changes > should handle zero equipment bonuses 0ms
   × AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Tier 50+ Simulation > should handle extremely high tier values (Tier 50) 1ms
     → expected 1344.2 to be greater than 2400
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Paragon 100K+ Simulation > should handle massive paragon point allocation (100K) 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Prestige 1K+ Simulation > should handle extreme prestige levels (1000) 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Extreme Value Soft Cap > should apply soft cap for values exceeding 1000 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > BigInt Enforcement > should handle BigInt values for resource pools 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply race modifiers correctly 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 3. Race and Class Scaling > should apply class scaling correctly 1ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should calculate all derived stats from effective stats only 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 4. Derived Stats Validation > should enforce percentage caps correctly 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should clamp negative base stats to positive values 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 5. Negative Value Clamping > should ensure resource pools are always ≥1 0ms
   ✓ AIPE (Aeturnis Infinite Progression Engine) - StatsService > 6. Formula Transparency > should provide effective stat breakdown for UI transparency 0ms
 ❯ src/tests/services/CharacterService.cache.test.ts (7 tests | 4 failed) 110ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated 20ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats 2ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   ✓ AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when prestige level changes 9ms
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed 8ms
     → expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
   × AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation 42ms
     → Cannot convert undefined to a BigInt
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should use cached character data when available 19ms
   ✓ AIPE Cache Invalidation Tests > Cache Performance Tests > should cache character after database fetch 2ms
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts (12 tests | 9 failed) 93ms
   × MockMonsterService > getMonstersInZone > should return monsters for a valid zone 22ms
     → expected 0 to be greater than 0
   × MockMonsterService > getMonstersInZone > should return different monsters for different zones 2ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > getMonstersInZone > should return empty array for unknown zone 2ms
   ✓ MockMonsterService > spawnMonster > should spawn a monster at a spawn point 1ms
   × MockMonsterService > spawnMonster > should add spawned monster to the zone 8ms
     → expected +0 to be 1 // Object.is equality
   × MockMonsterService > updateMonsterState > should update monster state 10ms
     → Cannot read properties of undefined (reading 'id')
   ✓ MockMonsterService > updateMonsterState > should throw error for non-existent monster 3ms
   × MockMonsterService > killMonster > should remove monster from the zone 1ms
     → Cannot read properties of undefined (reading 'id')
   × MockMonsterService > killMonster > should not throw error for non-existent monster 24ms
     → promise rejected "Error: Monster non-existent not found" instead of resolving
   × MockMonsterService > getMonsterTypes > should return list of monster types 15ms
     → expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
   × MockMonsterService > getSpawnPoints > should return spawn points for a zone 1ms
     → service.getSpawnPoints is not a function
   × MockMonsterService > getSpawnPoints > should return empty array for unknown zone 1ms
     → service.getSpawnPoints is not a function
 ❯ src/__tests__/unit/services/CacheService.test.ts (14 tests | 14 failed) 22ms
   × CacheService > get > should return parsed value for existing key 9ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null for non-existent key 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > get > should return null and log error on Redis failure 1ms
     → Cannot read properties of null (reading 'get')
   × CacheService > set > should set value without TTL 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > set > should set value with TTL 1ms
     → Cannot read properties of null (reading 'setex')
   × CacheService > set > should throw error on Redis failure 1ms
     → Cannot read properties of null (reading 'set')
   × CacheService > delete > should delete key 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > delete > should handle deletion errors gracefully 1ms
     → Cannot read properties of null (reading 'del')
   × CacheService > ttl > should return TTL for existing key 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > ttl > should return -1 on error 1ms
     → Cannot read properties of null (reading 'ttl')
   × CacheService > exists > should return true for existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false for non-existing key 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > exists > should return false on error 1ms
     → Cannot read properties of null (reading 'exists')
   × CacheService > disconnect > should disconnect from Redis 1ms
     → Cannot read properties of null (reading 'quit')
 ❯ src/__tests__/integration/CharacterRoutes.test.ts (21 tests | 11 failed) 3420ms
   × Character Routes > GET /api/v1/characters/test > should return system operational status 87ms
     → expected 200 "OK", got 401 "Unauthorized"
   ✓ Character Routes > GET /api/v1/characters > should return empty array for new user 100ms
   ✓ Character Routes > GET /api/v1/characters > should require authentication 32ms
   × Character Routes > GET /api/v1/characters > should return user characters after creation 134ms
     → expected +0 to be 1 // Object.is equality
   × Character Routes > POST /api/v1/characters > should create a new character successfully 262ms
     → actual value must be number or bigint, received "undefined"
   ✓ Character Routes > POST /api/v1/characters > should require authentication 45ms
   ✓ Character Routes > POST /api/v1/characters > should validate required fields 47ms
   ✓ Character Routes > POST /api/v1/characters > should validate character name length 26ms
   ✓ Character Routes > POST /api/v1/characters > should validate character race 27ms
   × Character Routes > POST /api/v1/characters > should handle duplicate character names 139ms
     → expected 'Character name "DuplicateName" is alr…' to contain 'already exists'
   × Character Routes > GET /api/v1/characters/:id > should get character by ID with stats 113ms
     → expected 200 "OK", got 500 "Internal Server Error"
   × Character Routes > GET /api/v1/characters/:id > should return 404 for non-existent character 55ms
     → expected 404 "Not Found", got 400 "Bad Request"
   ✓ Character Routes > GET /api/v1/characters/:id > should deny access to other users characters  739ms
   ✓ Character Routes > GET /api/v1/characters/:id > should require valid UUID format 38ms
   × Character Routes > POST /api/v1/characters/validate-name > should validate available character name 81ms
     → expected undefined to be true // Object.is equality
   × Character Routes > POST /api/v1/characters/validate-name > should validate unavailable character name 100ms
     → expected false to be true // Object.is equality
   ✓ Character Routes > POST /api/v1/characters/validate-name > should validate invalid character name length 72ms
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for human 89ms
     → expected 200 "OK", got 400 "Bad Request"
   × Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for elf 45ms
     → expected 200 "OK", got 400 "Bad Request"
   ✓ Character Routes > GET /api/v1/characters/appearance/:race > should return 400 for invalid race 48ms
   × Character Routes > Character Creation Workflow Integration > should complete full character creation workflow 47ms
     → expected undefined to be true // Object.is equality
 ✓ src/sockets/__tests__/handlers/ConnectionHandlers.test.ts (13 tests) 838ms
 ✓ src/providers/__tests__/mock/MockCurrencyService.test.ts (21 tests) 66ms
 ✓ src/sockets/__tests__/integration/simplePingTest.test.ts (1 test) 305ms
 ✓ src/sockets/__tests__/handlers/ChatHandler.test.ts (15 tests) 46ms
 ✓ src/providers/__tests__/mock/MockNPCService.test.ts (13 tests) 38ms
 ✓ src/sockets/__tests__/integration/socketFlow.test.ts (10 tests) 1749ms
   ✓ Socket.IO Integration Flow > Basic Socket Communication > should handle ping-pong communication  610ms
 ✓ src/__tests__/unit/services/npc.service.test.ts (20 tests) 27ms
 ✓ src/__tests__/unit/services/monster.service.test.ts (16 tests) 18ms
 ✓ src/__tests__/index.test.ts (5 tests) 7ms
 ✓ src/index.test.ts (2 tests) 5ms
 ✓ src/services/AuthService.test.ts (14 tests) 5391ms
   ✓ AuthService > User Registration > should register a new user successfully  879ms
   ✓ AuthService > User Registration > should throw ConflictError if email already exists  370ms
   ✓ AuthService > User Registration > should throw ConflictError if username already exists  393ms
   ✓ AuthService > User Login > should login successfully with email  570ms
   ✓ AuthService > User Login > should login successfully with username  621ms
   ✓ AuthService > User Login > should throw UnauthorizedError for invalid credentials  529ms
   ✓ AuthService > User Login > should throw ValidationError for invalid input  376ms
   ✓ AuthService > Token Verification > should verify valid access token  331ms
   ✓ AuthService > Token Verification > should throw error for malformed token  356ms
   ✓ AuthService > Security Features > should not include password hash in response  354ms
 ✓ src/__tests__/integration/auth.endpoints.test.ts (5 tests) 11931ms
   ✓ Authentication API Endpoints > should register a new user successfully  1802ms
   ✓ Authentication API Endpoints > should login successfully  3333ms
   ✓ Authentication API Endpoints > should handle validation errors  1509ms
   ✓ Authentication API Endpoints > should handle unauthorized access  1529ms
   ✓ Authentication API Endpoints > should return server health status  1506ms

⎯⎯⎯⎯⎯⎯ Failed Tests 94 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters/test > should return system operational status
Error: expected 200 "OK", got 401 "Unauthorized"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:62:10
     60|       const response = await request(app)
     61|         .get('/api/v1/characters/test')
     62|         .expect(200);
       |          ^
     63| 
     64|       expect(response.body).toEqual({
 ❯ Test._assertStatus ../../node_modules/supertest/lib/test.js:267:14
 ❯ ../../node_modules/supertest/lib/test.js:323:13
 ❯ Test._assertFunction ../../node_modules/supertest/lib/test.js:300:13
 ❯ Test.assert ../../node_modules/supertest/lib/test.js:179:23
 ❯ Server.localAssert ../../node_modules/supertest/lib/test.js:135:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters > should return user characters after creation
AssertionError: expected +0 to be 1 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 1[39m
[31m+ 0[39m

 ❯ src/__tests__/integration/CharacterRoutes.test.ts:114:40
    112| 
    113|       expect(response.body.success).toBe(true);
    114|       expect(response.body.data.count).toBe(1);
       |                                        ^
    115|       expect(response.body.data.characters).toHaveLength(1);
    116|       expect(response.body.data.characters[0].name).toBe('TestWarrior'…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > POST /api/v1/characters > should create a new character successfully
TypeError: actual value must be number or bigint, received "undefined"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:142:41
    140|       expect(response.body.data.class).toBe(CharacterClass.MAGE);
    141|       expect(response.body.data.level).toBe(1);
    142|       expect(response.body.data.health).toBeGreaterThan(0);
       |                                         ^
    143|       expect(response.body.data.mana).toBeGreaterThan(0);
    144|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > POST /api/v1/characters > should handle duplicate character names
AssertionError: expected 'Character name "DuplicateName" is alr…' to contain 'already exists'

Expected: [32m"already exists"[39m
Received: [31m"Character name "DuplicateName" is already taken"[39m

 ❯ src/__tests__/integration/CharacterRoutes.test.ts:233:35
    231| 
    232|       expect(response.body.success).toBe(false);
    233|       expect(response.body.error).toContain('already exists');
       |                                   ^
    234|     });
    235|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters/:id > should get character by ID with stats
Error: expected 200 "OK", got 500 "Internal Server Error"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:251:10
    249|         .get(`/api/v1/characters/${character.id}`)
    250|         .set('Authorization', `Bearer ${authToken}`)
    251|         .expect(200);
       |          ^
    252| 
    253|       expect(response.body.success).toBe(true);
 ❯ Test._assertStatus ../../node_modules/supertest/lib/test.js:267:14
 ❯ ../../node_modules/supertest/lib/test.js:323:13
 ❯ Test._assertFunction ../../node_modules/supertest/lib/test.js:300:13
 ❯ Test.assert ../../node_modules/supertest/lib/test.js:179:23
 ❯ Server.localAssert ../../node_modules/supertest/lib/test.js:135:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters/:id > should return 404 for non-existent character
Error: expected 404 "Not Found", got 400 "Bad Request"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:266:10
    264|         .get(`/api/v1/characters/${fakeId}`)
    265|         .set('Authorization', `Bearer ${authToken}`)
    266|         .expect(404);
       |          ^
    267| 
    268|       expect(response.body.success).toBe(false);
 ❯ Test._assertStatus ../../node_modules/supertest/lib/test.js:267:14
 ❯ ../../node_modules/supertest/lib/test.js:323:13
 ❯ Test._assertFunction ../../node_modules/supertest/lib/test.js:300:13
 ❯ Test.assert ../../node_modules/supertest/lib/test.js:179:23
 ❯ Server.localAssert ../../node_modules/supertest/lib/test.js:135:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > POST /api/v1/characters/validate-name > should validate available character name
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ src/__tests__/integration/CharacterRoutes.test.ts:324:46
    322|       expect(response.body.success).toBe(true);
    323|       expect(response.body.data.isValid).toBe(true);
    324|       expect(response.body.data.isAvailable).toBe(true);
       |                                              ^
    325|     });
    326| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > POST /api/v1/characters/validate-name > should validate unavailable character name
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/__tests__/integration/CharacterRoutes.test.ts:343:42
    341| 
    342|       expect(response.body.success).toBe(true);
    343|       expect(response.body.data.isValid).toBe(true);
       |                                          ^
    344|       expect(response.body.data.isAvailable).toBe(false);
    345|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for human
Error: expected 200 "OK", got 400 "Bad Request"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:361:10
    359|       const response = await request(app)
    360|         .get('/api/v1/characters/appearance/HUMAN')
    361|         .expect(200);
       |          ^
    362| 
    363|       expect(response.body.success).toBe(true);
 ❯ Test._assertStatus ../../node_modules/supertest/lib/test.js:267:14
 ❯ ../../node_modules/supertest/lib/test.js:323:13
 ❯ Test._assertFunction ../../node_modules/supertest/lib/test.js:300:13
 ❯ Test.assert ../../node_modules/supertest/lib/test.js:179:23
 ❯ Server.localAssert ../../node_modules/supertest/lib/test.js:135:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > GET /api/v1/characters/appearance/:race > should generate random appearance for elf
Error: expected 200 "OK", got 400 "Bad Request"
 ❯ src/__tests__/integration/CharacterRoutes.test.ts:373:10
    371|       const response = await request(app)
    372|         .get('/api/v1/characters/appearance/ELF')
    373|         .expect(200);
       |          ^
    374| 
    375|       expect(response.body.success).toBe(true);
 ❯ Test._assertStatus ../../node_modules/supertest/lib/test.js:267:14
 ❯ ../../node_modules/supertest/lib/test.js:323:13
 ❯ Test._assertFunction ../../node_modules/supertest/lib/test.js:300:13
 ❯ Test.assert ../../node_modules/supertest/lib/test.js:179:23
 ❯ Server.localAssert ../../node_modules/supertest/lib/test.js:135:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/94]⎯

 FAIL  src/__tests__/integration/CharacterRoutes.test.ts > Character Routes > Character Creation Workflow Integration > should complete full character creation workflow
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ src/__tests__/integration/CharacterRoutes.test.ts:398:52
    396|         .expect(200);
    397| 
    398|       expect(nameValidation.body.data.isAvailable).toBe(true);
       |                                                    ^
    399| 
    400|       // Step 2: Get random appearance

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/94]⎯

 FAIL  src/tests/services/CharacterService.cache.test.ts > AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when character stats are updated
AssertionError: expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/tests/services/CharacterService.cache.test.ts:44:39
     42|       
     43|       // Verify cache invalidation was called
     44|       expect(mockCacheService.delete).toHaveBeenCalledWith(`character:…
       |                                       ^
     45|       expect(mockCacheService.deletePattern).toHaveBeenCalledWith(`acc…
     46|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/94]⎯

 FAIL  src/tests/services/CharacterService.cache.test.ts > AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when equipment changes affect stats
AssertionError: expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/tests/services/CharacterService.cache.test.ts:61:39
     59|       
     60|       // Verify cache invalidation
     61|       expect(mockCacheService.delete).toHaveBeenCalledWith(`character:…
       |                                       ^
     62|     });
     63| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/94]⎯

 FAIL  src/tests/services/CharacterService.cache.test.ts > AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should invalidate cache when paragon points are redistributed
AssertionError: expected "spy" to be called with arguments: [ 'character:test-char-001' ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/tests/services/CharacterService.cache.test.ts:92:39
     90|       
     91|       // Verify cache invalidation
     92|       expect(mockCacheService.delete).toHaveBeenCalledWith(`character:…
       |                                       ^
     93|     });
     94| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/94]⎯

 FAIL  src/tests/services/CharacterService.cache.test.ts > AIPE Cache Invalidation Tests > 3. Cache Invalidation on Stat Changes > should recalculate derived stats after cache invalidation
TypeError: Cannot convert undefined to a BigInt
 ❯ Function.calculateDerivedStats src/services/StatsService.ts:122:7
    120|       baseStats.strength,
    121|       character.strengthTier,
    122|       BigInt(character.bonusStrength),
       |       ^
    123|       paragonDist.strength || BigInt(0),
    124|       character.prestigeLevel,
 ❯ CharacterService.getCharacterWithStats src/services/CharacterService.ts:94:39
 ❯ src/tests/services/CharacterService.cache.test.ts:115:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/94]⎯

 FAIL  src/tests/services/StatsService.test.ts > AIPE (Aeturnis Infinite Progression Engine) - StatsService > 1. Stat Progression Breakpoints Tests > Tier-Up Mechanics > should calculate tier progression correctly when base stat reaches 100
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/tests/services/StatsService.test.ts:79:40
     77|         const progress = StatsService.calculateStatTierProgress(100, 5…
     78|         
     79|         expect(progress.shouldUpgrade).toBe(true);
       |                                        ^
     80|         expect(progress.newBase).toBe(10);
     81|         expect(progress.newTier).toBe(1);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/94]⎯

 FAIL  src/tests/services/StatsService.test.ts > AIPE (Aeturnis Infinite Progression Engine) - StatsService > 2. Extreme Value Simulation > Tier 50+ Simulation > should handle extremely high tier values (Tier 50)
AssertionError: expected 1344.2 to be greater than 2400
 ❯ src/tests/services/StatsService.test.ts:172:41
    170|         const stats = StatsService.calculateDerivedStats(character);
    171|         // Tier 50 should provide 50 * 50 = 2500 tier bonus
    172|         expect(stats.effectiveStrength).toBeGreaterThan(2400);
       |                                         ^
    173|         expect(Number.isFinite(stats.effectiveStrength)).toBe(true);
    174|       });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > GET /api/characters > should return all characters for authenticated user
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:122:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > GET /api/characters > should return empty array when user has no characters
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:133:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > GET /api/characters/:id > should return character with stats when owned by user
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:171:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > GET /api/characters/:id > should return 403 when character owned by different user
AssertionError: expected 404 to be 403 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 403[39m
[31m+ 404[39m

 ❯ Module.expectApiError src/__tests__/helpers/api-helpers.ts:150:27
    148|   errorMessage?: string
    149| ): void {
    150|   expect(response.status).toBe(statusCode);
       |                           ^
    151|   expect(response.body).toHaveProperty('error');
    152|   
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:197:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > POST /api/characters > should create character successfully
AssertionError: expected undefined to deeply equal { …(44) }

[32m- Expected:[39m 
{
  "accountId": "test-user-id",
  "appearance": {
    "build": 1,
    "eyeColor": "#0000FF",
    "hairColor": "#8B4513",
    "hairStyle": 1,
    "height": 180,
    "skinColor": "#FDBCB4",
    "skinTone": 1,
  },
  "bankSlots": 20,
  "baseCharisma": 10,
  "baseConstitution": 10,
  "baseDexterity": 10,
  "baseIntelligence": 10,
  "baseStrength": 10,
  "baseWisdom": 10,
  "bonusCharisma": 0,
  "bonusConstitution": 0,
  "bonusDexterity": 0,
  "bonusIntelligence": 0,
  "bonusStrength": 0,
  "bonusWisdom": 0,
  "charismaTier": 0,
  "class": "warrior",
  "constitutionTier": 0,
  "createdAt": 2025-07-09T00:19:06.116Z,
  "currentHp": 100,
  "currentMp": 100,
  "currentStamina": 100,
  "currentZone": "starter_zone",
  "dexterityTier": 0,
  "experience": 0,
  "gender": "male",
  "gold": 100,
  "id": "a3e7a231-7349-490b-ab00-d07380208dfa",
  "intelligenceTier": 0,
  "isDeleted": false,
  "lastPlayedAt": null,
  "level": 1,
  "maxHp": 100,
  "maxMp": 100,
  "maxStamina": 100,
  "name": "TestWarrior",
  "paragonDistribution": {},
  "paragonPoints": 0,
  "position": {
    "x": 0,
    "y": 0,
    "z": 0,
  },
  "prestigeLevel": 0,
  "race": "human",
  "strengthTier": 0,
  "updatedAt": 2025-07-09T00:19:06.116Z,
  "wisdomTier": 0,
}

[31m+ Received:[39m 
undefined

 ❯ src/__tests__/unit/controllers/character.controller.test.ts:236:34
    234|       
    235|       expectApiSuccess(response, 201);
    236|       expect(response.body.data).toEqual(mockCharacter);
       |                                  ^
    237|       expect(mockCharacterService.createCharacter).toHaveBeenCalledWit…
    238|         'test-user-id',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > POST /api/characters > should handle duplicate name error
AssertionError: expected 201 to be 400 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 400[39m
[31m+ 201[39m

 ❯ Module.expectApiError src/__tests__/helpers/api-helpers.ts:150:27
    148|   errorMessage?: string
    149| ): void {
    150|   expect(response.status).toBe(statusCode);
       |                           ^
    151|   expect(response.body).toHaveProperty('error');
    152|   
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:286:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > POST /api/characters > should handle character limit error
AssertionError: expected 201 to be 400 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 400[39m
[31m+ 201[39m

 ❯ Module.expectApiError src/__tests__/helpers/api-helpers.ts:150:27
    148|   errorMessage?: string
    149| ): void {
    150|   expect(response.status).toBe(statusCode);
       |                           ^
    151|   expect(response.body).toHaveProperty('error');
    152|   
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:296:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > DELETE /api/characters/:id > should delete character successfully
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:308:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > PATCH /api/characters/:id/position > should update character position successfully
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:353:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/94]⎯

 FAIL  src/__tests__/unit/controllers/character.controller.test.ts > Character Routes > PATCH /api/characters/:id/position > should allow optional rotation
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ❯ Module.expectApiSuccess src/__tests__/helpers/api-helpers.ts:165:27
    163|   statusCode: number = 200
    164| ): void {
    165|   expect(response.status).toBe(statusCode);
       |                           ^
    166|   expect(response.body).not.toHaveProperty('error');
    167| }
 ❯ src/__tests__/unit/controllers/character.controller.test.ts:395:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/94]⎯

 FAIL  src/__tests__/unit/controllers/combat.controller.test.ts > Combat Controller > performTestAction > should perform combat action successfully
AssertionError: expected "spy" to be called with arguments: [ 'session-123', …(2) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts:188:47
    186|       await combatController.performTestAction(mockRequest, mockRespon…
    187|       
    188|       expect(mockCombatService.performAction).toHaveBeenCalledWith(
       |                                               ^
    189|         'session-123',
    190|         '550e8400-e29b-41d4-a716-446655440000', // Mock player ID

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/94]⎯

 FAIL  src/__tests__/unit/controllers/combat.controller.test.ts > Combat Controller > performTestAction > should auto-select target for attack actions when not provided
AssertionError: expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts:256:47
    254|       await combatController.performTestAction(mockRequest, mockRespon…
    255|       
    256|       expect(mockCombatService.performAction).toHaveBeenCalledWith(
       |                                               ^
    257|         'session-123',
    258|         expect.any(String),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/94]⎯

 FAIL  src/__tests__/unit/controllers/combat.controller.test.ts > Combat Controller > performTestAction > should handle different action types
AssertionError: expected "spy" to be called with arguments: [ 'session-123', Any<String>, …(1) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/controllers/combat.controller.test.ts:294:49
    292|         await combatController.performTestAction(mockRequest, mockResp…
    293|         
    294|         expect(mockCombatService.performAction).toHaveBeenCalledWith(
       |                                                 ^
    295|           'session-123',
    296|           expect.any(String),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/register > should register a new user successfully
AssertionError: expected { success: true } to deeply equal { success: true, data: { …(3) } }

[32m- Expected[39m
[31m+ Received[39m

[2m  {[22m
[32m-   "data": {[39m
[32m-     "accessToken": "mock_access_token",[39m
[32m-     "refreshToken": "mock_refresh_token",[39m
[32m-     "user": {[39m
[32m-       "email": "test@example.com",[39m
[32m-       "id": "123",[39m
[32m-       "username": "testuser",[39m
[32m-     },[39m
[32m-   },[39m
[2m    "success": true,[22m
[2m  }[22m

 ❯ src/__tests__/unit/routes/auth.routes.test.ts:64:29
     62|       
     63|       expect(response.status).toBe(201);
     64|       expect(response.body).toEqual({
       |                             ^
     65|         success: true,
     66|         data: mockResult

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/register > should handle registration errors
AssertionError: expected 201 to be 500 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 500[39m
[31m+ 201[39m

 ❯ src/__tests__/unit/routes/auth.routes.test.ts:84:31
     82|         .send(registrationData);
     83|       
     84|       expect(response.status).toBe(500);
       |                               ^
     85|       expect(response.body).toHaveProperty('error');
     86|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/login > should login successfully
AssertionError: expected { success: true } to deeply equal { success: true, data: { …(3) } }

[32m- Expected[39m
[31m+ Received[39m

[2m  {[22m
[32m-   "data": {[39m
[32m-     "accessToken": "mock_access_token",[39m
[32m-     "refreshToken": "mock_refresh_token",[39m
[32m-     "user": {[39m
[32m-       "email": "test@example.com",[39m
[32m-       "id": "123",[39m
[32m-       "username": "testuser",[39m
[32m-     },[39m
[32m-   },[39m
[2m    "success": true,[22m
[2m  }[22m

 ❯ src/__tests__/unit/routes/auth.routes.test.ts:113:29
    111|       
    112|       expect(response.status).toBe(200);
    113|       expect(response.body).toEqual({
       |                             ^
    114|         success: true,
    115|         data: mockResult

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/login > should handle invalid credentials
AssertionError: expected 200 to be 500 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 500[39m
[31m+ 200[39m

 ❯ src/__tests__/unit/routes/auth.routes.test.ts:131:31
    129|         .send(loginData);
    130|       
    131|       expect(response.status).toBe(500);
       |                               ^
    132|       expect(response.body.error).toContain('Invalid credentials');
    133|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/refresh > should refresh tokens successfully
AssertionError: expected { success: true } to deeply equal { success: true, data: { …(2) } }

[32m- Expected[39m
[31m+ Received[39m

[2m  {[22m
[32m-   "data": {[39m
[32m-     "accessToken": "new_access_token",[39m
[32m-     "refreshToken": "new_refresh_token",[39m
[32m-   },[39m
[2m    "success": true,[22m
[2m  }[22m

 ❯ src/__tests__/unit/routes/auth.routes.test.ts:150:29
    148|       
    149|       expect(response.status).toBe(200);
    150|       expect(response.body).toEqual({
       |                             ^
    151|         success: true,
    152|         data: mockResult

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/94]⎯

 FAIL  src/__tests__/unit/routes/auth.routes.test.ts > Auth Routes > POST /api/auth/logout > should logout successfully
AssertionError: expected "spy" to be called with arguments: [ 'valid_token' ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/routes/auth.routes.test.ts:182:38
    180|         message: 'Logged out successfully'
    181|       });
    182|       expect(mockAuthService.logout).toHaveBeenCalledWith('valid_token…
       |                                      ^
    183|     });
    184|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/94]⎯

 FAIL  src/__tests__/unit/services/AffinityService.test.ts > MockAffinityService > trackWeaponUse > should track weapon usage for new weapon type
AssertionError: expected 1 to be greater than 1
 ❯ src/__tests__/unit/services/AffinityService.test.ts:108:44
    106|       expect(result.updatedAffinity.characterId).toBe('new_player');
    107|       expect(result.updatedAffinity.weaponType).toBe(WeaponType.SWORD);
    108|       expect(result.updatedAffinity.level).toBeGreaterThan(1);
       |                                            ^
    109|       expect(result.updatedAffinity.usageCount).toBe(1);
    110|       expect(result.updatedAffinity.rank).toBe(AffinityRank.NOVICE);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/94]⎯

 FAIL  src/__tests__/unit/services/AffinityService.test.ts > MockAffinityService > trackMagicUse > should track magic usage for new school
AssertionError: expected 1 to be greater than 1
 ❯ src/__tests__/unit/services/AffinityService.test.ts:234:44
    232|       expect(result.updatedAffinity.characterId).toBe('magic_novice');
    233|       expect(result.updatedAffinity.school).toBe(MagicSchool.ICE);
    234|       expect(result.updatedAffinity.level).toBeGreaterThan(1);
       |                                            ^
    235|       expect(result.updatedAffinity.usageCount).toBe(1);
    236|       expect(result.updatedAffinity.rank).toBe(AffinityRank.NOVICE);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > get > should return parsed value for existing key
TypeError: Cannot read properties of null (reading 'get')
 ❯ src/__tests__/unit/services/CacheService.test.ts:56:17
     54|     test('should return parsed value for existing key', async () => {
     55|       const testData = { name: 'TestPlayer', level: 10 };
     56|       mockRedis.get.mockResolvedValue(JSON.stringify(testData));
       |                 ^
     57|       
     58|       const result = await cacheService.get('player:123');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > get > should return null for non-existent key
TypeError: Cannot read properties of null (reading 'get')
 ❯ src/__tests__/unit/services/CacheService.test.ts:65:17
     63| 
     64|     test('should return null for non-existent key', async () => {
     65|       mockRedis.get.mockResolvedValue(null);
       |                 ^
     66|       
     67|       const result = await cacheService.get('non:existent');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > get > should return null and log error on Redis failure
TypeError: Cannot read properties of null (reading 'get')
 ❯ src/__tests__/unit/services/CacheService.test.ts:74:17
     72|     test('should return null and log error on Redis failure', async ()…
     73|       const consoleSpy = vi.spyOn(console, 'error').mockImplementation…
     74|       mockRedis.get.mockRejectedValue(new Error('Redis connection fail…
       |                 ^
     75|       
     76|       const result = await cacheService.get('any:key');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > set > should set value without TTL
TypeError: Cannot read properties of null (reading 'set')
 ❯ src/__tests__/unit/services/CacheService.test.ts:88:17
     86|     test('should set value without TTL', async () => {
     87|       const testData = { name: 'TestPlayer', level: 10 };
     88|       mockRedis.set.mockResolvedValue('OK');
       |                 ^
     89|       
     90|       await cacheService.set('player:456', testData);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > set > should set value with TTL
TypeError: Cannot read properties of null (reading 'setex')
 ❯ src/__tests__/unit/services/CacheService.test.ts:97:17
     95|     test('should set value with TTL', async () => {
     96|       const testData = { name: 'TestPlayer', level: 10 };
     97|       mockRedis.setex.mockResolvedValue('OK');
       |                 ^
     98|       
     99|       await cacheService.set('player:789', testData, 60);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > set > should throw error on Redis failure
TypeError: Cannot read properties of null (reading 'set')
 ❯ src/__tests__/unit/services/CacheService.test.ts:106:17
    104|     test('should throw error on Redis failure', async () => {
    105|       const consoleSpy = vi.spyOn(console, 'error').mockImplementation…
    106|       mockRedis.set.mockRejectedValue(new Error('Redis write failed'));
       |                 ^
    107|       
    108|       await expect(cacheService.set('any:key', 'value')).rejects.toThr…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > delete > should delete key
TypeError: Cannot read properties of null (reading 'del')
 ❯ src/__tests__/unit/services/CacheService.test.ts:116:17
    114|   describe('delete', () => {
    115|     test('should delete key', async () => {
    116|       mockRedis.del.mockResolvedValue(1);
       |                 ^
    117|       
    118|       await cacheService.delete('player:123');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > delete > should handle deletion errors gracefully
TypeError: Cannot read properties of null (reading 'del')
 ❯ src/__tests__/unit/services/CacheService.test.ts:125:17
    123|     test('should handle deletion errors gracefully', async () => {
    124|       const consoleSpy = vi.spyOn(console, 'error').mockImplementation…
    125|       mockRedis.del.mockRejectedValue(new Error('Redis delete failed')…
       |                 ^
    126|       
    127|       await expect(cacheService.delete('any:key')).resolves.not.toThro…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > ttl > should return TTL for existing key
TypeError: Cannot read properties of null (reading 'ttl')
 ❯ src/__tests__/unit/services/CacheService.test.ts:136:17
    134|   describe('ttl', () => {
    135|     test('should return TTL for existing key', async () => {
    136|       mockRedis.ttl.mockResolvedValue(60);
       |                 ^
    137|       
    138|       const result = await cacheService.ttl('player:123');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[47/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > ttl > should return -1 on error
TypeError: Cannot read properties of null (reading 'ttl')
 ❯ src/__tests__/unit/services/CacheService.test.ts:146:17
    144|     test('should return -1 on error', async () => {
    145|       const consoleSpy = vi.spyOn(console, 'error').mockImplementation…
    146|       mockRedis.ttl.mockRejectedValue(new Error('Redis TTL failed'));
       |                 ^
    147|       
    148|       const result = await cacheService.ttl('any:key');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[48/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > exists > should return true for existing key
TypeError: Cannot read properties of null (reading 'exists')
 ❯ src/__tests__/unit/services/CacheService.test.ts:159:17
    157|   describe('exists', () => {
    158|     test('should return true for existing key', async () => {
    159|       mockRedis.exists.mockResolvedValue(1);
       |                 ^
    160|       
    161|       const result = await cacheService.exists('player:123');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[49/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > exists > should return false for non-existing key
TypeError: Cannot read properties of null (reading 'exists')
 ❯ src/__tests__/unit/services/CacheService.test.ts:168:17
    166| 
    167|     test('should return false for non-existing key', async () => {
    168|       mockRedis.exists.mockResolvedValue(0);
       |                 ^
    169|       
    170|       const result = await cacheService.exists('player:nonexistent');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[50/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > exists > should return false on error
TypeError: Cannot read properties of null (reading 'exists')
 ❯ src/__tests__/unit/services/CacheService.test.ts:177:17
    175|     test('should return false on error', async () => {
    176|       const consoleSpy = vi.spyOn(console, 'error').mockImplementation…
    177|       mockRedis.exists.mockRejectedValue(new Error('Redis exists faile…
       |                 ^
    178|       
    179|       const result = await cacheService.exists('any:key');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[51/94]⎯

 FAIL  src/__tests__/unit/services/CacheService.test.ts > CacheService > disconnect > should disconnect from Redis
TypeError: Cannot read properties of null (reading 'quit')
 ❯ src/__tests__/unit/services/CacheService.test.ts:190:17
    188|   describe('disconnect', () => {
    189|     test('should disconnect from Redis', async () => {
    190|       mockRedis.quit.mockResolvedValue('OK');
       |                 ^
    191|       
    192|       await cacheService.disconnect();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[52/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharactersByAccount > should return characters from cache when available
AssertionError: expected '[{"id":"f9caaa25-9c70-4044-b75a-4690e…' to deeply equal [ { …(44) }, { …(44) } ]

[32m- Expected:[39m 
[
  {
    "accountId": "test-account-id",
    "appearance": {
      "build": 50,
      "eyeColor": "#0000FF",
      "faceType": "normal",
      "features": {},
      "hairColor": "#8B4513",
      "hairStyle": "1",
      "height": 50,
      "skinTone": "1",
    },
    "bankSlots": 20,
    "baseCharisma": 10,
    "baseConstitution": 10,
    "baseDexterity": 10,
    "baseIntelligence": 10,
    "baseStrength": 10,
    "baseWisdom": 10,
    "bonusCharisma": 0,
    "bonusConstitution": 0,
    "bonusDexterity": 0,
    "bonusIntelligence": 0,
    "bonusStrength": 0,
    "bonusWisdom": 0,
    "charismaTier": 0,
    "class": "warrior",
    "constitutionTier": 0,
    "createdAt": 2025-07-09T00:19:05.829Z,
    "currentHp": 100,
    "currentMp": 100,
    "currentStamina": 100,
    "currentZone": "starter_zone",
    "dexterityTier": 0,
    "experience": 0,
    "gender": "male",
    "gold": 100,
    "id": "f9caaa25-9c70-4044-b75a-4690ed8870ba",
    "intelligenceTier": 0,
    "isDeleted": false,
    "lastPlayedAt": null,
    "level": 1,
    "maxHp": 100,
    "maxMp": 100,
    "maxStamina": 100,
    "name": "TestCharacter1752020345828_0",
    "paragonDistribution": {},
    "paragonPoints": 0,
    "position": {
      "x": 0,
      "y": 0,
      "z": 0,
    },
    "prestigeLevel": 0,
    "race": "human",
    "strengthTier": 0,
    "updatedAt": 2025-07-09T00:19:05.829Z,
    "wisdomTier": 0,
  },
  {
    "accountId": "test-account-id",
    "appearance": {
      "build": 50,
      "eyeColor": "#0000FF",
      "faceType": "normal",
      "features": {},
      "hairColor": "#8B4513",
      "hairStyle": "1",
      "height": 50,
      "skinTone": "1",
    },
    "bankSlots": 20,
    "baseCharisma": 10,
    "baseConstitution": 10,
    "baseDexterity": 10,
    "baseIntelligence": 10,
    "baseStrength": 10,
    "baseWisdom": 10,
    "bonusCharisma": 0,
    "bonusConstitution": 0,
    "bonusDexterity": 0,
    "bonusIntelligence": 0,
    "bonusStrength": 0,
    "bonusWisdom": 0,
    "charismaTier": 0,
    "class": "warrior",
    "constitutionTier": 0,
    "createdAt": 2025-07-09T00:19:05.829Z,
    "currentHp": 100,
    "currentMp": 100,
    "currentStamina": 100,
    "currentZone": "starter_zone",
    "dexterityTier": 0,
    "experience": 0,
    "gender": "male",
    "gold": 100,
    "id": "9fa0e51b-0c5b-4739-b0c2-7171f2f3a5ab",
    "intelligenceTier": 0,
    "isDeleted": false,
    "lastPlayedAt": null,
    "level": 1,
    "maxHp": 100,
    "maxMp": 100,
    "maxStamina": 100,
    "name": "TestCharacter1752020345829_1",
    "paragonDistribution": {},
    "paragonPoints": 0,
    "position": {
      "x": 0,
      "y": 0,
      "z": 0,
    },
    "prestigeLevel": 0,
    "race": "human",
    "strengthTier": 0,
    "updatedAt": 2025-07-09T00:19:05.829Z,
    "wisdomTier": 0,
  },
]

[31m+ Received:[39m 
"[{\"id\":\"f9caaa25-9c70-4044-b75a-4690ed8870ba\",\"accountId\":\"test-account-id\",\"name\":\"TestCharacter1752020345828_0\",\"race\":\"human\",\"class\":\"warrior\",\"gender\":\"male\",\"level\":1,\"experience\":0,\"baseStrength\":10,\"baseDexterity\":10,\"baseIntelligence\":10,\"baseWisdom\":10,\"baseConstitution\":10,\"baseCharisma\":10,\"strengthTier\":0,\"dexterityTier\":0,\"intelligenceTier\":0,\"wisdomTier\":0,\"constitutionTier\":0,\"charismaTier\":0,\"bonusStrength\":0,\"bonusDexterity\":0,\"bonusIntelligence\":0,\"bonusWisdom\":0,\"bonusConstitution\":0,\"bonusCharisma\":0,\"prestigeLevel\":0,\"paragonPoints\":0,\"paragonDistribution\":{},\"currentHp\":100,\"maxHp\":100,\"currentMp\":100,\"maxMp\":100,\"currentStamina\":100,\"maxStamina\":100,\"gold\":100,\"bankSlots\":20,\"appearance\":{\"skinTone\":\"1\",\"hairStyle\":\"1\",\"hairColor\":\"#8B4513\",\"eyeColor\":\"#0000FF\",\"height\":50,\"build\":50,\"faceType\":\"normal\",\"features\":{}},\"currentZone\":\"starter_zone\",\"position\":{\"x\":0,\"y\":0,\"z\":0},\"isDeleted\":false,\"lastPlayedAt\":null,\"createdAt\":\"2025-07-09T00:19:05.829Z\",\"updatedAt\":\"2025-07-09T00:19:05.829Z\"},{\"id\":\"9fa0e51b-0c5b-4739-b0c2-7171f2f3a5ab\",\"accountId\":\"test-account-id\",\"name\":\"TestCharacter1752020345829_1\",\"race\":\"human\",\"class\":\"warrior\",\"gender\":\"male\",\"level\":1,\"experience\":0,\"baseStrength\":10,\"baseDexterity\":10,\"baseIntelligence\":10,\"baseWisdom\":10,\"baseConstitution\":10,\"baseCharisma\":10,\"strengthTier\":0,\"dexterityTier\":0,\"intelligenceTier\":0,\"wisdomTier\":0,\"constitutionTier\":0,\"charismaTier\":0,\"bonusStrength\":0,\"bonusDexterity\":0,\"bonusIntelligence\":0,\"bonusWisdom\":0,\"bonusConstitution\":0,\"bonusCharisma\":0,\"prestigeLevel\":0,\"paragonPoints\":0,\"paragonDistribution\":{},\"currentHp\":100,\"maxHp\":100,\"currentMp\":100,\"maxMp\":100,\"currentStamina\":100,\"maxStamina\":100,\"gold\":100,\"bankSlots\":20,\"appearance\":{\"skinTone\":\"1\",\"hairStyle\":\"1\",\"hairColor\":\"#8B4513\",\"eyeColor\":\"#0000FF\",\"height\":50,\"build\":50,\"faceType\":\"normal\",\"features\":{}},\"currentZone\":\"starter_zone\",\"position\":{\"x\":0,\"y\":0,\"z\":0},\"isDeleted\":false,\"lastPlayedAt\":null,\"createdAt\":\"2025-07-09T00:19:05.829Z\",\"updatedAt\":\"2025-07-09T00:19:05.829Z\"}]"

 ❯ src/__tests__/unit/services/CharacterService.test.ts:79:22
     77|       const result = await characterService.getCharactersByAccount(acc…
     78|       
     79|       expect(result).toEqual(cachedCharacters);
       |                      ^
     80|       expect(mockCacheService.get).toHaveBeenCalledWith(`characters:ac…
     81|       expect(mockCharacterRepository.findByAccountId).not.toHaveBeenCa…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[53/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharactersByAccount > should fetch from repository when not cached
AssertionError: expected "spy" to be called with arguments: [ …(3) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/services/CharacterService.test.ts:93:43
     91|       expect(result).toEqual(characters);
     92|       expect(mockCharacterRepository.findByAccountId).toHaveBeenCalled…
     93|       expect(mockCacheService.setWithTTL).toHaveBeenCalledWith(
       |                                           ^
     94|         `characters:account:${accountId}`,
     95|         JSON.stringify(characters),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[54/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharactersByAccount > should return empty array when user has no characters
AssertionError: expected "spy" to be called at least once
 ❯ src/__tests__/unit/services/CharacterService.test.ts:107:43
    105|       
    106|       expect(result).toEqual([]);
    107|       expect(mockCacheService.setWithTTL).toHaveBeenCalled();
       |                                           ^
    108|     });
    109|     

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[55/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharactersByAccount > should handle cache errors gracefully
Error: Cache error
 ❯ src/__tests__/unit/services/CharacterService.test.ts:112:50
    110|     it('should handle cache errors gracefully', async () => {
    111|       const characters = characterFactory.buildMany(2, { accountId });
    112|       mockCacheService.get.mockRejectedValueOnce(new Error('Cache erro…
       |                                                  ^
    113|       mockCharacterRepository.findByAccountId.mockResolvedValueOnce(ch…
    114|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[56/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharacterWithStats > should return character with calculated stats
AssertionError: expected { character: { …(44) }, …(1) } to deeply equal { character: { …(44) }, …(1) }

[32m- Expected[39m
[31m+ Received[39m

[33m@@ -56,11 +56,7 @@[39m
[2m      "race": "human",[22m
[2m      "strengthTier": 0,[22m
[2m      "updatedAt": 2025-07-09T00:19:05.869Z,[22m
[2m      "wisdomTier": 0,[22m
[2m    },[22m
[32m-   "stats": {[39m
[32m-     "totalAttackPower": 50,[39m
[32m-     "totalDefense": 30,[39m
[32m-     "totalStrength": 25,[39m
[32m-   },[39m
[31m+   "derivedStats": undefined,[39m
[2m  }[22m

 ❯ src/__tests__/unit/services/CharacterService.test.ts:138:22
    136|       const result = await characterService.getCharacterWithStats(char…
    137|       
    138|       expect(result).toEqual({
       |                      ^
    139|         character,
    140|         stats: calculatedStats

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[57/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > getCharacterWithStats > should cache character data
AssertionError: expected "spy" to be called with arguments: [ 'character:test-character-id', …(2) ][90m

Number of calls: [1m0[22m
[39m
 ❯ src/__tests__/unit/services/CharacterService.test.ts:163:43
    161|       await characterService.getCharacterWithStats(characterId);
    162|       
    163|       expect(mockCacheService.setWithTTL).toHaveBeenCalledWith(
       |                                           ^
    164|         `character:${characterId}`,
    165|         JSON.stringify(character),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[58/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > createCharacter > should create character successfully
TypeError: this.characterRepo.isNameTaken is not a function
 ❯ CharacterService.createCharacter src/services/CharacterService.ts:21:50
     19|   async createCharacter(accountId: string, data: CreateCharacterDTO): …
     20|     // Validate character name availability
     21|     const isNameTaken = await this.characterRepo.isNameTaken(data.name…
       |                                                  ^
     22|     if (isNameTaken) {
     23|       throw new Error(`Character name "${data.name}" is already taken`…
 ❯ src/__tests__/unit/services/CharacterService.test.ts:196:45

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[59/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > createCharacter > should throw error when character limit reached
AssertionError: expected 'this.characterRepo.isNameTaken is not…' to contain 'Maximum character limit reached'

Expected: [32m"[7mMaximum [27mcharacter[7m limit reached[27m"[39m
Received: [31m"[7mthis.[27mcharacter[7mRepo.isNameTaken is not a function[27m"[39m

 ❯ Module.expectAsyncThrows src/__tests__/helpers/assertions.ts:123:30
    121|   if (errorMessage) {
    122|     if (typeof errorMessage === 'string') {
    123|       expect(error!.message).toContain(errorMessage);
       |                              ^
    124|     } else {
    125|       expect(error!.message).toMatch(errorMessage);
 ❯ src/__tests__/unit/services/CharacterService.test.ts:219:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[60/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > createCharacter > should throw error when name already exists
AssertionError: expected 'this.characterRepo.isNameTaken is not…' to contain 'Character name already exists'

Expected: [32m"[7mC[27mharacter[7m name already exists[27m"[39m
Received: [31m"[7mthis.c[27mharacter[7mRepo.isNameTaken is not a function[27m"[39m

 ❯ Module.expectAsyncThrows src/__tests__/helpers/assertions.ts:123:30
    121|   if (errorMessage) {
    122|     if (typeof errorMessage === 'string') {
    123|       expect(error!.message).toContain(errorMessage);
       |                              ^
    124|     } else {
    125|       expect(error!.message).toMatch(errorMessage);
 ❯ src/__tests__/unit/services/CharacterService.test.ts:231:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[61/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > createCharacter > should validate character name format
AssertionError: expected 'this.characterRepo.isNameTaken is not…' to match /Invalid character name/

[32m- Expected:[39m 
/Invalid character name/

[31m+ Received:[39m 
"this.characterRepo.isNameTaken is not a function"

 ❯ Module.expectAsyncThrows src/__tests__/helpers/assertions.ts:125:30
    123|       expect(error!.message).toContain(errorMessage);
    124|     } else {
    125|       expect(error!.message).toMatch(errorMessage);
       |                              ^
    126|     }
    127|   }
 ❯ src/__tests__/unit/services/CharacterService.test.ts:252:9

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[62/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > createCharacter > should set initial stats based on race and class
TypeError: this.characterRepo.isNameTaken is not a function
 ❯ CharacterService.createCharacter src/services/CharacterService.ts:21:50
     19|   async createCharacter(accountId: string, data: CreateCharacterDTO): …
     20|     // Validate character name availability
     21|     const isNameTaken = await this.characterRepo.isNameTaken(data.name…
       |                                                  ^
     22|     if (isNameTaken) {
     23|       throw new Error(`Character name "${data.name}" is already taken`…
 ❯ src/__tests__/unit/services/CharacterService.test.ts:266:30

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[63/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > deleteCharacter > should delete character successfully
TypeError: this.characterRepo.softDelete is not a function
 ❯ CharacterService.deleteCharacter src/services/CharacterService.ts:116:46
    114|     }
    115| 
    116|     const success = await this.characterRepo.softDelete(id);
       |                                              ^
    117|     
    118|     if (success) {
 ❯ src/__tests__/unit/services/CharacterService.test.ts:287:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[64/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > updateCharacterPosition > should update position successfully
TypeError: characterService.updateCharacterPosition is not a function
 ❯ src/__tests__/unit/services/CharacterService.test.ts:339:45
    337|       mockCharacterRepository.update.mockResolvedValueOnce(updatedChar…
    338|       
    339|       const result = await characterService.updateCharacterPosition(
       |                                             ^
    340|         characterId,
    341|         accountId,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[65/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > updateCharacterPosition > should handle character not found
TypeError: characterService.updateCharacterPosition is not a function
 ❯ src/__tests__/unit/services/CharacterService.test.ts:360:45
    358|       mockCharacterRepository.findById.mockResolvedValueOnce(null);
    359|       
    360|       const result = await characterService.updateCharacterPosition(
       |                                             ^
    361|         characterId,
    362|         accountId,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[66/94]⎯

 FAIL  src/__tests__/unit/services/CharacterService.test.ts > CharacterService > updateCharacterPosition > should handle unauthorized access
TypeError: characterService.updateCharacterPosition is not a function
 ❯ src/__tests__/unit/services/CharacterService.test.ts:380:45
    378|       mockCharacterRepository.findById.mockResolvedValueOnce(character…
    379|       
    380|       const result = await characterService.updateCharacterPosition(
       |                                             ^
    381|         characterId,
    382|         accountId,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[67/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > getAllQuests > should include proper quest structure
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ src/__tests__/unit/services/TutorialService.test.ts:91:38
     89|       
     90|       expect(firstQuest.name).toBe('First Steps');
     91|       expect(firstQuest.isMainQuest).toBe(true);
       |                                      ^
     92|       expect(firstQuest.difficulty).toBe(TutorialQuestDifficulty.BEGIN…
     93|       expect(firstQuest.steps).toHaveLength(3);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[68/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > updateProgress > should update tutorial progress successfully
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ MockTutorialService.updateProgress src/services/mock/MockTutorialService.ts:104:22
 ❯ src/__tests__/unit/services/TutorialService.test.ts:119:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[69/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > updateProgress > should complete quest when reaching final step
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ MockTutorialService.updateProgress src/services/mock/MockTutorialService.ts:104:22
 ❯ src/__tests__/unit/services/TutorialService.test.ts:136:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[70/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > updateProgress > should complete entire tutorial after all quests
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ MockTutorialService.updateProgress src/services/mock/MockTutorialService.ts:104:22
 ❯ src/__tests__/unit/services/TutorialService.test.ts:151:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[71/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > getGuidance > should return guidance for character in progress
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ src/__tests__/unit/services/TutorialService.test.ts:200:24

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[72/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > getGuidance > should return completion guidance for finished tutorial
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ src/__tests__/unit/services/TutorialService.test.ts:221:24

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[73/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > getGuidance > should return default guidance for new character
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ src/__tests__/unit/services/TutorialService.test.ts:230:24

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[74/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > Error Handling > should handle missing character ID gracefully
TypeError: Cannot read properties of undefined (reading 'MEDIUM')
 ❯ MockTutorialService.getGuidance src/services/mock/MockTutorialService.ts:152:32
    150|       hints: currentStep.hints,
    151|       npcToTalk: currentStep.targetNPC,
    152|       urgency: TutorialUrgency.MEDIUM
       |                                ^
    153|     };
    154|   }
 ❯ src/__tests__/unit/services/TutorialService.test.ts:306:24

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[75/94]⎯

 FAIL  src/__tests__/unit/services/TutorialService.test.ts > MockTutorialService > Mock Data Validation > should have valid reward types
TypeError: actual value must be number or bigint, received "undefined"
 ❯ src/__tests__/unit/services/TutorialService.test.ts:351:35
    349|         quest.rewards.forEach(reward => {
    350|           expect(Object.values(TutorialRewardType)).toContain(reward.t…
    351|           expect(reward.quantity).toBeGreaterThan(0);
       |                                   ^
    352|           expect(reward.description).toBeDefined();
    353|         });
 ❯ src/__tests__/unit/services/TutorialService.test.ts:349:23
 ❯ src/__tests__/unit/services/TutorialService.test.ts:348:14

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[76/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > Service Registration Errors > should handle null service registration
Error: Service NullService not registered. Available services: MonsterService, NPCService, DeathService, LootService, CombatService, BankService, CurrencyService, DialogueService, SpawnService, ZoneService, MovementService, ProgressionService, TutorialService, AffinityService, NullService
 ❯ Function.get src/providers/ServiceProvider.ts:34:13
     32|       const availableServices = Array.from(globalServices.keys()).join…
     33|       logger.error(`Service ${name} not registered. Available services…
     34|       throw new Error(`Service ${name} not registered. Available servi…
       |             ^
     35|     }
     36|     return service as T;
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:38:32

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[77/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > Monster Service Error Scenarios > should handle killing non-existent monster
AssertionError: promise rejected "Error: Monster non-existent-id not found" instead of resolving
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:80:7
     78|       await expect(
     79|         monsterService.killMonster('non-existent-id')
     80|       ).resolves.not.toThrow();
       |       ^
     81|     });
     82| 

Caused by: Error: Monster non-existent-id not found
 ❯ MockMonsterService.killMonster src/providers/mock/MockMonsterService.ts:340:13
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:79:24

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[78/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > NPC Service Error Scenarios > should handle advancing non-existent dialogue
AssertionError: expected [Function] to throw error including 'Interaction non-existent-interaction …' but got 'NPC non-existent-interaction not found'

Expected: [32m"[7mInteraction[27m non-existent-interaction not found"[39m
Received: [31m"[7mNPC[27m non-existent-interaction not found"[39m

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[79/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > Bank Service Error Scenarios > should handle depositing to full bank
AssertionError: expected 'Item not found' to contain 'Bank is full'

Expected: [32m"Bank is full"[39m
Received: [31m"Item not found"[39m

 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:188:30
    186|       
    187|       expect(result.success).toBe(false);
    188|       expect(result.message).toContain('Bank is full');
       |                              ^
    189|     });
    190| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[80/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > Combat Service Error Scenarios > should handle actions on non-existent session
AssertionError: promise resolved "{ success: true, …(3) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "combatEnded": false,[39m
[31m+   "message": "No active combat session",[39m
[31m+   "success": true,[39m
[31m+   "winner": undefined,[39m
[2m  }[22m

 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:233:7
    231|           targetId: 'target'
    232|         })
    233|       ).rejects.toThrow();
       |       ^
    234|     });
    235| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[81/94]⎯

 FAIL  src/providers/__tests__/integration/ErrorScenarios.test.ts > Service Provider Error Scenarios > Service Lifecycle Errors > should maintain service state after errors
AssertionError: expected 0 to be greater than 0
 ❯ src/providers/__tests__/integration/ErrorScenarios.test.ts:308:31
    306|       // Service should still be functional
    307|       const monsters = await monsterService.getMonstersInZone('starter…
    308|       expect(monsters.length).toBeGreaterThan(0);
       |                               ^
    309|     });
    310|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[82/94]⎯

 FAIL  src/providers/__tests__/integration/ServiceProvider.integration.test.ts > ServiceProvider Integration Tests > Mock Services > should return mock data from services
AssertionError: expected 0 to be greater than 0
 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts:56:31
     54|       const monsterService = provider.get<IMonsterService>('MonsterSer…
     55|       const monsters = await monsterService.getMonstersInZone('starter…
     56|       expect(monsters.length).toBeGreaterThan(0);
       |                               ^
     57|       expect(monsters[0].id).toContain('mock-');
     58|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[83/94]⎯

 FAIL  src/providers/__tests__/integration/ServiceProvider.integration.test.ts > ServiceProvider Integration Tests > Real Services > should use real service implementations
AssertionError: expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality

Expected: [32m"[7mReal[27mMonsterService"[39m
Received: [31m"[7mMock[27mMonsterService"[39m

 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts:124:47
    122|       
    123|       // Verify they are real service wrappers
    124|       expect(monsterService.constructor.name).toBe('RealMonsterService…
       |                                               ^
    125|       expect(npcService.constructor.name).toBe('RealNPCService');
    126|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[84/94]⎯

 FAIL  src/providers/__tests__/integration/ServiceProvider.integration.test.ts > ServiceProvider Integration Tests > Service Switching > should switch between mock and real based on environment
AssertionError: expected 'MockMonsterService' to be 'RealMonsterService' // Object.is equality

Expected: [32m"[7mReal[27mMonsterService"[39m
Received: [31m"[7mMock[27mMonsterService"[39m

 ❯ src/providers/__tests__/integration/ServiceProvider.integration.test.ts:146:47
    144|       provider = ServiceProvider.getInstance();
    145|       monsterService = provider.get('MonsterService');
    146|       expect(monsterService.constructor.name).toBe('RealMonsterService…
       |                                               ^
    147|     });
    148|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[85/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > getMonstersInZone > should return monsters for a valid zone
AssertionError: expected 0 to be greater than 0
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:17:31
     15|       expect(monsters).toBeDefined();
     16|       expect(Array.isArray(monsters)).toBe(true);
     17|       expect(monsters.length).toBeGreaterThan(0);
       |                               ^
     18|       
     19|       // Verify monster structure

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[86/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > getMonstersInZone > should return different monsters for different zones
TypeError: Cannot read properties of undefined (reading 'id')
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:32:33
     30|       const forestMonsters = await service.getMonstersInZone('forest-z…
     31|       
     32|       expect(starterMonsters[0].id).not.toBe(forestMonsters[0].id);
       |                                 ^
     33|       expect(starterMonsters[0].name).not.toBe(forestMonsters[0].name);
     34|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[87/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > spawnMonster > should add spawned monster to the zone
AssertionError: expected +0 to be 1 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 1[39m
[31m+ 0[39m

 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:59:38
     57|       
     58|       const updatedMonsters = await service.getMonstersInZone('starter…
     59|       expect(updatedMonsters.length).toBe(initialCount + 1);
       |                                      ^
     60|     });
     61|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[88/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > updateMonsterState > should update monster state
TypeError: Cannot read properties of undefined (reading 'id')
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:66:37
     64|     it('should update monster state', async () => {
     65|       const monsters = await service.getMonstersInZone('starter-zone');
     66|       const monsterId = monsters[0].id;
       |                                     ^
     67|       
     68|       const updatedMonster = await service.updateMonsterState(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[89/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > killMonster > should remove monster from the zone
TypeError: Cannot read properties of undefined (reading 'id')
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:86:37
     84|     it('should remove monster from the zone', async () => {
     85|       const monsters = await service.getMonstersInZone('starter-zone');
     86|       const monsterId = monsters[0].id;
       |                                     ^
     87|       const initialCount = monsters.length;
     88|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[90/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > killMonster > should not throw error for non-existent monster
AssertionError: promise rejected "Error: Monster non-existent not found" instead of resolving
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:99:7
     97|       await expect(
     98|         service.killMonster('non-existent')
     99|       ).resolves.not.toThrow();
       |       ^
    100|     });
    101|   });

Caused by: Error: Monster non-existent not found
 ❯ MockMonsterService.killMonster src/providers/mock/MockMonsterService.ts:340:13
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:98:17

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[91/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > getMonsterTypes > should return list of monster types
AssertionError: expected { id: 'goblin', name: 'goblin', …(8) } to have property "baseStats"
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:115:20
    113|       expect(type).toHaveProperty('name');
    114|       expect(type).toHaveProperty('level');
    115|       expect(type).toHaveProperty('baseStats');
       |                    ^
    116|     });
    117|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[92/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > getSpawnPoints > should return spawn points for a zone
TypeError: service.getSpawnPoints is not a function
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:121:41
    119|   describe('getSpawnPoints', () => {
    120|     it('should return spawn points for a zone', async () => {
    121|       const spawnPoints = await service.getSpawnPoints('starter-zone');
       |                                         ^
    122|       
    123|       expect(spawnPoints).toBeDefined();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[93/94]⎯

 FAIL  src/providers/__tests__/mock/MockMonsterService.test.ts > MockMonsterService > getSpawnPoints > should return empty array for unknown zone
TypeError: service.getSpawnPoints is not a function
 ❯ src/providers/__tests__/mock/MockMonsterService.test.ts:135:41
    133| 
    134|     it('should return empty array for unknown zone', async () => {
    135|       const spawnPoints = await service.getSpawnPoints('unknown-zone');
       |                                         ^
    136|       expect(spawnPoints).toEqual([]);
    137|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[94/94]⎯

⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯

Vitest caught 1 unhandled error during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.

⎯⎯⎯⎯⎯⎯ Unhandled Error ⎯⎯⎯⎯⎯⎯⎯
Error: Worker terminated due to reaching memory limit: JS heap out of memory
 ❯ [kOnExit] node:internal/worker:313:26
 ❯ Worker.<computed>.onexit node:internal/worker:229:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 'ERR_WORKER_OUT_OF_MEMORY' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯


 Test Files  13 failed | 12 passed (26)
      Tests  94 failed | 257 passed (366)
     Errors  1 error
   Start at  00:19:03
   Duration  46.46s (transform 2.37s, setup 627ms, collect 16.60s, tests 25.96s, environment 14ms, prepare 6.26s)

npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /home/runner/workspace/packages/server
npm error workspace @aeturnis/server@1.0.0
npm error location /home/runner/workspace/packages/server
npm error command failed
npm error command sh -c vitest run
