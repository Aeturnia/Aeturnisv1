# Replit Agent: Express API Infrastructure

## 🎯 Objective
Build a production-ready Express.js server infrastructure for Aeturnis Online with comprehensive security, modular middleware architecture, and enterprise-grade error handling.

## 📋 Requirements

### Branch Setup
```bash
git checkout -b express-api-infra
```

### Core Features
1. **Express Server**: Modular app structure with separation of concerns
2. **Security Middleware**: Helmet, CORS, rate limiting, request sanitization
3. **Performance**: Compression, response time tracking, request logging
4. **Error Handling**: Global error handler with structured responses
5. **API Versioning**: `/api/v1` routing structure
6. **Health Monitoring**: Health check endpoint with dependency status

## 🛠️ Implementation

### 1. Install Dependencies
```bash
yarn add express compression cors helmet morgan express-rate-limit
yarn add express-validator express-async-errors winston express-winston
yarn add -D @types/express @types/compression @types/cors @types/morgan
```

### 2. Application Entry Point: `packages/server/src/index.ts`
```typescript
import dotenv from 'dotenv';
import { createServer } from 'http';
import { AddressInfo } from 'net';
import app from './app';
import { logger } from './utils/logger';
import { checkDatabaseConnection, closeDatabaseConnection } from './database/config';
import { redis } from './cache/redis';

// Load environment variables
dotenv.config();

// Validate required environment variables
const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'JWT_REFRESH_SECRET'];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    logger.error(`Missing required environment variable: ${envVar}`);
    process.exit(1);
  }
}

// Create HTTP server
const server = createServer(app);
const PORT = process.env.PORT || 3000;

// Server startup
async function startServer() {
  try {
    // Check database connection
    const dbConnected = await checkDatabaseConnection();
    if (!dbConnected) {
      throw new Error('Database connection failed');
    }

    // Check Redis connection
    await redis.ping();
    logger.info('Redis connection established');

    // Start listening
    server.listen(PORT, () => {
      const { port } = server.address() as AddressInfo;
      logger.info(`🚀 Server running on port ${port}`);
      logger.info(`Environment: ${process.env.NODE_ENV || 'development'}`);
      logger.info(`API Documentation: http://localhost:${port}/api-docs`);
    });
  } catch (error) {
    logger.error('Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

async function gracefulShutdown(signal: string) {
  logger.info(`${signal} received: closing HTTP server`);
  
  server.close(async () => {
    logger.info('HTTP server closed');
    
    try {
      // Close database connections
      await closeDatabaseConnection();
      logger.info('Database connections closed');
      
      // Close Redis connection
      await redis.quit();
      logger.info('Redis connection closed');
      
      process.exit(0);
    } catch (error) {
      logger.error('Error during shutdown:', error);
      process.exit(1);
    }
  });

  // Force close after 30 seconds
  setTimeout(() => {
    logger.error('Forced shutdown after timeout');
    process.exit(1);
  }, 30000);
}

// Handle uncaught errors
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Start the server
startServer();
```

### 3. Express Application: `packages/server/src/app.ts`
```typescript
import express, { Application } from 'express';
import compression from 'compression';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import 'express-async-errors';
import { requestLogger } from './middleware/requestLogger';
import { rateLimiter } from './middleware/rateLimiter';
import { errorHandler } from './middleware/errorHandler';
import { notFoundHandler } from './middleware/notFoundHandler';
import { performanceTracker } from './middleware/performanceTracker';
import v1Routes from './routes/v1';
import { logger } from './utils/logger';

// Create Express app
const app: Application = express();

// Trust proxy (for proper IP addresses behind reverse proxy)
app.set('trust proxy', 1);

// Disable x-powered-by header
app.disable('x-powered-by');

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", 'data:', 'https:'],
      connectSrc: ["'self'"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
  hsts: {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true,
  },
}));

// CORS configuration
const corsOptions: cors.CorsOptions = {
  origin: (origin, callback) => {
    const allowedOrigins = [
      process.env.CLIENT_URL || 'http://localhost:5173',
      'http://localhost:3000',
    ];
    
    // Allow requests with no origin (like mobile apps or curl)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  optionsSuccessStatus: 200,
};

app.use(cors(corsOptions));

// Compression middleware
app.use(compression({
  filter: (req, res) => {
    if (req.headers['x-no-compression']) {
      return false;
    }
    return compression.filter(req, res);
  },
  level: 6,
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging middleware
if (process.env.NODE_ENV !== 'test') {
  app.use(morgan('combined', {
    stream: { write: (message) => logger.info(message.trim()) },
  }));
}

// Custom middleware
app.use(requestLogger);
app.use(performanceTracker);

// Global rate limiting
app.use(rateLimiter({
  windowMs: 60 * 1000, // 1 minute
  max: 100, // 100 requests per minute
  message: 'Too many requests from this IP, please try again later',
}));

// Health check endpoint (no rate limiting)
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
  });
});

// API routes
app.use('/api/v1', v1Routes);

// 404 handler
app.use(notFoundHandler);

// Global error handler (must be last)
app.use(errorHandler);

export default app;
```

### 4. Logger Utility: `packages/server/src/utils/logger.ts`
```typescript
import winston from 'winston';
import path from 'path';

const logDir = process.env.LOG_DIR || 'logs';

// Define log format
const logFormat = winston.format.combine(
  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
  winston.format.errors({ stack: true }),
  winston.format.splat(),
  winston.format.json()
);

// Create logger
export const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: logFormat,
  defaultMeta: { service: 'aeturnis-api' },
  transports: [
    // Console transport
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.printf(({ timestamp, level, message, ...meta }) => {
          const metaStr = Object.keys(meta).length ? JSON.stringify(meta) : '';
          return `${timestamp} [${level}]: ${message} ${metaStr}`;
        })
      ),
    }),
    // File transport for errors
    new winston.transports.File({
      filename: path.join(logDir, 'error.log'),
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
    // File transport for all logs
    new winston.transports.File({
      filename: path.join(logDir, 'combined.log'),
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
  ],
});

// Create stream for Morgan
export const morganStream = {
  write: (message: string) => logger.info(message.trim()),
};
```

### 5. Request Logger Middleware: `packages/server/src/middleware/requestLogger.ts`
```typescript
import { Request, Response, NextFunction } from 'express';
import { v4 as uuidv4 } from 'uuid';
import { logger } from '../utils/logger';

export interface RequestWithId extends Request {
  id?: string;
  startTime?: number;
}

export const requestLogger = (req: RequestWithId, res: Response, next: NextFunction) => {
  // Assign unique request ID
  req.id = req.headers['x-request-id'] as string || uuidv4();
  req.startTime = Date.now();

  // Add request ID to response headers
  res.setHeader('X-Request-ID', req.id);

  // Log request
  logger.info('Incoming request', {
    requestId: req.id,
    method: req.method,
    url: req.url,
    ip: req.ip,
    userAgent: req.headers['user-agent'],
  });

  // Log response
  const originalSend = res.send;
  res.send = function (data) {
    const duration = req.startTime ? Date.now() - req.startTime : 0;
    
    logger.info('Request completed', {
      requestId: req.id,
      method: req.method,
      url: req.url,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
    });

    return originalSend.call(this, data);
  };

  next();
};
```

### 6. Performance Tracker: `packages/server/src/middleware/performanceTracker.ts`
```typescript
import { Request, Response, NextFunction } from 'express';
import { performance } from 'perf_hooks';

export const performanceTracker = (req: Request, res: Response, next: NextFunction) => {
  const startTime = performance.now();

  // Track response time
  res.on('finish', () => {
    const duration = performance.now() - startTime;
    res.setHeader('X-Response-Time', `${duration.toFixed(2)}ms`);

    // Log slow requests (> 1000ms)
    if (duration > 1000) {
      console.warn(`Slow request detected: ${req.method} ${req.url} took ${duration.toFixed(2)}ms`);
    }
  });

  next();
};
```

### 7. Error Handler: `packages/server/src/middleware/errorHandler.ts`
```typescript
import { Request, Response, NextFunction } from 'express';
import { logger } from '../utils/logger';
import { ValidationError } from 'express-validator';

interface ErrorResponse {
  success: false;
  error: {
    code: string;
    message: string;
    details?: any;
  };
  requestId?: string;
}

export class AppError extends Error {
  statusCode: number;
  code: string;
  isOperational: boolean;

  constructor(message: string, statusCode: number, code: string, isOperational = true) {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = isOperational;
    Error.captureStackTrace(this, this.constructor);
  }
}

export const errorHandler = (
  err: Error | AppError,
  req: Request & { id?: string },
  res: Response,
  next: NextFunction
) => {
  // Default error values
  let statusCode = 500;
  let code = 'INTERNAL_ERROR';
  let message = 'An unexpected error occurred';
  let details: any = undefined;

  // Handle known error types
  if (err instanceof AppError) {
    statusCode = err.statusCode;
    code = err.code;
    message = err.message;
  } else if (err.name === 'ValidationError') {
    statusCode = 400;
    code = 'VALIDATION_ERROR';
    message = 'Validation failed';
    details = err;
  } else if (err.name === 'UnauthorizedError') {
    statusCode = 401;
    code = 'UNAUTHORIZED';
    message = err.message || 'Unauthorized';
  } else if (err.name === 'CastError') {
    statusCode = 400;
    code = 'INVALID_ID';
    message = 'Invalid ID format';
  }

  // Log error
  logger.error('Error occurred:', {
    requestId: req.id,
    error: {
      message: err.message,
      stack: err.stack,
      statusCode,
      code,
    },
    request: {
      method: req.method,
      url: req.url,
      ip: req.ip,
    },
  });

  // Prepare error response
  const errorResponse: ErrorResponse = {
    success: false,
    error: {
      code,
      message,
    },
    requestId: req.id,
  };

  // Include details in development
  if (process.env.NODE_ENV === 'development') {
    errorResponse.error.details = details || err.stack;
  }

  res.status(statusCode).json(errorResponse);
};
```

### 8. Not Found Handler: `packages/server/src/middleware/notFoundHandler.ts`
```typescript
import { Request, Response } from 'express';

export const notFoundHandler = (req: Request & { id?: string }, res: Response) => {
  res.status(404).json({
    success: false,
    error: {
      code: 'NOT_FOUND',
      message: `Route ${req.method} ${req.url} not found`,
    },
    requestId: req.id,
  });
};
```

### 9. Rate Limiter Enhancement: `packages/server/src/middleware/rateLimiter.ts`
```typescript
import rateLimit, { Options } from 'express-rate-limit';
import RedisStore from 'rate-limit-redis';
import { redis } from '../cache/redis';

export const rateLimiter = (options: Partial<Options> = {}) => {
  const defaultOptions: Partial<Options> = {
    windowMs: 60 * 1000, // 1 minute
    max: 100, // 100 requests per window
    standardHeaders: true,
    legacyHeaders: false,
    handler: (req, res) => {
      res.status(429).json({
        success: false,
        error: {
          code: 'RATE_LIMIT_EXCEEDED',
          message: options.message || 'Too many requests, please try again later',
        },
      });
    },
  };

  // Use Redis store if available
  if (redis) {
    return rateLimit({
      store: new RedisStore({
        client: redis,
        prefix: 'rl:',
      }),
      ...defaultOptions,
      ...options,
    });
  }

  // Fallback to memory store
  return rateLimit({
    ...defaultOptions,
    ...options,
  });
};

// Specific rate limiters
export const authRateLimiter = rateLimiter({
  windowMs: 60 * 1000, // 1 minute
  max: 5, // 5 requests per minute
  skipSuccessfulRequests: true,
});

export const apiRateLimiter = rateLimiter({
  windowMs: 60 * 1000, // 1 minute
  max: 100, // 100 requests per minute
});
```

### 10. API v1 Routes: `packages/server/src/routes/v1/index.ts`
```typescript
import { Router } from 'express';
import authRoutes from '../auth.routes';
import { authenticate } from '../../middleware/auth';

const router = Router();

// Public routes
router.use('/auth', authRoutes);

// Protected routes (placeholder)
router.get('/protected', authenticate, (req, res) => {
  res.json({
    success: true,
    message: 'This is a protected route',
    user: (req as any).user,
  });
});

// API info
router.get('/', (req, res) => {
  res.json({
    success: true,
    version: 'v1',
    endpoints: {
      auth: '/api/v1/auth',
      protected: '/api/v1/protected',
    },
  });
});

export default router;
```

### 11. Enhanced Error Classes: `packages/server/src/utils/errors.ts`
```typescript
import { AppError } from '../middleware/errorHandler';

export class ValidationError extends AppError {
  constructor(message: string, details?: any) {
    super(message, 400, 'VALIDATION_ERROR');
    if (details) {
      this.details = details;
    }
  }
  details?: any;
}

export class UnauthorizedError extends AppError {
  constructor(message = 'Unauthorized') {
    super(message, 401, 'UNAUTHORIZED');
  }
}

export class ForbiddenError extends AppError {
  constructor(message = 'Forbidden') {
    super(message, 403, 'FORBIDDEN');
  }
}

export class NotFoundError extends AppError {
  constructor(message = 'Resource not found') {
    super(message, 404, 'NOT_FOUND');
  }
}

export class ConflictError extends AppError {
  constructor(message = 'Resource conflict') {
    super(message, 409, 'CONFLICT');
  }
}

export class TooManyRequestsError extends AppError {
  constructor(message = 'Too many requests') {
    super(message, 429, 'TOO_MANY_REQUESTS');
  }
}

export class InternalServerError extends AppError {
  constructor(message = 'Internal server error') {
    super(message, 500, 'INTERNAL_ERROR', false);
  }
}
```

### 12. Update Package.json Scripts
Add to `packages/server/package.json`:
```json
{
  "scripts": {
    "dev": "nodemon --exec ts-node src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "start:prod": "NODE_ENV=production node dist/index.js"
  }
}
```

### 13. Integration Test: `packages/server/src/app.test.ts`
```typescript
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import request from 'supertest';
import app from './app';

describe('Express App', () => {
  describe('GET /health', () => {
    it('should return health status', async () => {
      const response = await request(app)
        .get('/health')
        .expect(200);

      expect(response.body).toHaveProperty('status', 'ok');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('uptime');
    });
  });

  describe('Security Headers', () => {
    it('should set security headers', async () => {
      const response = await request(app)
        .get('/health');

      expect(response.headers['x-powered-by']).toBeUndefined();
      expect(response.headers['x-frame-options']).toBe('SAMEORIGIN');
      expect(response.headers['x-content-type-options']).toBe('nosniff');
      expect(response.headers['x-request-id']).toBeDefined();
    });
  });

  describe('404 Handler', () => {
    it('should return 404 for unknown routes', async () => {
      const response = await request(app)
        .get('/unknown-route')
        .expect(404);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toHaveProperty('code', 'NOT_FOUND');
    });
  });

  describe('Error Handler', () => {
    it('should handle errors gracefully', async () => {
      // Add a test route that throws
      app.get('/test-error', () => {
        throw new Error('Test error');
      });

      const response = await request(app)
        .get('/test-error')
        .expect(500);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toHaveProperty('code', 'INTERNAL_ERROR');
    });
  });

  describe('Rate Limiting', () => {
    it('should rate limit excessive requests', async () => {
      // Make multiple requests
      const requests = Array(101).fill(null).map(() => 
        request(app).get('/api/v1/')
      );

      const responses = await Promise.all(requests);
      const rateLimited = responses.some(r => r.status === 429);
      
      expect(rateLimited).toBe(true);
    });
  });

  describe('CORS', () => {
    it('should handle CORS preflight', async () => {
      const response = await request(app)
        .options('/api/v1/')
        .set('Origin', process.env.CLIENT_URL || 'http://localhost:5173')
        .set('Access-Control-Request-Method', 'GET')
        .expect(200);

      expect(response.headers['access-control-allow-origin']).toBeDefined();
      expect(response.headers['access-control-allow-credentials']).toBe('true');
    });
  });
});
```

## 🚀 Testing Instructions

### Start Development Server
```bash
yarn dev
```

### Test Endpoints
```bash
# Health check
curl http://localhost:3000/health

# API info
curl http://localhost:3000/api/v1/

# Test 404
curl http://localhost:3000/nonexistent

# Test rate limiting
for i in {1..110}; do curl http://localhost:3000/api/v1/; done
```

### Run Tests
```bash
yarn test src/app.test.ts
```

## ✅ Self-Audit Checklist

- [ ] Server starts without errors: `yarn dev`
- [ ] Health endpoint returns 200 OK with proper format
- [ ] Security headers present (Helmet, CORS, no X-Powered-By)
- [ ] Rate limiting blocks after threshold
- [ ] Error handler returns structured JSON
- [ ] 404 handler catches unknown routes
- [ ] Request IDs present in responses
- [ ] Logs show structured output with timestamps
- [ ] Performance tracking adds X-Response-Time header
- [ ] All tests pass: `yarn test`
- [ ] TypeScript compilation succeeds: `yarn build`
- [ ] No ESLint errors: `yarn lint`

## 📊 Expected Server Output
```
2024-01-15 10:30:00 [info]: Database connection established
2024-01-15 10:30:00 [info]: Redis connection established
2024-01-15 10:30:00 [info]: 🚀 Server running on port 3000
2024-01-15 10:30:00 [info]: Environment: development
2024-01-15 10:30:00 [info]: API Documentation: http://localhost:3000/api-docs
```

## 🔧 Troubleshooting

1. **Port already in use**: 
   - Change PORT in .env
   - Kill process: `lsof -ti:3000 | xargs kill`

2. **Redis connection fails**: 
   - Ensure Redis is running
   - Check REDIS_URL in .env

3. **CORS errors**: 
   - Verify CLIENT_URL in .env matches frontend
   - Check allowed origins in CORS config

---

**Branch**: `express-api-infra`  
**Next Step**: Real-time Layer (`realtime-layer-v1`)