I've implemented a complete Mock/Real Service Switching System for the Aeturnis
  Online frontend that allows seamless switching between mock data and real API
  calls.

  Key Components Added:

  1. Service Layer Architecture (/packages/client/src/services/)
    - ServiceLayerConfig updated with useMockServices flag and mock configuration
    - Factory pattern for conditional service instantiation
    - Mock services use same interfaces as real services
  2. Mock Service Infrastructure:
    - MockService base class with delay simulation, error rate, and offline mode
    - MockCombatService - Combat system with sessions and actions
    - MockCharacterService - Character data (Aria Starweaver, Lv 42)
    - MockInventoryService - Inventory with 5 default items
    - MockLocationService - 5 game locations with travel simulation
  3. React Hooks (/packages/client/src/hooks/useServices.ts):
    - useCharacter() - Character data and level up
    - useInventory() - Inventory management
    - useLocation() - Map and travel
    - useCombat() - Combat system
  4. Developer Tools (/packages/client/src/components/debug/):
    - SimpleDevToggle - Always visible ‚öôÔ∏è button in bottom-right
    - Toggle between Mock/Real services with one click
    - Debug panel with environment info
  5. Visual Indicators:
    - üé≠ Mock Mode badge in top-left when using mocks
    - Service mode display in dev panel

  How to Use:

  1. Enable Mock Mode:
    - Click ‚öôÔ∏è gear icon (bottom-right)
    - Click "Switch to Mock Mode"
    - Page reloads with mock services
  2. Alternative Methods:
    - Set VITE_USE_MOCKS=true in .env
    - Navigate to /enable-mocks.html helper page
    - Use localStorage: localStorage.setItem('VITE_USE_MOCKS', 'true')
  3. In Components:
  import { useCharacter } from '../../hooks/useServices'

  const { character, isLoading, error, levelUp } = useCharacter()

  Files Modified/Created:

  - /packages/client/src/services/index.ts - Service layer with mock support
  - /packages/client/src/services/mocks/ - All mock implementations
  - /packages/client/src/hooks/useServices.ts - React hooks
  - /packages/client/src/components/game/CharacterScreen.tsx - Updated to use
  services
  - /packages/client/src/components/debug/SimpleDevToggle.tsx - Dev tools UI
  - /packages/client/MOCK_SERVICES.md - Complete documentation

  Current State:

  - Service layer fully implemented with mock/real switching
  - CharacterScreen connected to service layer (other screens still use hardcoded
  mocks)
  - Mock mode persists across page reloads
  - Works in any environment (dev/prod)

  Benefits:

  - Develop without backend running
  - Test edge cases with controlled data
  - Simulate network delays and errors
  - Fast UI iteration with consistent data

  The system is ready for use - just click the ‚öôÔ∏è button to toggle between mock and
   real services!