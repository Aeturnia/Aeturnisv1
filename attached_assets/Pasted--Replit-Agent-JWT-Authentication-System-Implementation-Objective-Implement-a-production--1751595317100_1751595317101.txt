# Replit Agent: JWT Authentication System Implementation

## 🎯 Objective
Implement a production-ready JWT authentication system with Argon2 password hashing, refresh token rotation, Redis-backed sessions, and rate limiting for the Aeturnis Online MMORPG.

## 📋 Requirements

### Branch Setup
```bash
git checkout -b auth-system-v1
```

### Core Features
1. **JWT Authentication**: Access tokens (15min) and refresh tokens (7 days)
2. **Password Security**: Argon2id hashing with secure parameters
3. **Session Management**: Redis-backed refresh token storage
4. **Rate Limiting**: 5 login attempts per IP per minute
5. **Socket.IO Integration**: JWT validation in connection middleware
6. **Comprehensive Testing**: 85%+ coverage with 25+ test cases

## 🛠️ Implementation

### 1. Install Dependencies
```bash
yarn add jsonwebtoken argon2 redis ioredis express-rate-limit rate-limit-redis joi
yarn add -D @types/jsonwebtoken
```

### 2. Database Migration: `migrations/001_create_users.sql`
```sql
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  username VARCHAR(50) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  roles TEXT[] DEFAULT ARRAY['user']::TEXT[],
  email_verified BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP WITH TIME ZONE,
  CONSTRAINT email_format CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$')
);

CREATE INDEX idx_users_email ON users(LOWER(email));
CREATE INDEX idx_users_username ON users(LOWER(username));

-- Trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at BEFORE UPDATE
    ON users FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
```

### 3. Auth Service: `packages/server/src/services/AuthService.ts`
```typescript
import jwt from 'jsonwebtoken';
import argon2 from 'argon2';
import { randomUUID } from 'crypto';
import { db } from '../database';
import { redis } from '../cache/redis';
import Joi from 'joi';

interface AuthPayload {
  userId: string;
  email: string;
  roles: string[];
  type: 'access' | 'refresh';
  jti?: string;
}

interface RegisterData {
  email: string;
  username: string;
  password: string;
}

interface LoginData {
  emailOrUsername: string;
  password: string;
}

export class AuthService {
  private readonly JWT_SECRET = process.env.JWT_SECRET!;
  private readonly JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET!;
  private readonly ACCESS_TOKEN_EXPIRY = '15m';
  private readonly REFRESH_TOKEN_EXPIRY = '7d';
  private readonly REFRESH_TOKEN_EXPIRY_SECONDS = 7 * 24 * 60 * 60;
  
  private readonly argon2Options: argon2.Options & { raw?: false } = {
    type: argon2.argon2id,
    memoryCost: 65536,
    timeCost: 3,
    parallelism: 4,
  };

  // Validation schemas
  private readonly registerSchema = Joi.object({
    email: Joi.string().email().required(),
    username: Joi.string().alphanum().min(3).max(20).required(),
    password: Joi.string().min(8).max(100)
      .pattern(/[A-Z]/, 'uppercase')
      .pattern(/[a-z]/, 'lowercase')
      .pattern(/[0-9]/, 'number')
      .pattern(/[!@#$%^&*]/, 'special')
      .required()
      .messages({
        'string.pattern.name': 'Password must contain at least one {#name} character',
      }),
  });

  private readonly loginSchema = Joi.object({
    emailOrUsername: Joi.string().required(),
    password: Joi.string().required(),
  });

  async register(data: RegisterData) {
    // Validate input
    const { error } = this.registerSchema.validate(data);
    if (error) {
      throw new ValidationError(error.details[0].message);
    }

    const { email, username, password } = data;

    // Check if user exists
    const existingUser = await db.query(
      'SELECT id FROM users WHERE LOWER(email) = LOWER($1) OR LOWER(username) = LOWER($2)',
      [email, username]
    );

    if (existingUser.rows.length > 0) {
      throw new ConflictError('Email or username already exists');
    }

    // Hash password
    const passwordHash = await argon2.hash(password, this.argon2Options);

    // Create user
    const result = await db.query(
      `INSERT INTO users (email, username, password_hash)
       VALUES ($1, $2, $3)
       RETURNING id, email, username, roles, created_at`,
      [email.toLowerCase(), username.toLowerCase(), passwordHash]
    );

    const user = result.rows[0];

    // Generate tokens
    const tokens = await this.generateTokenPair(user);

    return {
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        roles: user.roles,
      },
      ...tokens,
    };
  }

  async login(data: LoginData) {
    // Validate input
    const { error } = this.loginSchema.validate(data);
    if (error) {
      throw new ValidationError(error.details[0].message);
    }

    const { emailOrUsername, password } = data;

    // Find user
    const result = await db.query(
      `SELECT id, email, username, password_hash, roles
       FROM users
       WHERE LOWER(email) = LOWER($1) OR LOWER(username) = LOWER($1)`,
      [emailOrUsername]
    );

    if (result.rows.length === 0) {
      throw new UnauthorizedError('Invalid credentials');
    }

    const user = result.rows[0];

    // Verify password
    const isValid = await argon2.verify(user.password_hash, password);
    if (!isValid) {
      throw new UnauthorizedError('Invalid credentials');
    }

    // Update last login
    await db.query(
      'UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1',
      [user.id]
    );

    // Generate tokens
    const tokens = await this.generateTokenPair(user);

    return {
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        roles: user.roles,
      },
      ...tokens,
    };
  }

  async refreshTokens(refreshToken: string) {
    try {
      // Verify refresh token
      const payload = jwt.verify(refreshToken, this.JWT_REFRESH_SECRET) as AuthPayload;
      
      if (payload.type !== 'refresh' || !payload.jti) {
        throw new UnauthorizedError('Invalid token type');
      }

      // Check if token exists in Redis
      const storedToken = await redis.get(`session:${payload.jti}`);
      if (!storedToken || storedToken !== refreshToken) {
        // Token reuse detected - invalidate all user sessions
        await this.invalidateUserSessions(payload.userId);
        throw new UnauthorizedError('Token reuse detected');
      }

      // Get fresh user data
      const result = await db.query(
        'SELECT id, email, username, roles FROM users WHERE id = $1',
        [payload.userId]
      );

      if (result.rows.length === 0) {
        throw new UnauthorizedError('User not found');
      }

      const user = result.rows[0];

      // Delete old refresh token
      await redis.del(`session:${payload.jti}`);

      // Generate new token pair
      const tokens = await this.generateTokenPair(user);

      return tokens;
    } catch (error) {
      if (error instanceof jwt.TokenExpiredError) {
        throw new UnauthorizedError('Refresh token expired');
      }
      if (error instanceof jwt.JsonWebTokenError) {
        throw new UnauthorizedError('Invalid refresh token');
      }
      throw error;
    }
  }

  generateAccessToken(user: any): string {
    const payload: AuthPayload = {
      userId: user.id,
      email: user.email,
      roles: user.roles,
      type: 'access',
    };

    return jwt.sign(payload, this.JWT_SECRET, {
      expiresIn: this.ACCESS_TOKEN_EXPIRY,
    });
  }

  async verifyToken(token: string): Promise<AuthPayload> {
    try {
      const payload = jwt.verify(token, this.JWT_SECRET) as AuthPayload;
      
      if (payload.type !== 'access') {
        throw new UnauthorizedError('Invalid token type');
      }

      return payload;
    } catch (error) {
      if (error instanceof jwt.TokenExpiredError) {
        throw new UnauthorizedError('Access token expired');
      }
      if (error instanceof jwt.JsonWebTokenError) {
        throw new UnauthorizedError('Invalid access token');
      }
      throw error;
    }
  }

  private async generateTokenPair(user: any) {
    const jti = randomUUID();

    // Generate access token
    const accessToken = this.generateAccessToken(user);

    // Generate refresh token
    const refreshPayload: AuthPayload = {
      userId: user.id,
      email: user.email,
      roles: user.roles,
      type: 'refresh',
      jti,
    };

    const refreshToken = jwt.sign(refreshPayload, this.JWT_REFRESH_SECRET, {
      expiresIn: this.REFRESH_TOKEN_EXPIRY,
    });

    // Store refresh token in Redis
    await redis.setex(
      `session:${jti}`,
      this.REFRESH_TOKEN_EXPIRY_SECONDS,
      refreshToken
    );

    return { accessToken, refreshToken };
  }

  private async invalidateUserSessions(userId: string) {
    // In production, maintain a user->sessions mapping
    // For now, log the security event
    console.error(`Security: Token reuse detected for user ${userId}`);
  }

  async logout(refreshToken: string) {
    try {
      const payload = jwt.verify(refreshToken, this.JWT_REFRESH_SECRET) as AuthPayload;
      
      if (payload.jti) {
        await redis.del(`session:${payload.jti}`);
      }
    } catch {
      // Silent fail - token might already be invalid
    }
  }
}

// Custom error classes
export class ValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

export class UnauthorizedError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'UnauthorizedError';
  }
}

export class ConflictError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'ConflictError';
  }
}
```

### 4. Auth Routes: `packages/server/src/routes/auth.routes.ts`
```typescript
import { Router } from 'express';
import { AuthService } from '../services/AuthService';
import { asyncHandler } from '../middleware/asyncHandler';
import { rateLimiter } from '../middleware/rateLimiter';

const router = Router();
const authService = new AuthService();

// Rate limiting for login endpoint
const loginLimiter = rateLimiter({
  windowMs: 60 * 1000, // 1 minute
  max: 5, // 5 attempts per IP
  message: 'Too many login attempts, please try again later',
  standardHeaders: true,
  legacyHeaders: false,
});

router.post('/register', asyncHandler(async (req, res) => {
  const result = await authService.register(req.body);
  
  res.status(201).json({
    success: true,
    data: result,
  });
}));

router.post('/login', loginLimiter, asyncHandler(async (req, res) => {
  const result = await authService.login(req.body);
  
  res.json({
    success: true,
    data: result,
  });
}));

router.post('/refresh', asyncHandler(async (req, res) => {
  const { refreshToken } = req.body;
  
  if (!refreshToken) {
    return res.status(400).json({
      success: false,
      error: 'Refresh token required',
    });
  }
  
  const result = await authService.refreshTokens(refreshToken);
  
  res.json({
    success: true,
    data: result,
  });
}));

router.post('/logout', asyncHandler(async (req, res) => {
  const { refreshToken } = req.body;
  
  if (refreshToken) {
    await authService.logout(refreshToken);
  }
  
  res.json({
    success: true,
    message: 'Logged out successfully',
  });
}));

export default router;
```

### 5. Middleware: `packages/server/src/middleware/auth.ts`
```typescript
import { Request, Response, NextFunction } from 'express';
import { AuthService } from '../services/AuthService';

const authService = new AuthService();

export interface AuthRequest extends Request {
  user?: {
    userId: string;
    email: string;
    roles: string[];
  };
}

export const authenticate = async (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        success: false,
        error: 'No token provided',
      });
    }
    
    const payload = await authService.verifyToken(token);
    
    req.user = {
      userId: payload.userId,
      email: payload.email,
      roles: payload.roles,
    };
    
    next();
  } catch (error) {
    res.status(401).json({
      success: false,
      error: error.message || 'Invalid token',
    });
  }
};

export const authorize = (...allowedRoles: string[]) => {
  return (req: AuthRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'Not authenticated',
      });
    }
    
    const hasRole = req.user.roles.some(role => allowedRoles.includes(role));
    
    if (!hasRole) {
      return res.status(403).json({
        success: false,
        error: 'Insufficient permissions',
      });
    }
    
    next();
  };
};
```

### 6. Rate Limiter: `packages/server/src/middleware/rateLimiter.ts`
```typescript
import rateLimit from 'express-rate-limit';
import RedisStore from 'rate-limit-redis';
import { redis } from '../cache/redis';

export const rateLimiter = (options: Partial<rateLimit.Options> = {}) => {
  return rateLimit({
    store: new RedisStore({
      client: redis,
      prefix: 'rl:',
    }),
    ...options,
  });
};
```

### 7. Socket.IO Auth: `packages/server/src/sockets/middleware.ts`
```typescript
import { Socket } from 'socket.io';
import { AuthService } from '../services/AuthService';

const authService = new AuthService();

export const socketAuth = async (socket: Socket, next: (err?: Error) => void) => {
  try {
    const token = socket.handshake.auth.token;
    
    if (!token) {
      return next(new Error('No token provided'));
    }
    
    const payload = await authService.verifyToken(token);
    
    // Attach user data to socket
    (socket as any).userId = payload.userId;
    (socket as any).user = {
      email: payload.email,
      roles: payload.roles,
    };
    
    next();
  } catch (error) {
    next(new Error('Authentication failed'));
  }
};
```

### 8. Integration Tests: `packages/server/src/services/AuthService.test.ts`
```typescript
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { AuthService, ValidationError, UnauthorizedError, ConflictError } from './AuthService';
import { db } from '../database';
import { redis } from '../cache/redis';
import jwt from 'jsonwebtoken';

// Mock database and redis
vi.mock('../database');
vi.mock('../cache/redis');

describe('AuthService', () => {
  let authService: AuthService;
  
  beforeEach(() => {
    authService = new AuthService();
    vi.clearAllMocks();
  });

  describe('register', () => {
    it('should register a new user successfully', async () => {
      const mockUser = {
        id: 'test-id',
        email: 'test@example.com',
        username: 'testuser',
        roles: ['user'],
      };

      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] }); // No existing user
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [mockUser] }); // Insert result
      vi.mocked(redis.setex).mockResolvedValue('OK');

      const result = await authService.register({
        email: 'test@example.com',
        username: 'testuser',
        password: 'Test123!@#',
      });

      expect(result).toHaveProperty('user');
      expect(result).toHaveProperty('accessToken');
      expect(result).toHaveProperty('refreshToken');
      expect(result.user.email).toBe('test@example.com');
    });

    it('should reject weak passwords', async () => {
      await expect(authService.register({
        email: 'test@example.com',
        username: 'testuser',
        password: 'weak',
      })).rejects.toThrow(ValidationError);
    });

    it('should reject duplicate email', async () => {
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [{ id: 'existing' }] });

      await expect(authService.register({
        email: 'test@example.com',
        username: 'testuser',
        password: 'Test123!@#',
      })).rejects.toThrow(ConflictError);
    });

    it('should reject invalid email format', async () => {
      await expect(authService.register({
        email: 'invalid-email',
        username: 'testuser',
        password: 'Test123!@#',
      })).rejects.toThrow(ValidationError);
    });

    it('should handle database errors gracefully', async () => {
      vi.mocked(db.query).mockRejectedValueOnce(new Error('DB Error'));

      await expect(authService.register({
        email: 'test@example.com',
        username: 'testuser',
        password: 'Test123!@#',
      })).rejects.toThrow('DB Error');
    });
  });

  describe('login', () => {
    it('should login with valid credentials', async () => {
      const mockUser = {
        id: 'test-id',
        email: 'test@example.com',
        username: 'testuser',
        password_hash: await argon2.hash('Test123!@#'),
        roles: ['user'],
      };

      vi.mocked(db.query).mockResolvedValueOnce({ rows: [mockUser] }); // Find user
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] }); // Update last login
      vi.mocked(redis.setex).mockResolvedValue('OK');

      const result = await authService.login({
        emailOrUsername: 'test@example.com',
        password: 'Test123!@#',
      });

      expect(result).toHaveProperty('accessToken');
      expect(result).toHaveProperty('refreshToken');
    });

    it('should reject invalid password', async () => {
      const mockUser = {
        id: 'test-id',
        email: 'test@example.com',
        username: 'testuser',
        password_hash: await argon2.hash('Test123!@#'),
        roles: ['user'],
      };

      vi.mocked(db.query).mockResolvedValueOnce({ rows: [mockUser] });

      await expect(authService.login({
        emailOrUsername: 'test@example.com',
        password: 'wrongpassword',
      })).rejects.toThrow(UnauthorizedError);
    });

    it('should reject non-existent user', async () => {
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] });

      await expect(authService.login({
        emailOrUsername: 'nonexistent@example.com',
        password: 'Test123!@#',
      })).rejects.toThrow(UnauthorizedError);
    });

    it('should work with username login', async () => {
      const mockUser = {
        id: 'test-id',
        email: 'test@example.com',
        username: 'testuser',
        password_hash: await argon2.hash('Test123!@#'),
        roles: ['user'],
      };

      vi.mocked(db.query).mockResolvedValueOnce({ rows: [mockUser] });
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] });
      vi.mocked(redis.setex).mockResolvedValue('OK');

      const result = await authService.login({
        emailOrUsername: 'testuser',
        password: 'Test123!@#',
      });

      expect(result).toHaveProperty('accessToken');
    });
  });

  describe('refreshTokens', () => {
    it('should refresh tokens with valid refresh token', async () => {
      const mockUser = {
        id: 'test-id',
        email: 'test@example.com',
        username: 'testuser',
        roles: ['user'],
      };

      const jti = 'test-jti';
      const refreshToken = jwt.sign(
        { userId: mockUser.id, email: mockUser.email, roles: mockUser.roles, type: 'refresh', jti },
        process.env.JWT_REFRESH_SECRET!
      );

      vi.mocked(redis.get).mockResolvedValueOnce(refreshToken);
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [mockUser] });
      vi.mocked(redis.del).mockResolvedValueOnce(1);
      vi.mocked(redis.setex).mockResolvedValue('OK');

      const result = await authService.refreshTokens(refreshToken);

      expect(result).toHaveProperty('accessToken');
      expect(result).toHaveProperty('refreshToken');
    });

    it('should detect token reuse', async () => {
      const jti = 'test-jti';
      const refreshToken = jwt.sign(
        { userId: 'test-id', email: 'test@example.com', roles: ['user'], type: 'refresh', jti },
        process.env.JWT_REFRESH_SECRET!
      );

      vi.mocked(redis.get).mockResolvedValueOnce('different-token');

      await expect(authService.refreshTokens(refreshToken))
        .rejects.toThrow('Token reuse detected');
    });

    it('should reject expired refresh token', async () => {
      const refreshToken = jwt.sign(
        { userId: 'test-id', type: 'refresh', jti: 'test' },
        process.env.JWT_REFRESH_SECRET!,
        { expiresIn: '-1s' }
      );

      await expect(authService.refreshTokens(refreshToken))
        .rejects.toThrow('Refresh token expired');
    });

    it('should reject invalid refresh token', async () => {
      await expect(authService.refreshTokens('invalid-token'))
        .rejects.toThrow(UnauthorizedError);
    });

    it('should reject refresh token with wrong type', async () => {
      const token = jwt.sign(
        { userId: 'test-id', type: 'access' },
        process.env.JWT_REFRESH_SECRET!
      );

      await expect(authService.refreshTokens(token))
        .rejects.toThrow('Invalid token type');
    });
  });

  describe('verifyToken', () => {
    it('should verify valid access token', async () => {
      const payload = {
        userId: 'test-id',
        email: 'test@example.com',
        roles: ['user'],
        type: 'access' as const,
      };

      const token = jwt.sign(payload, process.env.JWT_SECRET!);
      const result = await authService.verifyToken(token);

      expect(result.userId).toBe('test-id');
      expect(result.type).toBe('access');
    });

    it('should reject expired access token', async () => {
      const token = jwt.sign(
        { userId: 'test-id', type: 'access' },
        process.env.JWT_SECRET!,
        { expiresIn: '-1s' }
      );

      await expect(authService.verifyToken(token))
        .rejects.toThrow('Access token expired');
    });

    it('should reject token with wrong type', async () => {
      const token = jwt.sign(
        { userId: 'test-id', type: 'refresh' },
        process.env.JWT_SECRET!
      );

      await expect(authService.verifyToken(token))
        .rejects.toThrow('Invalid token type');
    });

    it('should reject malformed token', async () => {
      await expect(authService.verifyToken('malformed'))
        .rejects.toThrow(UnauthorizedError);
    });
  });

  describe('logout', () => {
    it('should delete refresh token on logout', async () => {
      const jti = 'test-jti';
      const refreshToken = jwt.sign(
        { userId: 'test-id', type: 'refresh', jti },
        process.env.JWT_REFRESH_SECRET!
      );

      vi.mocked(redis.del).mockResolvedValueOnce(1);

      await authService.logout(refreshToken);

      expect(redis.del).toHaveBeenCalledWith(`session:${jti}`);
    });

    it('should not throw on invalid token during logout', async () => {
      await expect(authService.logout('invalid-token'))
        .resolves.not.toThrow();
    });
  });

  // Edge cases and security tests
  describe('security', () => {
    it('should handle SQL injection attempts in email', async () => {
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] });

      await expect(authService.login({
        emailOrUsername: "admin'--",
        password: 'password',
      })).rejects.toThrow(UnauthorizedError);
    });

    it('should normalize email case', async () => {
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] });
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [{ id: 'test' }] });

      await authService.register({
        email: 'TEST@EXAMPLE.COM',
        username: 'testuser',
        password: 'Test123!@#',
      });

      expect(db.query).toHaveBeenCalledWith(
        expect.any(String),
        expect.arrayContaining(['test@example.com'])
      );
    });

    it('should handle timing attacks on login', async () => {
      vi.mocked(db.query).mockResolvedValueOnce({ rows: [] });

      const start = Date.now();
      await expect(authService.login({
        emailOrUsername: 'nonexistent@example.com',
        password: 'Test123!@#',
      })).rejects.toThrow();
      const duration = Date.now() - start;

      // Should take similar time regardless of user existence
      expect(duration).toBeGreaterThan(10); // Argon2 should add delay
    });
  });
});
```

### 9. Redis Setup: `packages/server/src/cache/redis.ts`
```typescript
import Redis from 'ioredis';

export const redis = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  password: process.env.REDIS_PASSWORD,
  db: parseInt(process.env.REDIS_DB || '0'),
  retryStrategy: (times) => {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
});

redis.on('error', (err) => {
  console.error('Redis Client Error:', err);
});

redis.on('connect', () => {
  console.log('Redis Client Connected');
});
```

### 10. Async Handler: `packages/server/src/middleware/asyncHandler.ts`
```typescript
import { Request, Response, NextFunction } from 'express';

export const asyncHandler = (fn: Function) => {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};
```

### 11. Update Server Bootstrap
Add to `packages/server/src/index.ts`:
```typescript
import authRoutes from './routes/auth.routes';

// Add auth routes
app.use('/api/auth', authRoutes);

// Socket.IO auth middleware
import { socketAuth } from './sockets/middleware';
io.use(socketAuth);
```

### 12. Environment Variables
Add to `.env`:
```env
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
REDIS_HOST=localhost
REDIS_PORT=6379
```

## 🚀 Testing Instructions

### Run All Tests
```bash
yarn test --coverage
```

### Security Testing
```bash
# Install OWASP ZAP or use Docker
docker run -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:3000
```

### Manual Testing
```bash
# Register
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","username":"testuser","password":"Test123!@#"}'

# Login
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"emailOrUsername":"test@example.com","password":"Test123!@#"}'

# Refresh
curl -X POST http://localhost:3000/api/auth/refresh \
  -H "Content-Type: application/json" \
  -d '{"refreshToken":"your-refresh-token"}'
```

## ✅ Self-Audit Checklist

- [ ] All migrations apply cleanly: `yarn db:migrate`
- [ ] Refresh tokens rotate correctly on use
- [ ] Rate limiting blocks after 5 attempts
- [ ] All tests pass: `yarn test`
- [ ] Test coverage ≥ 85%: `yarn test:coverage`
- [ ] No TypeScript errors: `yarn typecheck`
- [ ] ESLint passes: `yarn lint`
- [ ] Redis cleanup works on logout
- [ ] Socket.IO validates JWT on connection
- [ ] No high-severity vulnerabilities in security scan

## 📊 Expected Coverage Report
```
File               | % Stmts | % Branch | % Funcs | % Lines |
-------------------|---------|----------|---------|---------|
AuthService.ts     |   92.3  |   88.5   |   95.0  |   91.8  |
auth.routes.ts     |   88.7  |   85.0   |   90.0  |   87.5  |
auth.middleware.ts |   90.0  |   87.5   |   92.0  |   89.0  |
-------------------|---------|----------|---------|---------|
All files          |   90.3  |   87.0   |   92.3  |   89.4  |
```

## 🔧 Troubleshooting

1. **Redis connection fails**: Ensure Redis is running locally
2. **Migration errors**: Check PostgreSQL is running and database exists
3. **JWT errors**: Verify environment variables are set
4. **Rate limiting not working**: Check Redis connection for rate-limit store

---

**Branch**: `auth-system-v1`  
**Next Step**: Database Core Schema (`db-core-v1`)