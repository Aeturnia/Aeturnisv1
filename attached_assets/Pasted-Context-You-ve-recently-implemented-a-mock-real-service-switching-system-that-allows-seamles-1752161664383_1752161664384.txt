Context

  You've recently implemented a mock/real service switching system that allows
  seamless toggling between mock data and real backend services. The service layer
  architecture includes 17 services with proper React hooks integration. The
  current UI has basic character stats display and simple action buttons, but needs
   significant enhancement for a complete MMO interface.

  Current State

  - ✅ Service Layer: Complete with mock/real switching via environment variables
  and localStorage
  - ✅ Basic CharacterScreen: Shows stats, attributes, health/mana/stamina bars
  - ✅ Simple GameScreen: Basic HUD with action buttons
  - ❌ Equipment UI: Service exists but no visual components
  - ❌ Advanced HUD: Missing buff/debuff indicators, target info, mini-map
  - ❌ Quick Action Toolbar: Only 3 hardcoded buttons currently

  Step 3.2 Requirements (from Phases.md)

  1. Character & Stats UI
    - Character sheet display ✅ (basic implementation exists)
    - Stats breakdown view ✅ (needs enhancement)
    - Equipment preview ❌ (not implemented)
    - Stat comparison tooltips ❌ (not implemented)
  2. Main Game View
    - Text display optimization ⚠️ (basic text exists)
    - Action button layout ⚠️ (needs expansion)
    - Quick action toolbar ❌ (not implemented)
    - Mobile HUD design ⚠️ (basic HUD exists)

  Implementation Tasks

  1. Create Equipment UI Components

  // Create /packages/client/src/components/game/equipment/EquipmentSlot.tsx
  // Create /packages/client/src/components/game/equipment/EquipmentPanel.tsx
  // Create /packages/client/src/components/game/equipment/EquipmentStats.tsx
  - Visual equipment slots (head, chest, weapon, shield, etc.)
  - Drag-drop support for mobile
  - Equipment stat modifiers display
  - Set bonus indicators
  - Integration with MockInventoryService

  2. Enhance Character Stats Display

  // Update /packages/client/src/components/game/CharacterScreen.tsx
  - Add equipment preview section
  - Implement stat comparison tooltips (show equipment contributions)
  - Add visual indicators for buffed/debuffed stats
  - Mobile-optimized touch interactions

  3. Create Advanced HUD Components

  // Create /packages/client/src/components/game/hud/TargetFrame.tsx
  // Create /packages/client/src/components/game/hud/BuffDebuffBar.tsx
  // Create /packages/client/src/components/game/hud/MiniMap.tsx
  // Create /packages/client/src/components/game/hud/QuestTracker.tsx
  - Target health/info display
  - Buff/debuff icons with durations
  - Mini-map with player position
  - Active quest objectives

  4. Implement Quick Action Toolbar

  // Create /packages/client/src/components/game/combat/ActionBar.tsx
  // Create /packages/client/src/components/game/combat/ActionSlot.tsx
  - 8-12 customizable action slots
  - Ability/item icons from services
  - Cooldown indicators
  - Touch-optimized size and spacing
  - Drag-drop for slot customization

  5. Enhance Game Text Display

  // Create /packages/client/src/components/game/ui/GameTextDisplay.tsx
  // Create /packages/client/src/components/game/ui/CombatLog.tsx
  - Scrollable game narrative area
  - Combat log with color coding
  - NPC dialogue formatting
  - Mobile-optimized font sizes

  6. Mobile HUD Optimization

  // Update /packages/client/src/components/game/GameScreen.tsx
  - Reorganize HUD elements for mobile
  - Collapsible panels for space efficiency
  - Touch gesture controls
  - Landscape/portrait adaptive layouts

  Service Integration Points

  - Use useCharacter() hook for character data
  - Use useInventory() hook for equipment data
  - Use useCombat() hook for action availability
  - Maintain mock/real service compatibility

  Design Guidelines

  - Follow existing Tailwind CSS patterns
  - Dark theme with accent colors (amber, emerald)
  - Mobile-first responsive design
  - Touch targets minimum 44x44px
  - Smooth transitions (300ms default)

  Testing Requirements

  - Component renders without errors
  - Mock data displays correctly
  - Touch interactions work smoothly
  - Responsive at all viewport sizes
  - Service integration functions properly

  Files to Reference

  - /packages/client/src/services/mocks/MockCharacterService.ts - Character data
  structure
  - /packages/client/src/services/mocks/MockInventoryService.ts - Equipment/item
  structure
  - /packages/client/src/components/game/CharacterScreen.tsx - Current
  implementation
  - /packages/client/src/App.tsx - Service configuration
  - /packages/client/MOCK_SERVICES.md - Service documentation

  Success Criteria

  1. Equipment slots visible with mock equipment data
  2. Stats show equipment contributions via tooltips
  3. HUD displays target, buffs/debuffs, mini-map
  4. Action bar has 8+ customizable slots
  5. All components mobile-optimized
  6. Mock service integration working
  7. No TypeScript errors
  8. Follows project coding standards

  Important Notes

  - Build upon existing service layer - don't modify service interfaces
  - Maintain backward compatibility with current components
  - Focus on visual implementation, not game logic
  - Ensure all new components work in mock mode
  - Follow mobile-first design principles

  Start by creating the equipment UI components, then enhance the character screen,
   followed by HUD improvements and action bar implementation. Test each component
  with the mock services before moving to the next.