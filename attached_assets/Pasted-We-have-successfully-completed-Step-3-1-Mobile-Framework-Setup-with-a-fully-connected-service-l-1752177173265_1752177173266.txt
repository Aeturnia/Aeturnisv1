We have successfully completed Step 3.1 (Mobile Framework Setup) with a fully
  connected service layer. All backend connections are working:
  - CharacterService ✅ (fetches real character data)
  - ZoneService ✅ (fetches 8 zones from backend)
  - InventoryService ✅ (fetches inventory/equipment data)

  Now we need to implement Step 3.2: Core Game Interface [P3-3-02].

  Objective

  Create the core game interface with proper character/stats UI and main game view,
   following the mobile-first design established in Step 3.1.

  Specific Requirements

  1. Character & Stats UI Components

  Create enhanced UI components for character information:
  - Character Sheet Display: Comprehensive view of character stats, level,
  experience
  - Stats Breakdown View: Detailed view showing base stats, bonuses, and derived
  stats
  - Equipment Preview: Visual representation of equipped items with stats
  - Stat Comparison Tooltips: Show stat changes when hovering/tapping equipment

  2. Main Game View

  Implement the primary game interface:
  - Text Display Optimization: Clear, readable game messages and narrative text
  - Action Button Layout: Intuitive button placement for combat, movement,
  interactions
  - Quick Action Toolbar: Frequently used actions (inventory, character, map)
  - Mobile HUD Design: Compact heads-up display showing HP/MP/Stamina, level, zone

  Technical Requirements

  1. Use Existing Services: All components must use the already-connected services
  (CharacterService, ZoneService, InventoryService)
  2. Mobile-First: Follow the responsive design patterns established in Step 3.1
  3. Performance: Use React.memo and useMemo for expensive calculations
  4. Real-time Updates: Components should subscribe to service state updates
  5. Loading States: Proper loading and error handling for all data fetching

  Implementation Checklist

  - Create CharacterSheet component with full stats display
  - Implement StatsBreakdown component showing base + bonus calculations
  - Create EquipmentPreview component with visual slots
  - Build StatTooltip component for comparison on hover/tap
  - Implement MainGameView as the primary game interface
  - Create GameHUD component showing vital stats
  - Add ActionBar component for quick actions
  - Implement TextDisplay component for game messages
  - Ensure all components use real data from services
  - Add proper TypeScript types for all components
  - Include loading and error states
  - Test on mobile devices for responsive behavior

  File Structure

  /packages/client/src/components/
  ├── character/
  │   ├── CharacterSheet.tsx
  │   ├── StatsBreakdown.tsx
  │   ├── EquipmentPreview.tsx
  │   └── StatTooltip.tsx
  ├── game/
  │   ├── MainGameView.tsx (new main game interface)
  │   ├── GameHUD.tsx
  │   ├── ActionBar.tsx
  │   └── TextDisplay.tsx
  └── common/
      └── (existing components)

  Example Usage

  The MainGameView should be the primary screen that integrates:
  - GameHUD at the top showing vital stats
  - Main content area with TextDisplay for game messages
  - ActionBar at the bottom for quick actions
  - Navigation to CharacterScreen, InventoryScreen, MapScreen via quick actions

  Success Criteria

  1. All components display real data from backend services
  2. Responsive design works on mobile devices
  3. Stats calculations are accurate and match backend logic
  4. UI is intuitive and follows mobile gaming conventions
  5. Performance is smooth with no unnecessary re-renders
  6. TypeScript types are properly defined
  7. Components handle loading/error states gracefully

  Notes

  - Reference the existing CharacterScreen, InventoryScreen, and MapScreen for
  service usage patterns
  - Use the established color scheme and styling from the design system
  - Ensure touch-friendly interactions with appropriate tap targets
  - Follow the established pattern of using hooks (useCharacter, useInventory,
  etc.)