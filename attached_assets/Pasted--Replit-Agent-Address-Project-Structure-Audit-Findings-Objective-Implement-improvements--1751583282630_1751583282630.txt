# Replit Agent: Address Project Structure Audit Findings

## üéØ Objective
Implement improvements identified in the project structure audit (Score: 8/10) to create a comprehensive monorepo setup suitable for MMORPG game development.

## üìã Priority Improvements

### High Priority Tasks
1. **Add Client Package** - Frontend game code structure
2. **Add Shared Package** - Common utilities and types
3. **Environment Setup** - Configuration management
4. **Documentation Structure** - Comprehensive docs

### Medium Priority Tasks
1. **Scripts Directory** - Build and utility scripts
2. **Assets Management** - Game resources structure
3. **Configuration Management** - Centralized configs

## üõ†Ô∏è Implementation

### 1. Create Client Package

#### Directory Structure
```bash
mkdir -p packages/client/src/{components,hooks,stores,utils,services,types,assets}
mkdir -p packages/client/public
mkdir -p packages/client/src/game/{systems,entities,scenes}
```

#### Create `packages/client/package.json`
```json
{
  "name": "@aeturnis/client",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "typecheck": "tsc --noEmit",
    "test": "vitest run",
    "test:watch": "vitest"
  },
  "dependencies": {
    "@aeturnis/shared": "workspace:*",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "socket.io-client": "^4.7.0",
    "zustand": "^4.5.0",
    "@tanstack/react-query": "^5.17.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.2.0",
    "@types/node": "^20.0.0",
    "vite": "^5.0.0",
    "vite-plugin-pwa": "^0.17.0"
  }
}
```

#### Create `packages/client/tsconfig.json`
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "jsx": "react-jsx",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "strict": true,
    "paths": {
      "@/*": ["./src/*"],
      "@shared/*": ["../shared/src/*"]
    }
  },
  "include": ["src/**/*"],
  "references": [
    { "path": "../shared" }
  ]
}
```

#### Create `packages/client/vite.config.ts`
```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa';
import path from 'path';

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      manifest: {
        name: 'Aeturnis Online',
        short_name: 'Aeturnis',
        theme_color: '#1a1a1a',
        icons: [
          {
            src: '/icon-192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: '/icon-512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      }
    })
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@shared': path.resolve(__dirname, '../shared/src')
    }
  }
});
```

#### Create `packages/client/src/App.tsx`
```tsx
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { GameProvider } from './stores/gameStore';

const queryClient = new QueryClient();

export function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <GameProvider>
        <div className="app">
          <h1>Aeturnis Online</h1>
          <p>Game client initialized</p>
        </div>
      </GameProvider>
    </QueryClientProvider>
  );
}
```

#### Create `packages/client/src/main.tsx`
```tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { App } from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

#### Create `packages/client/src/stores/gameStore.tsx`
```tsx
import { create } from 'zustand';
import { ReactNode, createContext, useContext } from 'react';

interface GameState {
  isConnected: boolean;
  currentCharacter: any | null;
  setConnected: (connected: boolean) => void;
  setCharacter: (character: any) => void;
}

const useGameStore = create<GameState>((set) => ({
  isConnected: false,
  currentCharacter: null,
  setConnected: (connected) => set({ isConnected: connected }),
  setCharacter: (character) => set({ currentCharacter: character })
}));

const GameContext = createContext<ReturnType<typeof useGameStore> | null>(null);

export function GameProvider({ children }: { children: ReactNode }) {
  return (
    <GameContext.Provider value={useGameStore()}>
      {children}
    </GameContext.Provider>
  );
}

export const useGame = () => {
  const context = useContext(GameContext);
  if (!context) throw new Error('useGame must be used within GameProvider');
  return context;
};
```

### 2. Create Shared Package

#### Directory Structure
```bash
mkdir -p packages/shared/src/{types,utils,constants,interfaces}
```

#### Create `packages/shared/package.json`
```json
{
  "name": "@aeturnis/shared",
  "version": "1.0.0",
  "private": true,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "require": "./dist/index.js"
    }
  },
  "scripts": {
    "build": "tsc",
    "dev": "tsc --watch",
    "typecheck": "tsc --noEmit",
    "test": "vitest run"
  },
  "devDependencies": {
    "typescript": "^5.3.0",
    "vitest": "^1.2.0"
  }
}
```

#### Create `packages/shared/tsconfig.json`
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "rootDir": "./src",
    "outDir": "./dist",
    "composite": true,
    "declaration": true,
    "declarationMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["**/*.test.ts", "**/*.spec.ts"]
}
```

#### Create `packages/shared/src/index.ts`
```typescript
// Export all shared modules
export * from './types';
export * from './constants';
export * from './interfaces';
export * from './utils';
```

#### Create `packages/shared/src/types/index.ts`
```typescript
// Game-wide type definitions
export type CharacterRace = 'human' | 'elf' | 'dwarf' | 'orc' | 'halfling' | 'gnome' | 'darkelf' | 'lizardman';

export type DamageType = 'physical' | 'fire' | 'ice' | 'lightning' | 'holy' | 'dark';

export type ItemRarity = 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';

export interface Position {
  x: number;
  y: number;
  zone: string;
}

export interface Stats {
  strength: number;
  intelligence: number;
  vitality: number;
  dexterity: number;
  wisdom: number;
}
```

#### Create `packages/shared/src/constants/index.ts`
```typescript
export const GAME_CONSTANTS = {
  MAX_LEVEL: Infinity,
  BASE_EXPERIENCE: 100,
  EXPERIENCE_SCALING: 1.15,
  MAX_INVENTORY_SLOTS: 50,
  MAX_CHARACTERS_PER_ACCOUNT: 5,
  COMBAT_TURN_TIMEOUT: 30000, // 30 seconds
  MOVEMENT_COOLDOWN: 1000, // 1 second
} as const;

export const API_ENDPOINTS = {
  AUTH: '/api/auth',
  CHARACTERS: '/api/characters',
  GAME: '/api/game',
  COMBAT: '/api/combat',
  SOCIAL: '/api/social',
} as const;
```

#### Create `packages/shared/src/interfaces/index.ts`
```typescript
import { Stats, Position, CharacterRace } from '../types';

export interface Character {
  id: string;
  name: string;
  race: CharacterRace;
  level: number;
  experience: string; // BigInt as string
  stats: Stats;
  position: Position;
  health: number;
  maxHealth: number;
  mana: number;
  maxMana: number;
}

export interface User {
  id: string;
  email: string;
  username: string;
  createdAt: Date;
  lastLogin: Date;
}

export interface GameMessage {
  type: 'info' | 'combat' | 'chat' | 'system';
  content: string;
  timestamp: Date;
  sender?: string;
}
```

#### Create `packages/shared/src/utils/index.ts`
```typescript
/**
 * Calculate experience required for a specific level
 */
export function calculateExpForLevel(level: number): bigint {
  if (level <= 1) return 0n;
  const base = 100n;
  const scaling = 115n; // 1.15 as percentage
  let exp = base;
  for (let i = 2; i < level; i++) {
    exp = (exp * scaling) / 100n;
  }
  return exp;
}

/**
 * Format large numbers with suffixes
 */
export function formatNumber(num: number | bigint): string {
  const n = typeof num === 'bigint' ? Number(num) : num;
  if (n < 1000) return n.toString();
  if (n < 1000000) return (n / 1000).toFixed(1) + 'K';
  if (n < 1000000000) return (n / 1000000).toFixed(1) + 'M';
  return (n / 1000000000).toFixed(1) + 'B';
}

/**
 * Generate a random ID
 */
export function generateId(): string {
  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
```

### 3. Environment Configuration

#### Create `.env.example`
```env
# Environment
NODE_ENV=development

# Server
PORT=3000
HOST=localhost

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/aeturnis_dev
REDIS_URL=redis://localhost:6379

# Auth
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
JWT_EXPIRY=15m
JWT_REFRESH_EXPIRY=7d

# Client
VITE_API_URL=http://localhost:3000
VITE_WS_URL=ws://localhost:3000

# Game Config
MAX_PLAYERS_PER_ZONE=100
COMBAT_TIMEOUT_SECONDS=30
MOVEMENT_COOLDOWN_MS=1000

# External Services (future)
# SMTP_HOST=
# SMTP_PORT=
# SMTP_USER=
# SMTP_PASS=
```

#### Create `.env.development`
```env
# Development overrides
NODE_ENV=development
LOG_LEVEL=debug
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/aeturnis_dev
```

#### Create `.env.test`
```env
# Test environment
NODE_ENV=test
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/aeturnis_test
JWT_SECRET=test-secret
JWT_REFRESH_SECRET=test-refresh-secret
```

### 4. Documentation Structure

#### Create Documentation Directories
```bash
mkdir -p docs/{api,guides,architecture,game-design}
```

#### Create `docs/README.md`
```markdown
# Aeturnis Online Documentation

Welcome to the comprehensive documentation for Aeturnis Online.

## Documentation Structure

- **[API Documentation](./api/)** - REST API and WebSocket endpoints
- **[Architecture](./architecture/)** - System design and technical architecture
- **[Game Design](./game-design/)** - Game mechanics and design documents
- **[Guides](./guides/)** - Development and deployment guides

## Quick Links

- [Getting Started](./guides/getting-started.md)
- [API Reference](./api/README.md)
- [Contributing Guide](./guides/contributing.md)
- [Deployment Guide](./guides/deployment.md)
```

#### Create `docs/guides/getting-started.md`
```markdown
# Getting Started with Aeturnis Online Development

## Prerequisites

- Node.js 20 LTS
- Yarn 1.22+
- PostgreSQL 15+
- Redis 7+

## Initial Setup

1. Clone the repository
2. Install dependencies: `yarn install`
3. Copy environment files: `cp .env.example .env`
4. Set up databases: `yarn db:setup`
5. Run migrations: `yarn db:migrate`
6. Start development: `yarn dev`

## Development Workflow

### Running the Application

```bash
# Start all services
yarn dev

# Start specific package
yarn workspace @aeturnis/server dev
yarn workspace @aeturnis/client dev

# Run tests
yarn test

# Type checking
yarn typecheck
```
```

### 5. Scripts Directory

#### Create Build Scripts
```bash
mkdir -p scripts
```

#### Create `scripts/setup.sh`
```bash
#!/bin/bash
set -e

echo "üöÄ Setting up Aeturnis Online development environment..."

# Check prerequisites
command -v node >/dev/null 2>&1 || { echo "‚ùå Node.js is required but not installed."; exit 1; }
command -v yarn >/dev/null 2>&1 || { echo "‚ùå Yarn is required but not installed."; exit 1; }

# Install dependencies
echo "üì¶ Installing dependencies..."
yarn install

# Copy environment files
if [ ! -f .env ]; then
    echo "üìÑ Creating .env file..."
    cp .env.example .env
fi

# Build shared package first
echo "üî® Building shared package..."
yarn workspace @aeturnis/shared build

echo "‚úÖ Setup complete! Run 'yarn dev' to start development."
```

#### Create `scripts/clean.sh`
```bash
#!/bin/bash
set -e

echo "üßπ Cleaning build artifacts..."

# Remove node_modules
find . -name "node_modules" -type d -prune -exec rm -rf {} +

# Remove dist directories
find . -name "dist" -type d -prune -exec rm -rf {} +

# Remove coverage
find . -name "coverage" -type d -prune -exec rm -rf {} +

# Remove lock files
rm -f yarn.lock package-lock.json

echo "‚úÖ Clean complete!"
```

### 6. Assets Management Structure

#### Create Assets Directories
```bash
mkdir -p packages/client/public/{images,sounds,fonts}
mkdir -p packages/client/src/assets/{sprites,ui,icons}
mkdir -p assets/{concept-art,game-design,marketing}
```

#### Create `assets/README.md`
```markdown
# Aeturnis Online Assets

## Structure

- **concept-art/** - Concept art and design mockups
- **game-design/** - Game design assets and diagrams
- **marketing/** - Marketing materials and screenshots

## Client Assets

Game assets are located in:
- `packages/client/public/` - Static assets served directly
- `packages/client/src/assets/` - Assets imported in code

## Asset Guidelines

- Images: Use WebP format when possible, PNG for transparency
- Maximum size: 500KB for images, 2MB for backgrounds
- Naming: Use kebab-case (e.g., `warrior-sprite-idle.png`)
```

### 7. Update Root Configuration

#### Update root `package.json`
```json
{
  "name": "aeturnis-online",
  "version": "1.0.0",
  "private": true,
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "dev": "concurrently \"yarn workspace @aeturnis/shared dev\" \"yarn workspace @aeturnis/server dev\" \"yarn workspace @aeturnis/client dev\"",
    "build": "yarn workspaces foreach -pt run build",
    "test": "yarn workspaces foreach -p run test",
    "test:coverage": "yarn workspaces foreach -p run test:coverage",
    "typecheck": "yarn workspaces foreach -p run typecheck",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "setup": "bash scripts/setup.sh",
    "clean": "bash scripts/clean.sh",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "@vitest/coverage-v8": "^1.2.0",
    "concurrently": "^8.2.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "husky": "^8.0.0",
    "prettier": "^3.2.0",
    "typescript": "^5.3.0",
    "vitest": "^1.2.0"
  },
  "engines": {
    "node": ">=20.0.0",
    "yarn": ">=1.22.0"
  }
}
```

#### Create `.nvmrc`
```
20
```

#### Update `.gitignore`
```gitignore
# Dependencies
node_modules/
.yarn/

# Build outputs
dist/
build/
*.tsbuildinfo

# Test coverage
coverage/
.nyc_output/

# Environment files
.env
.env.local
.env.*.local
!.env.example
!.env.test

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Temporary files
*.tmp
*.temp
.cache/

# OS files
Thumbs.db

# Audit artifacts
audit/
.dry-run-*/
```

## üöÄ Execution Steps

1. **Run the setup script** to create all directories:
   ```bash
   bash scripts/setup.sh
   ```

2. **Install new dependencies**:
   ```bash
   yarn install
   ```

3. **Build shared package** first:
   ```bash
   yarn workspace @aeturnis/shared build
   ```

4. **Verify the new structure**:
   ```bash
   tree -L 3 -I 'node_modules|dist|coverage'
   ```

5. **Run all packages** in development:
   ```bash
   yarn dev
   ```

## ‚úÖ Validation Checklist

After implementation:
- [ ] Client package created with React + Vite setup
- [ ] Shared package created with common types/utils
- [ ] Environment configuration files created
- [ ] Documentation structure established
- [ ] Scripts directory with utility scripts
- [ ] Assets management structure in place
- [ ] All packages can be built successfully
- [ ] Development server runs all packages
- [ ] TypeScript compilation works across packages
- [ ] Cross-package imports work correctly

## üìä Expected Output

After successful implementation:
```
aeturnis-online/
‚îú‚îÄ‚îÄ packages/
‚îÇ   ‚îú‚îÄ‚îÄ client/          # New React game client
‚îÇ   ‚îú‚îÄ‚îÄ server/          # Existing server
‚îÇ   ‚îî‚îÄ‚îÄ shared/          # New shared utilities
‚îú‚îÄ‚îÄ docs/                # New documentation
‚îú‚îÄ‚îÄ scripts/             # New build scripts
‚îú‚îÄ‚îÄ assets/              # New assets structure
‚îú‚îÄ‚îÄ .env.example         # New environment template
‚îî‚îÄ‚îÄ [other root files]
```

This addresses all high and medium priority items from the audit, expanding the monorepo to support full-stack game development.