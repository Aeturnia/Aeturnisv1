# Replit Agent: Initialize TypeScript Monorepo with Yarn Workspaces

## 🎯 Objective
Create a production-ready TypeScript monorepo using Yarn workspaces with comprehensive tooling for code quality, testing, and CI/CD.

## 📋 Requirements

### Core Setup
1. **Package Manager**: Yarn v1 (classic) with workspaces
2. **Node Version**: 20 LTS
3. **TypeScript**: Latest stable version
4. **Monorepo Structure**: Yarn workspaces configuration

### Directory Structure
```
.
├── .github/
│   └── workflows/
│       └── ci.yml
├── packages/
│   └── server/
│       ├── src/
│       │   ├── index.ts
│       │   └── index.test.ts
│       ├── package.json
│       └── tsconfig.json
├── .husky/
│   └── pre-commit
├── .eslintrc.js
├── .prettierrc
├── .gitignore
├── .nvmrc
├── package.json (root)
├── tsconfig.base.json
├── vitest.config.ts
├── yarn.lock
└── README.md
```

## 🛠️ Configuration Files

### 1. Root `package.json`
```json
{
  "name": "aeturnis-online",
  "version": "1.0.0",
  "private": true,
  "workspaces": [
    "packages/*"
  ],
  "engines": {
    "node": ">=20.0.0",
    "yarn": ">=1.22.0"
  },
  "scripts": {
    "dev": "yarn workspace @aeturnis/server dev",
    "build": "yarn workspaces run build",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "typecheck": "yarn workspaces run typecheck",
    "prepare": "husky install",
    "pre-commit": "yarn lint && yarn format:check && yarn test"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "@vitest/coverage-v8": "^1.2.0",
    "eslint": "^8.56.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-prettier": "^5.1.0",
    "husky": "^8.0.0",
    "prettier": "^3.2.0",
    "typescript": "^5.3.0",
    "vitest": "^1.2.0"
  }
}
```

### 2. Server Package `packages/server/package.json`
```json
{
  "name": "@aeturnis/server",
  "version": "1.0.0",
  "private": true,
  "main": "dist/index.js",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc",
    "typecheck": "tsc --noEmit",
    "test": "vitest run"
  },
  "dependencies": {
    "express": "^4.18.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.0",
    "@types/node": "^20.0.0",
    "ts-node": "^10.9.0"
  }
}
```

### 3. ESLint Configuration `.eslintrc.js`
```javascript
module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module',
    project: ['./tsconfig.base.json', './packages/*/tsconfig.json'],
    tsconfigRootDir: __dirname,
  },
  env: {
    node: true,
    es2022: true,
    jest: true,
  },
  extends: [
    'airbnb-base',
    'airbnb-typescript/base',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  plugins: ['@typescript-eslint', 'prettier'],
  rules: {
    'import/prefer-default-export': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/no-explicit-any': 'error',
    'no-console': ['warn', { allow: ['warn', 'error'] }],
  },
  ignorePatterns: ['dist', 'node_modules', 'coverage', '*.js'],
};
```

### 4. Prettier Configuration `.prettierrc`
```json
{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "endOfLine": "lf"
}
```

### 5. TypeScript Base Config `tsconfig.base.json`
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "commonjs",
    "lib": ["ES2022"],
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "node",
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  },
  "exclude": ["node_modules", "dist", "coverage"]
}
```

### 6. Server TypeScript Config `packages/server/tsconfig.json`
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "rootDir": "./src",
    "outDir": "./dist"
  },
  "include": ["src/**/*"],
  "exclude": ["**/*.test.ts", "**/*.spec.ts"]
}
```

### 7. Vitest Configuration `vitest.config.ts`
```typescript
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html', 'lcov'],
      exclude: [
        'node_modules/',
        'dist/',
        '**/*.d.ts',
        '**/*.config.*',
        '**/mockData',
        '**/*.test.ts',
      ],
      thresholds: {
        lines: 80,
        functions: 80,
        branches: 80,
        statements: 80,
      },
    },
  },
});
```

### 8. GitHub Actions CI `.github/workflows/ci.yml`
```yaml
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run linter
      run: yarn lint
    
    - name: Check formatting
      run: yarn format:check
    
    - name: Run type checking
      run: yarn typecheck
    
    - name: Run tests with coverage
      run: yarn test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: true
```

### 9. Source Files

#### `packages/server/src/index.ts`
```typescript
export const greet = (name: string): string => {
  return `Hello, ${name}! Welcome to Aeturnis Online.`;
};

// Simple server startup for future use
if (require.main === module) {
  console.log(greet('World'));
}
```

#### `packages/server/src/index.test.ts`
```typescript
import { describe, it, expect } from 'vitest';
import { greet } from './index';

describe('greet function', () => {
  it('should return a greeting message', () => {
    const result = greet('Player');
    expect(result).toBe('Hello, Player! Welcome to Aeturnis Online.');
  });

  it('should handle empty string', () => {
    const result = greet('');
    expect(result).toBe('Hello, ! Welcome to Aeturnis Online.');
  });
});
```

### 10. Additional Files

#### `.nvmrc`
```
20
```

#### `.gitignore`
```
# Dependencies
node_modules/
.yarn/

# Build outputs
dist/
build/
*.tsbuildinfo

# Test coverage
coverage/
.nyc_output/

# Environment files
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Temporary files
*.tmp
*.temp
```

## 🚀 Setup Instructions

1. **Initialize the repository**:
   ```bash
   git init
   yarn install
   ```

2. **Setup Husky**:
   ```bash
   yarn prepare
   npx husky add .husky/pre-commit "yarn pre-commit"
   ```

3. **Verify setup**:
   ```bash
   yarn lint        # Should pass with 0 errors
   yarn test        # Should pass all tests
   yarn build       # Should compile successfully
   ```

## 📊 README Badges

Add these badges to your README.md:

```markdown
# Aeturnis Online

## ✅ Self-Audit Checklist

- [ ] CI pipeline passes on GitHub Actions
- [ ] Test coverage ≥ 80%
- [ ] ESLint shows 0 errors
- [ ] Prettier formatting is consistent
- [ ] Husky pre-commit hooks block on failures
- [ ] TypeScript compilation has no errors
- [ ] All dependencies are up to date
- [ ] README includes status badges

## 🔧 Troubleshooting

If you encounter issues:

1. **Yarn workspace not found**: Ensure you're using Yarn v1 (classic)
2. **Husky hooks not running**: Run `yarn prepare` to reinstall hooks
3. **Coverage threshold failing**: Check vitest.config.ts thresholds
4. **ESLint errors**: Run `yarn lint:fix` to auto-fix issues

---

**Note**: Replace `YOUR_USERNAME` in badge URLs with your actual GitHub username.