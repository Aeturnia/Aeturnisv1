# üîç Self-Audit Checklist: Step 2.5 ‚Äî Death, Loot & Rewards Implementation

## üìã Pre-Audit Setup
```bash
# Ensure all dependencies are installed
npm install

# Run database migrations
npm run db:migrate

# Build TypeScript
npm run build

# Start Redis if not running
docker-compose up -d redis
```

## 1Ô∏è‚É£ File Structure Verification

### ‚úÖ Check New Files Exist
```bash
# Run this command to verify all required files were created
ls -la src/types/death.ts src/types/loot.ts \
  src/controllers/death.controller.ts src/controllers/loot.controller.ts \
  src/services/death.service.ts src/services/loot.service.ts \
  src/services/respawn.service.ts \
  src/repositories/death.repository.ts src/repositories/loot.repository.ts \
  src/routes/death.routes.ts src/routes/loot.routes.ts \
  src/sockets/death.events.ts src/sockets/loot.events.ts
```

### ‚úÖ Check Modified Files
```bash
# Verify these files contain death/loot related changes
grep -l "isDead\|death\|loot" src/types/character.ts src/services/combat.service.ts src/routes/index.ts
```

### ‚úÖ Check Migration Files
```bash
# List recent migrations - should include death_loot_tables migration
ls -la src/database/migrations/ | tail -5
```

## 2Ô∏è‚É£ Database Schema Validation

### ‚úÖ Verify Tables Created
```sql
-- Run these queries in your PostgreSQL client
-- Check respawn_points table
\d respawn_points

-- Check loot_tables table  
\d loot_tables

-- Check loot_entries table
\d loot_entries

-- Check loot_history table
\d loot_history

-- Check character death columns
\d characters
-- Should show: is_dead, death_at, death_count, last_respawn_at
```

### ‚úÖ Verify Indexes
```sql
-- Check all indexes were created
SELECT indexname, tablename 
FROM pg_indexes 
WHERE tablename IN ('respawn_points', 'loot_entries', 'loot_history')
ORDER BY tablename, indexname;
```

## 3Ô∏è‚É£ TypeScript Interface Compliance

### ‚úÖ Naming Convention Check
```bash
# Check for incorrect naming patterns
# Should return NO results if naming is correct
grep -r "CharName\|character_name\|charNames" src/types/death.ts src/types/loot.ts

# Verify correct naming exists
grep -r "charName\|characterId\|zoneId" src/types/death.ts src/types/loot.ts
```

### ‚úÖ Enum Validation
```typescript
// Verify these enums exist in the correct files:
// In src/types/death.ts:
- DeathReason (COMBAT, FALL_DAMAGE, ENVIRONMENTAL, ADMIN, UNKNOWN)
- ReviveType (SELF_RESPAWN, ITEM_REVIVE, SPELL_REVIVE, PLAYER_ASSIST, ADMIN_REVIVE)

// In src/types/loot.ts:
- ItemRarity (COMMON, UNCOMMON, RARE, EPIC, LEGENDARY)
```

## 4Ô∏è‚É£ API Endpoint Testing

### ‚úÖ Death Endpoints
```bash
# Test character death endpoint
curl -X POST http://localhost:3000/api/character/test-char-id/death \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "reason": "combat",
    "killerId": "enemy-char-id",
    "context": {
      "damageType": "physical",
      "combatSessionId": "session-123"
    }
  }'

# Test respawn endpoint
curl -X POST http://localhost:3000/api/character/test-char-id/respawn \
  -H "Authorization: Bearer YOUR_TOKEN"

# Test death status endpoint
curl -X GET http://localhost:3000/api/character/test-char-id/death_status \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### ‚úÖ Loot Endpoints
```bash
# Test loot claim endpoint
curl -X POST http://localhost:3000/api/combat/session-id/claim_loot \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "characterId": "test-char-id"
  }'
```

## 5Ô∏è‚É£ Validation & Error Handling

### ‚úÖ Test Validation Rules
```bash
# Run specific validation tests
npm test -- death.service.test.ts --verbose
npm test -- loot.service.test.ts --verbose

# Check for proper error types
grep -r "NotFoundError\|ConflictError\|ValidationError\|ForbiddenError" \
  src/services/death.service.ts src/services/loot.service.ts
```

### ‚úÖ Transaction Safety
```bash
# Verify atomic transactions in death penalty application
grep -A 5 -B 5 "transaction\|BEGIN\|COMMIT\|ROLLBACK" \
  src/services/death.service.ts src/repositories/death.repository.ts
```

## 6Ô∏è‚É£ Real-Time Socket Events

### ‚úÖ Event Pattern Compliance
```bash
# Verify socket events follow entity:action pattern
grep -r "death:occurred\|character:respawned\|loot:assigned\|loot:claimed" \
  src/sockets/death.events.ts src/sockets/loot.events.ts

# Check for incorrect patterns (should return no results)
grep -r "deathOccurred\|characterRespawned\|lootAssigned" \
  src/sockets/death.events.ts src/sockets/loot.events.ts
```

### ‚úÖ Socket Room Management
```bash
# Verify proper room emission patterns
grep -r "io.to.*emit\|socket.to.*emit" \
  src/services/death.service.ts src/services/loot.service.ts
```

## 7Ô∏è‚É£ Redis Key Conventions

### ‚úÖ Key Pattern Validation
```bash
# Check Redis key patterns follow namespace:identifier format
grep -r "respawn:cooldown:\|loot:claimed:\|death:counter:" \
  src/services/death.service.ts src/services/loot.service.ts src/services/respawn.service.ts

# Verify TTL settings
grep -r "setex\|expire\|TTL" \
  src/services/death.service.ts src/services/loot.service.ts
```

## 8Ô∏è‚É£ Test Coverage

### ‚úÖ Run Coverage Report
```bash
# Generate coverage report
npm test -- --coverage

# Check specific coverage for new files
npm test -- --coverage --collectCoverageFrom="src/services/death.service.ts"
npm test -- --coverage --collectCoverageFrom="src/services/loot.service.ts"
npm test -- --coverage --collectCoverageFrom="src/controllers/death.controller.ts"
npm test -- --coverage --collectCoverageFrom="src/controllers/loot.controller.ts"
```

### ‚úÖ Coverage Threshold Check
```
Expected coverage for each file: ‚â•80%
- Line Coverage: ‚â•80%
- Branch Coverage: ‚â•80%
- Function Coverage: ‚â•80%
- Statement Coverage: ‚â•80%
```

## 9Ô∏è‚É£ Code Quality

### ‚úÖ TypeScript Strict Mode
```bash
# Run TypeScript compiler with strict checks
npm run lint:ts -- --max-warnings=0

# Check for any implicit any
grep -r "any" src/types/death.ts src/types/loot.ts src/services/*.ts | grep -v "// eslint-disable"
```

### ‚úÖ ESLint Compliance
```bash
# Run ESLint on new files
npm run lint -- src/services/death.service.ts src/services/loot.service.ts
npm run lint -- src/controllers/death.controller.ts src/controllers/loot.controller.ts
```

## üîü Business Logic Verification

### ‚úÖ Death Penalty Calculations
```javascript
// Verify in death.service.ts:
- XP loss is 10% of current XP
- XP never goes below 0
- Durability damage is 10% per equipped item
- Death count increments properly
```

### ‚úÖ Loot Drop Calculations
```javascript
// Verify in loot.service.ts:
- Drop rates properly calculated with modifiers
- Deterministic seeding works correctly
- Party bonus multipliers apply
- Level scaling functions properly
```

### ‚úÖ Respawn Logic
```javascript
// Verify in respawn.service.ts:
- 30-second cooldown enforced
- Nearest respawn point selection works
- Zone restrictions respected
- Graveyard flag properly handled
```

## üìä Performance Checks

### ‚úÖ Query Performance
```sql
-- Check query execution plans
EXPLAIN ANALYZE 
SELECT * FROM respawn_points 
WHERE zone_id = 'test-zone-id' 
ORDER BY ST_Distance(ST_MakePoint(x, y), ST_MakePoint(100, 100));

EXPLAIN ANALYZE
SELECT * FROM loot_history 
WHERE character_id = 'test-char-id' 
ORDER BY timestamp DESC 
LIMIT 10;
```

### ‚úÖ Redis Performance
```bash
# Check Redis memory usage for death/loot keys
redis-cli --scan --pattern "respawn:*" | wc -l
redis-cli --scan --pattern "loot:*" | wc -l
redis-cli --scan --pattern "death:*" | wc -l
```

## üõ°Ô∏è Security Audit

### ‚úÖ Authorization Checks
```bash
# Verify all endpoints check character ownership
grep -B 5 -A 5 "req.user\|userId\|authentication" \
  src/controllers/death.controller.ts src/controllers/loot.controller.ts
```

### ‚úÖ Input Validation
```bash
# Check for validation middleware usage
grep -r "validateRequest\|body()\|param()\|query()" \
  src/routes/death.routes.ts src/routes/loot.routes.ts
```

## üìù Final Checklist Summary

```markdown
## Implementation Complete?
- [ ] All required files created
- [ ] Database migrations successful
- [ ] All tables and indexes created
- [ ] TypeScript interfaces follow naming conventions
- [ ] All API endpoints respond correctly
- [ ] Validation rules enforced
- [ ] Socket events follow pattern
- [ ] Redis keys follow convention
- [ ] Test coverage ‚â•80%
- [ ] Zero TypeScript errors
- [ ] Zero ESLint warnings
- [ ] Business logic matches spec
- [ ] Performance indexes in place
- [ ] Security checks pass
```

## üö® Common Issues to Check

1. **Character State Sync**
   - Ensure `isDead` flag syncs with combat service
   - Verify death state prevents actions

2. **Race Conditions**
   - Multiple death sources handled correctly
   - Loot claim atomicity guaranteed

3. **Memory Leaks**
   - Socket listeners properly cleaned up
   - Redis keys have appropriate TTLs

4. **Edge Cases**
   - Empty loot tables handled
   - Missing respawn points fallback
   - Negative XP prevention

---

### üì§ Audit Results Template
```markdown
## Audit Results - Step 2.5 Death & Loot System

**Date:** [DATE]
**Auditor:** Replit Agent

### Coverage Report
- Overall Coverage: X%
- death.service.ts: X%
- loot.service.ts: X%
- Controllers: X%

### TypeScript Results
- Errors: X
- Warnings: X

### Failed Tests
[List any failing tests]

### Issues Found
[List any issues discovered]

### Recommendations
[Any improvements suggested]
```