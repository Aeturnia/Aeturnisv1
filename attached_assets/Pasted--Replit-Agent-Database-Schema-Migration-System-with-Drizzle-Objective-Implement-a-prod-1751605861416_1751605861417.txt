# Replit Agent: Database Schema & Migration System with Drizzle

## üéØ Objective
Implement a production-ready PostgreSQL database schema and migration system for Aeturnis Online using Drizzle ORM. Create the foundation tables and establish a robust migration workflow.

## üìã Requirements

### Branch Setup
```bash
git checkout -b db-schema-migrations
```

### Core Features
1. **Drizzle ORM Setup**: Configure Drizzle with PostgreSQL driver
2. **Initial Schema**: Users, sessions, and audit tables
3. **Migration System**: CLI tools for migrate, seed, reset
4. **Type Safety**: Full TypeScript integration
5. **Environment Config**: Secure database configuration

## üõ†Ô∏è Implementation

### 1. Install Dependencies
```bash
yarn add drizzle-orm pg dotenv
yarn add -D drizzle-kit @types/pg tsx
```

### 2. Database Configuration: `packages/server/src/database/config.ts`
```typescript
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Database connection pool
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Drizzle instance
export const db = drizzle(pool);

// Connection health check
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    await pool.query('SELECT 1');
    console.log('‚úÖ Database connection established');
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    return false;
  }
}

// Graceful shutdown
export async function closeDatabaseConnection(): Promise<void> {
  await pool.end();
  console.log('Database connection pool closed');
}
```

### 3. Schema Definitions: `packages/server/src/database/schema/index.ts`
```typescript
import { pgTable, uuid, varchar, text, timestamp, jsonb, integer, boolean, index, uniqueIndex } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

// Users table
export const users = pgTable('users', {
  id: uuid('id').defaultRandom().primaryKey(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  username: varchar('username', { length: 50 }).notNull().unique(),
  passwordHash: text('password_hash').notNull(),
  roles: text('roles').array().default(['user']).notNull(),
  emailVerified: boolean('email_verified').default(false).notNull(),
  status: varchar('status', { length: 20 }).default('active').notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull(),
  lastLogin: timestamp('last_login', { withTimezone: true }),
  metadata: jsonb('metadata').default({}).$type<Record<string, any>>(),
}, (table) => {
  return {
    emailIdx: index('idx_users_email').on(table.email),
    usernameIdx: index('idx_users_username').on(table.username),
    statusIdx: index('idx_users_status').on(table.status),
  };
});

// User sessions table
export const userSessions = pgTable('user_sessions', {
  id: uuid('id').defaultRandom().primaryKey(),
  userId: uuid('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),
  refreshTokenJti: varchar('refresh_token_jti', { length: 255 }).notNull().unique(),
  ipAddress: varchar('ip_address', { length: 45 }),
  userAgent: text('user_agent'),
  expiresAt: timestamp('expires_at', { withTimezone: true }).notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  lastActiveAt: timestamp('last_active_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => {
  return {
    userIdIdx: index('idx_sessions_user_id').on(table.userId),
    jtiIdx: uniqueIndex('idx_sessions_jti').on(table.refreshTokenJti),
    expiresIdx: index('idx_sessions_expires').on(table.expiresAt),
  };
});

// Audit log table
export const auditLog = pgTable('audit_log', {
  id: uuid('id').defaultRandom().primaryKey(),
  actorId: uuid('actor_id').references(() => users.id, { onDelete: 'set null' }),
  eventType: varchar('event_type', { length: 50 }).notNull(),
  resourceType: varchar('resource_type', { length: 50 }),
  resourceId: varchar('resource_id', { length: 255 }),
  payload: jsonb('payload').default({}).$type<Record<string, any>>(),
  ipAddress: varchar('ip_address', { length: 45 }),
  userAgent: text('user_agent'),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => {
  return {
    actorIdx: index('idx_audit_actor').on(table.actorId),
    eventTypeIdx: index('idx_audit_event_type').on(table.eventType),
    createdAtIdx: index('idx_audit_created_at').on(table.createdAt),
  };
});

// Define relations
export const usersRelations = relations(users, ({ many }) => ({
  sessions: many(userSessions),
  auditLogs: many(auditLog),
}));

export const userSessionsRelations = relations(userSessions, ({ one }) => ({
  user: one(users, {
    fields: [userSessions.userId],
    references: [users.id],
  }),
}));

export const auditLogRelations = relations(auditLog, ({ one }) => ({
  actor: one(users, {
    fields: [auditLog.actorId],
    references: [users.id],
  }),
}));
```

### 4. TypeScript Types: `packages/server/src/types/db/index.ts`
```typescript
import { InferSelectModel, InferInsertModel } from 'drizzle-orm';
import { users, userSessions, auditLog } from '../../database/schema';

// User types
export type User = InferSelectModel<typeof users>;
export type NewUser = InferInsertModel<typeof users>;

// Session types
export type UserSession = InferSelectModel<typeof userSessions>;
export type NewUserSession = InferInsertModel<typeof userSessions>;

// Audit log types
export type AuditLogEntry = InferSelectModel<typeof auditLog>;
export type NewAuditLogEntry = InferInsertModel<typeof auditLog>;

// Enums
export const UserStatus = {
  ACTIVE: 'active',
  SUSPENDED: 'suspended',
  BANNED: 'banned',
} as const;

export const UserRole = {
  USER: 'user',
  MODERATOR: 'moderator',
  ADMIN: 'admin',
} as const;

export const AuditEventType = {
  USER_REGISTER: 'user.register',
  USER_LOGIN: 'user.login',
  USER_LOGOUT: 'user.logout',
  USER_UPDATE: 'user.update',
  USER_DELETE: 'user.delete',
  SESSION_CREATE: 'session.create',
  SESSION_REFRESH: 'session.refresh',
  SESSION_REVOKE: 'session.revoke',
} as const;
```

### 5. Drizzle Configuration: `drizzle.config.ts`
```typescript
import type { Config } from 'drizzle-kit';
import * as dotenv from 'dotenv';

dotenv.config();

export default {
  schema: './packages/server/src/database/schema/index.ts',
  out: './packages/server/src/database/migrations',
  driver: 'pg',
  dbCredentials: {
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/aeturnis_dev',
  },
  verbose: true,
  strict: true,
} satisfies Config;
```

### 6. Migration Runner: `packages/server/scripts/migrate.ts`
```typescript
import { migrate } from 'drizzle-orm/node-postgres/migrator';
import { db, pool, checkDatabaseConnection } from '../src/database/config';
import path from 'path';

async function runMigrations() {
  console.log('üöÄ Starting database migrations...');
  
  // Check connection
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    process.exit(1);
  }

  try {
    // Run migrations
    await migrate(db, {
      migrationsFolder: path.join(__dirname, '../src/database/migrations'),
    });
    
    console.log('‚úÖ Migrations completed successfully');
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Execute if called directly
if (require.main === module) {
  runMigrations();
}

export { runMigrations };
```

### 7. Database Seeder: `packages/server/scripts/seed.ts`
```typescript
import { db, pool, checkDatabaseConnection } from '../src/database/config';
import { users, auditLog } from '../src/database/schema';
import { UserRole, AuditEventType } from '../src/types/db';
import argon2 from 'argon2';

async function seed() {
  console.log('üå± Starting database seeding...');
  
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    process.exit(1);
  }

  try {
    // Create admin user
    const adminPassword = await argon2.hash('Admin123!@#', {
      type: argon2.argon2id,
      memoryCost: 65536,
      timeCost: 3,
      parallelism: 4,
    });

    const [adminUser] = await db.insert(users).values({
      email: 'admin@aeturnis.com',
      username: 'admin',
      passwordHash: adminPassword,
      roles: [UserRole.ADMIN, UserRole.USER],
      emailVerified: true,
    }).returning();

    console.log('‚úÖ Created admin user:', adminUser.email);

    // Create test user
    const testPassword = await argon2.hash('Test123!@#', {
      type: argon2.argon2id,
      memoryCost: 65536,
      timeCost: 3,
      parallelism: 4,
    });

    const [testUser] = await db.insert(users).values({
      email: 'test@example.com',
      username: 'testuser',
      passwordHash: testPassword,
      roles: [UserRole.USER],
    }).returning();

    console.log('‚úÖ Created test user:', testUser.email);

    // Add audit log entries
    await db.insert(auditLog).values([
      {
        actorId: adminUser.id,
        eventType: AuditEventType.USER_REGISTER,
        resourceType: 'user',
        resourceId: adminUser.id,
        payload: { email: adminUser.email },
      },
      {
        actorId: testUser.id,
        eventType: AuditEventType.USER_REGISTER,
        resourceType: 'user',
        resourceId: testUser.id,
        payload: { email: testUser.email },
      },
    ]);

    console.log('‚úÖ Seeding completed successfully');
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Execute if called directly
if (require.main === module) {
  seed();
}

export { seed };
```

### 8. Database Reset Script: `packages/server/scripts/reset.ts`
```typescript
import { sql } from 'drizzle-orm';
import { db, pool, checkDatabaseConnection } from '../src/database/config';
import { runMigrations } from './migrate';
import { seed } from './seed';

async function reset() {
  console.log('üîÑ Resetting database...');
  
  const isConnected = await checkDatabaseConnection();
  if (!isConnected) {
    process.exit(1);
  }

  try {
    // Drop all tables (cascade)
    console.log('üì¶ Dropping all tables...');
    await db.execute(sql`
      DROP SCHEMA public CASCADE;
      CREATE SCHEMA public;
      GRANT ALL ON SCHEMA public TO postgres;
      GRANT ALL ON SCHEMA public TO public;
    `);

    console.log('‚úÖ Tables dropped');

    // Run migrations
    await runMigrations();

    // Run seeder
    await seed();

    console.log('‚úÖ Database reset completed');
  } catch (error) {
    console.error('‚ùå Reset failed:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Execute if called directly
if (require.main === module) {
  reset();
}
```

### 9. Update Package.json Scripts
Add to `packages/server/package.json`:
```json
{
  "scripts": {
    "db:generate": "drizzle-kit generate:pg",
    "db:push": "drizzle-kit push:pg",
    "db:migrate": "tsx scripts/migrate.ts",
    "db:seed": "tsx scripts/seed.ts",
    "db:reset": "tsx scripts/reset.ts",
    "db:studio": "drizzle-kit studio"
  }
}
```

### 10. Generate Initial Migration
```bash
# Generate migration files from schema
yarn db:generate
```

### 11. Test Migration Script: `packages/server/src/database/migrations.test.ts`
```typescript
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { db, pool, checkDatabaseConnection } from './config';
import { users, userSessions, auditLog } from './schema';
import { sql } from 'drizzle-orm';

describe('Database Migrations', () => {
  beforeAll(async () => {
    const isConnected = await checkDatabaseConnection();
    expect(isConnected).toBe(true);
  });

  afterAll(async () => {
    await pool.end();
  });

  it('should have users table with correct schema', async () => {
    const result = await db.execute(sql`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns
      WHERE table_name = 'users'
      ORDER BY ordinal_position
    `);

    const columns = result.rows.map(row => row.column_name);
    expect(columns).toContain('id');
    expect(columns).toContain('email');
    expect(columns).toContain('username');
    expect(columns).toContain('password_hash');
    expect(columns).toContain('roles');
  });

  it('should have user_sessions table with foreign key', async () => {
    const result = await db.execute(sql`
      SELECT
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_name = 'user_sessions'
    `);

    expect(result.rows.length).toBeGreaterThan(0);
    expect(result.rows[0].foreign_table_name).toBe('users');
  });

  it('should have audit_log table with indexes', async () => {
    const result = await db.execute(sql`
      SELECT indexname
      FROM pg_indexes
      WHERE tablename = 'audit_log'
    `);

    const indexNames = result.rows.map(row => row.indexname);
    expect(indexNames).toContain('idx_audit_actor');
    expect(indexNames).toContain('idx_audit_event_type');
    expect(indexNames).toContain('idx_audit_created_at');
  });

  it('should enforce unique constraints', async () => {
    // This should fail due to unique constraint
    await expect(async () => {
      await db.insert(users).values([
        {
          email: 'duplicate@example.com',
          username: 'user1',
          passwordHash: 'hash1',
        },
        {
          email: 'duplicate@example.com', // Duplicate email
          username: 'user2',
          passwordHash: 'hash2',
        },
      ]);
    }).rejects.toThrow();
  });
});
```

### 12. Environment Setup
Update `.env`:
```env
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/aeturnis_dev
```

Create `.env.test`:
```env
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/aeturnis_test
```

## üöÄ Testing Instructions

### Setup and Run Migrations
```bash
# Generate migration files
yarn db:generate

# Apply migrations
yarn db:migrate

# Seed the database
yarn db:seed

# View database in Drizzle Studio
yarn db:studio
```

### Test Database
```bash
# Run migration tests
yarn test src/database/migrations.test.ts
```

### Reset Database (Development Only)
```bash
yarn db:reset
```

## ‚úÖ Self-Audit Checklist

- [ ] All migrations apply cleanly: `yarn db:migrate`
- [ ] Schema TypeScript types match database exactly
- [ ] Foreign keys are properly configured with cascade rules
- [ ] All indexes are created for performance
- [ ] Unique constraints prevent duplicate emails/usernames
- [ ] Audit log captures all specified events
- [ ] Seeds create test data successfully
- [ ] All tests pass: `yarn test`
- [ ] No TypeScript errors: `yarn typecheck`
- [ ] Drizzle Studio shows correct schema

## üìä Expected Database Structure
```
aeturnis_dev=# \dt
             List of relations
 Schema |     Name      | Type  |  Owner   
--------+---------------+-------+----------
 public | audit_log     | table | postgres
 public | user_sessions | table | postgres
 public | users         | table | postgres
```

## üîß Troubleshooting

1. **Database connection fails**: 
   - Ensure PostgreSQL is running
   - Check DATABASE_URL in .env
   - Verify database exists: `createdb aeturnis_dev`

2. **Migration errors**: 
   - Check for syntax errors in schema
   - Ensure no conflicting migrations
   - Try `yarn db:reset` in development

3. **Type errors**: 
   - Run `yarn db:generate` after schema changes
   - Restart TypeScript server in IDE

---

**Branch**: `db-schema-migrations`  
**Next Step**: API Baseline (`api-baseline-v1`)