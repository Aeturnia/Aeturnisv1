# üîç Self-Audit Prompt ‚Äì Step 1.6: Cache & Session v1

## üìã Audit Overview
Perform a comprehensive self-audit of the Step 1.6 implementation (Cache & Session v1) to ensure all requirements are met and the code is production-ready for Aeturnis Online.

## ‚ö° Prerequisites
- Redis server running locally (port 6379) or using ioredis-mock for tests
- All dependencies installed: `npm install ioredis uuid @types/uuid`
- TypeScript configuration with strict mode enabled

## ‚úÖ Audit Checklist

### 1. File Structure Verification
Verify the following files exist and are properly structured:
```bash
# Check file existence
ls -la src/services/CacheService.ts
ls -la src/services/SessionManager.ts
ls -la src/types/cache.types.ts
ls -la src/types/session.types.ts
ls -la __tests__/services/CacheService.test.ts
ls -la __tests__/services/SessionManager.test.ts

# Note: redis.config.ts is optional - Redis config can be in CacheService
```

### 2. TypeScript Compliance
```bash
# Run TypeScript compiler with strict checks
npx tsc --noEmit --strict --noImplicitAny --exactOptionalPropertyTypes

# Check for any TypeScript errors
echo "TypeScript errors: $(npx tsc --noEmit 2>&1 | grep -c error)"
```

### 3. Code Quality & Linting
```bash
# Run ESLint with Airbnb config
npm run lint:ts --max-warnings=0

# Run Prettier check
npx prettier --check "src/**/*.ts" "__tests__/**/*.ts"

# Auto-fix any formatting issues
npx prettier --write "src/**/*.ts" "__tests__/**/*.ts"
```

### 4. Test Coverage Analysis
```bash
# Run tests with coverage for CacheService
npm test -- __tests__/services/CacheService.test.ts --coverage --coverageReporters=text

# Run tests with coverage for SessionManager
npm test -- __tests__/services/SessionManager.test.ts --coverage --coverageReporters=text

# Generate full coverage report
npm test -- --coverage --coverageDirectory=coverage/step-1-6
```

### 5. Redis Key Convention Audit
```bash
# Search for Redis key patterns
grep -r "aeturnis:" src/services/
grep -r "session:" src/services/
grep -r "user:" src/services/

# Verify namespace pattern compliance
echo "Checking key namespace patterns..."
grep -E "(get|set|delete)\(" src/services/CacheService.ts | grep -v "aeturnis:" || echo "‚úÖ All keys use namespace"
```

### 6. Session TTL Verification
Create and run this test script as `audit-ttl.ts`:
```typescript
import { CacheService } from './src/services/CacheService';
import { SessionManager } from './src/services/SessionManager';

async function auditTTL() {
  const cache = new CacheService({ host: 'localhost', port: 6379 });
  const sessions = new SessionManager(cache);
  
  console.log('üïê TTL Audit Starting...');
  
  // Test 1: Verify 30-day TTL
  const sessionId = await sessions.createSession('audit-user', {});
  const ttl = await cache.ttl(`session:${sessionId}`);
  
  const expectedTTL = 30 * 24 * 60 * 60; // 30 days in seconds
  const ttlDiff = Math.abs(ttl - expectedTTL);
  
  console.log(`Expected TTL: ${expectedTTL}s`);
  console.log(`Actual TTL: ${ttl}s`);
  console.log(`Difference: ${ttlDiff}s`);
  
  if (ttlDiff < 10) {
    console.log('‚úÖ TTL verification passed');
  } else {
    console.log('‚ùå TTL verification failed');
  }
  
  // Cleanup
  await sessions.destroySession(sessionId);
  await cache.disconnect();
}

auditTTL().catch(console.error);
```

Run: `npx ts-node audit-ttl.ts`

### 7. Performance Benchmark
Create and run this benchmark script as `audit-performance.ts`:
```typescript
import { CacheService } from './src/services/CacheService';

async function benchmarkCache() {
  const cache = new CacheService({ host: 'localhost', port: 6379 });
  const iterations = 1000;
  
  console.log('üöÄ Performance Benchmark Starting...');
  console.log('Note: CI/CD environments may show higher latencies than local development');
  
  // Warmup
  for (let i = 0; i < 10; i++) {
    await cache.set(`warmup:${i}`, 'data');
    await cache.get(`warmup:${i}`);
  }
  
  // Benchmark SET operations
  const setStart = Date.now();
  for (let i = 0; i < iterations; i++) {
    await cache.set(`bench:${i}`, { data: 'test' }, 60);
  }
  const setTime = Date.now() - setStart;
  const avgSet = setTime / iterations;
  
  // Benchmark GET operations
  const getStart = Date.now();
  for (let i = 0; i < iterations; i++) {
    await cache.get(`bench:${i}`);
  }
  const getTime = Date.now() - getStart;
  const avgGet = getTime / iterations;
  
  // Cleanup
  for (let i = 0; i < iterations; i++) {
    await cache.delete(`bench:${i}`);
  }
  for (let i = 0; i < 10; i++) {
    await cache.delete(`warmup:${i}`);
  }
  
  console.log(`\nüìä Results (${iterations} operations):`);
  console.log(`Average SET: ${avgSet.toFixed(2)}ms ${avgSet < 3 ? '‚úÖ' : '‚ö†Ô∏è'} (target: <3ms)`);
  console.log(`Average GET: ${avgGet.toFixed(2)}ms ${avgGet < 2 ? '‚úÖ' : '‚ö†Ô∏è'} (target: <2ms)`);
  console.log('\nNote: Performance may vary based on Redis location and system load');
  
  await cache.disconnect();
}

benchmarkCache().catch(console.error);
```

Run: `npx ts-node audit-performance.ts`

### 8. Error Handling Verification
```bash
# Check for proper error handling
echo "üõ°Ô∏è Error Handling Audit:"
grep -n "try {" src/services/CacheService.ts | wc -l
grep -n "catch" src/services/CacheService.ts | wc -l
grep -n "console.error" src/services/CacheService.ts | wc -l

# Verify graceful fallbacks
grep -n "return null" src/services/CacheService.ts
grep -n "throw" src/services/SessionManager.ts
```

### 9. Interface Compliance Check
```bash
# Verify all required methods exist
echo "üìù Interface Implementation Check:"

# CacheService methods
for method in "get" "set" "delete" "ttl" "exists" "disconnect"; do
  grep -q "async $method" src/services/CacheService.ts && echo "‚úÖ CacheService.$method" || echo "‚ùå Missing: CacheService.$method"
done

# SessionManager methods
for method in "createSession" "getSession" "updateSession" "extendSession" "destroySession" "getUserSessions"; do
  grep -q "async $method" src/services/SessionManager.ts && echo "‚úÖ SessionManager.$method" || echo "‚ùå Missing: SessionManager.$method"
done
```

### 10. Session Schema Validation
```bash
# Verify session schema includes all required fields
echo "üîç Session Schema Check:"
for field in "sessionId" "userId" "createdAt" "lastActive" "metadata" "expiresAt"; do
  grep -q "$field" src/types/session.types.ts && echo "‚úÖ Field: $field" || echo "‚ùå Missing field: $field"
done
```

### 11. Additional Implementation Checks

#### UUID Import Verification
```bash
# Check for proper UUID usage
echo "üîç UUID Implementation Check:"
grep -q "import.*uuid" src/services/SessionManager.ts && echo "‚úÖ UUID imported" || echo "‚ùå Missing UUID import"
grep -q "uuidv4()" src/services/SessionManager.ts && echo "‚úÖ UUID v4 used" || echo "‚ùå UUID not used for session IDs"
```

#### Concurrent Session Tracking
```bash
# Verify concurrent session support
echo "üîç Concurrent Session Check:"
grep -q "user:.*:sessions" src/services/SessionManager.ts && echo "‚úÖ User session tracking" || echo "‚ùå Missing user session list"
grep -q "getUserSessions" src/services/SessionManager.ts && echo "‚úÖ getUserSessions method" || echo "‚ùå Missing getUserSessions"
```

#### JSON Serialization Test
Create and run this validation script as `audit-serialization.ts`:
```typescript
import { CacheService } from './src/services/CacheService';

async function auditSerialization() {
  const cache = new CacheService({ host: 'localhost', port: 6379 });
  
  console.log('üîç JSON Serialization Audit...');
  
  // Test complex object serialization
  const testData = {
    string: 'test',
    number: 123,
    boolean: true,
    null: null,
    array: [1, 2, 3],
    nested: { deep: { value: 'works' } },
    date: new Date().toISOString()
  };
  
  await cache.set('serial:test', testData, 60);
  const retrieved = await cache.get('serial:test');
  
  // Deep equality check
  const isEqual = JSON.stringify(testData) === JSON.stringify(retrieved);
  console.log(`Serialization test: ${isEqual ? '‚úÖ Passed' : '‚ùå Failed'}`);
  
  if (!isEqual) {
    console.log('Expected:', testData);
    console.log('Retrieved:', retrieved);
  }
  
  // Cleanup
  await cache.delete('serial:test');
  await cache.disconnect();
}

auditSerialization().catch(console.error);
```

Run: `npx ts-node audit-serialization.ts`

#### Expired Session Cleanup Test
Create and run this test as `audit-expiry.ts`:
```typescript
import { SessionManager } from './src/services/SessionManager';
import { CacheService } from './src/services/CacheService';

async function auditExpiry() {
  const cache = new CacheService({ host: 'localhost', port: 6379 });
  const sessions = new SessionManager(cache);
  
  console.log('üîç Session Expiry Audit...');
  
  // Create a session with past expiry
  const sessionId = await sessions.createSession('expiry-test', {});
  const session = await sessions.getSession(sessionId);
  
  // Manually set expired timestamp
  await sessions.updateSession(sessionId, {
    expiresAt: new Date(Date.now() - 1000).toISOString()
  });
  
  // Try to get expired session
  const expiredSession = await sessions.getSession(sessionId);
  
  if (expiredSession === null) {
    console.log('‚úÖ Expired session cleanup works');
  } else {
    console.log('‚ùå Expired session not cleaned up');
  }
  
  // Verify it's removed from user sessions too
  const userSessions = await sessions.getUserSessions('expiry-test');
  if (userSessions.length === 0) {
    console.log('‚úÖ User session list cleaned');
  } else {
    console.log('‚ùå User session list not cleaned');
  }
  
  await cache.disconnect();
}

auditExpiry().catch(console.error);
```

Run: `npx ts-node audit-expiry.ts`

## üìä Audit Report Format
After running all checks, compile results:

```markdown
## Step 1.6 Self-Audit Report

### ‚úÖ Compliance Summary
- [ ] TypeScript strict mode: 0 errors
- [ ] ESLint: 0 warnings
- [ ] Test Coverage: CacheService ‚â•80%
- [ ] Test Coverage: SessionManager ‚â•80%
- [ ] Redis namespace convention: Passed
- [ ] TTL verification: 30 days ¬±10s
- [ ] Performance: GET <2ms, SET <3ms
- [ ] All required methods implemented
- [ ] Error handling: Try/catch blocks present
- [ ] Session schema: All fields present
- [ ] UUID implementation: Correct
- [ ] Concurrent sessions: Supported
- [ ] JSON serialization: Working
- [ ] Expired session cleanup: Functional

### üìà Metrics
- CacheService Coverage: __%
- SessionManager Coverage: __%
- Average GET latency: __ms
- Average SET latency: __ms
- TypeScript errors: __
- ESLint warnings: __

### üîß Issues Found
1. [List any issues]

### ‚ú® Recommendations
1. [List any improvements]
```

## üö® Critical Failures
If any of these occur, the implementation MUST be fixed:
1. Test coverage < 80%
2. TypeScript errors > 0
3. Missing required methods
4. No error handling in CacheService
5. Redis keys without namespace
6. Performance > 5ms average
7. Session expiry not working
8. Concurrent sessions not tracked

## üîÑ Re-run After Fixes
```bash
# Comprehensive re-audit command
npm run lint:ts --max-warnings=0 && \
npm test -- __tests__/services/*.test.ts --coverage && \
npx ts-node audit-ttl.ts && \
npx ts-node audit-performance.ts && \
npx ts-node audit-serialization.ts && \
npx ts-node audit-expiry.ts
```

---

### üéØ Success Criteria
The implementation passes audit when:
- ‚úÖ All checkboxes in Compliance Summary are checked
- ‚úÖ No critical failures detected
- ‚úÖ Performance benchmarks met
- ‚úÖ 100% of required methods implemented
- ‚úÖ Graceful error handling verified