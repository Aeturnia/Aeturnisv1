# 🔧 Replit Agent: Fix Socket.IO Test Infrastructure for CI/CD

## 💡 Implementation Overview
Fix the Socket.IO test infrastructure to ensure all integration tests pass, types are properly aligned, and the test suite is ready for CI/CD pipelines. This will eliminate technical debt and ensure reliable automated testing for the real-time communication layer.

## 🎯 Critical Issues to Fix
1. **Mock/Spy Setup**: Vitest spies not properly initialized
2. **Type Mismatches**: Socket vs SocketWithAuth inconsistencies  
3. **Missing Variables**: Undefined ioServer, serverPort, clientSocket
4. **Integration Test Server**: No actual Socket.IO server running
5. **Mock Compatibility**: Simplified mocks breaking test expectations

## 🧱 File Targets

### Core Test Infrastructure Files:
```
packages/server/src/sockets/__tests__/
├── setup/
│   ├── testServer.ts (NEW - create test server)
│   └── testHelpers.ts (NEW - test utilities)
├── mocks/
│   └── socketMocks.ts (UPDATE - enhance mocks)
├── integration/
│   └── socketFlow.test.ts (FIX - complete setup)
└── types/
    └── test.types.ts (NEW - test-specific types)
```

## 🔨 Implementation Steps

### 1. Create Test Server Setup
```typescript
// packages/server/src/sockets/__tests__/setup/testServer.ts
import { createServer, Server as HTTPServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import { AddressInfo } from 'net';
import { createSocketServer } from '../../createSocketServer';
import { AuthService } from '../../../services/AuthService';
import { vi } from 'vitest';

export interface TestServerConfig {
  port?: number;
  mockAuth?: boolean;
}

export class TestSocketServer {
  private httpServer: HTTPServer;
  private io: SocketIOServer;
  private port: number = 0;
  private authService: AuthService;

  constructor(config: TestServerConfig = {}) {
    this.httpServer = createServer();
    this.authService = new AuthService();
    
    // Create Socket.IO server with test configuration
    this.io = createSocketServer(this.httpServer, {
      cors: {
        origin: '*',
        credentials: true
      },
      transports: ['websocket', 'polling']
    });

    // Mock authentication if requested
    if (config.mockAuth) {
      this.setupMockAuth();
    }
  }

  private setupMockAuth() {
    // Override auth middleware for testing
    this.io.use((socket, next) => {
      const token = socket.handshake.auth.token;
      if (token === 'test-token') {
        (socket as any).user = {
          userId: 'test-user-id',
          email: 'test@example.com',
          username: 'testuser',
          roles: ['user']
        };
        next();
      } else if (token) {
        // Use real auth for other tokens
        const authService = new AuthService();
        authService.verifyToken(token)
          .then(payload => {
            (socket as any).user = {
              userId: payload.userId,
              email: payload.email,
              username: payload.email.split('@')[0],
              roles: payload.roles
            };
            next();
          })
          .catch(() => next(new Error('Authentication failed')));
      } else {
        next(new Error('No token provided'));
      }
    });
  }

  async start(): Promise<number> {
    return new Promise((resolve, reject) => {
      this.httpServer.listen(this.port, () => {
        const address = this.httpServer.address() as AddressInfo;
        this.port = address.port;
        resolve(this.port);
      });

      this.httpServer.on('error', reject);
    });
  }

  async stop(): Promise<void> {
    return new Promise((resolve) => {
      this.io.close(() => {
        this.httpServer.close(() => {
          resolve();
        });
      });
    });
  }

  getIO(): SocketIOServer {
    return this.io;
  }

  getPort(): number {
    return this.port;
  }

  // Helper to generate valid JWT token for testing
  generateTestToken(userId: string = 'test-user-id'): string {
    return this.authService.generateAccessToken({
      id: userId,
      email: `${userId}@example.com`,
      username: `user-${userId}`,
      roles: ['user']
    });
  }
}
```

### 2. Create Test Helpers
```typescript
// packages/server/src/sockets/__tests__/setup/testHelpers.ts
import { io as ioClient, Socket as ClientSocket } from 'socket.io-client';
import { vi } from 'vitest';

export interface TestClient {
  socket: ClientSocket;
  userId: string;
  token: string;
}

export async function createTestClient(
  port: number,
  token: string = 'test-token',
  userId: string = 'test-user-id'
): Promise<TestClient> {
  return new Promise((resolve, reject) => {
    const socket = ioClient(`http://localhost:${port}`, {
      auth: { token },
      transports: ['websocket'],
      forceNew: true
    });

    socket.on('connect', () => {
      resolve({ socket, userId, token });
    });

    socket.on('connect_error', reject);

    // Timeout after 5 seconds
    setTimeout(() => reject(new Error('Connection timeout')), 5000);
  });
}

export async function waitForEvent(
  socket: ClientSocket,
  event: string,
  timeout: number = 1000
): Promise<any> {
  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      reject(new Error(`Timeout waiting for event: ${event}`));
    }, timeout);

    socket.once(event, (data) => {
      clearTimeout(timer);
      resolve(data);
    });
  });
}

export function createSpySocket() {
  const emit = vi.fn();
  const on = vi.fn();
  const once = vi.fn();
  const off = vi.fn();
  const join = vi.fn();
  const leave = vi.fn();
  const to = vi.fn(() => ({ emit }));
  const broadcast = { emit };

  return {
    id: 'test-socket-id',
    emit,
    on,
    once,
    off,
    join,
    leave,
    to,
    broadcast,
    rooms: new Set<string>(),
    handshake: {
      auth: { token: 'test-token' }
    },
    user: {
      userId: 'test-user-id',
      email: 'test@example.com',
      username: 'testuser',
      roles: ['user']
    }
  };
}
```

### 3. Fix Socket Mocks
```typescript
// packages/server/src/sockets/__tests__/mocks/socketMocks.ts
import { EventEmitter } from 'events';
import { vi, MockedFunction } from 'vitest';
import { Socket } from 'socket.io';

// Define the authenticated socket interface
export interface SocketWithAuth extends Socket {
  user: {
    userId: string;
    email: string;
    username: string;
    roles: string[];
  };
  characterId?: string;
  joinedRooms: Set<string>;
}

export class MockSocket extends EventEmitter {
  public id: string = 'mock-socket-id';
  public rooms: Set<string> = new Set([this.id]);
  public handshake: any;
  public user?: any;
  public characterId?: string;
  public joinedRooms: Set<string> = new Set();

  // Vitest spy functions
  public join: MockedFunction<(room: string) => void>;
  public leave: MockedFunction<(room: string) => void>;
  public emit: MockedFunction<(event: string, ...args: any[]) => boolean>;
  public to: MockedFunction<(room: string) => any>;
  public broadcast: any;

  constructor(user?: any) {
    super();
    
    // Initialize user
    this.user = user || {
      userId: 'test-user-id',
      email: 'test@example.com',
      username: 'testuser',
      roles: ['user']
    };

    // Initialize handshake
    this.handshake = {
      auth: { token: 'test-token' },
      headers: {},
      query: {}
    };

    // Create spy functions
    this.join = vi.fn((room: string) => {
      this.rooms.add(room);
      this.joinedRooms.add(room);
    });

    this.leave = vi.fn((room: string) => {
      this.rooms.delete(room);
      this.joinedRooms.delete(room);
    });

    this.emit = vi.fn((event: string, ...args: any[]) => {
      // Also emit locally for testing
      super.emit(event, ...args);
      return true;
    });

    const broadcastEmit = vi.fn();
    this.to = vi.fn((room: string) => ({
      emit: broadcastEmit
    }));

    this.broadcast = {
      emit: broadcastEmit
    };
  }

  // Helper to simulate receiving events
  public simulateEvent(event: string, ...args: any[]) {
    const listeners = this.listeners(event);
    listeners.forEach(listener => {
      listener(...args);
    });
  }
}

// Factory function for creating mock sockets
export function createMockSocket(overrides?: Partial<SocketWithAuth>): MockSocket {
  const socket = new MockSocket();
  
  if (overrides) {
    Object.assign(socket, overrides);
  }
  
  return socket;
}

// Create mock IO server
export function createMockIO() {
  const emit = vi.fn();
  const to = vi.fn(() => ({ emit }));
  const sockets = {
    sockets: new Map()
  };

  return {
    emit,
    to,
    sockets,
    use: vi.fn(),
    on: vi.fn()
  };
}
```

### 4. Fix Integration Test
```typescript
// packages/server/src/sockets/__tests__/integration/socketFlow.test.ts
import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach } from 'vitest';
import { TestSocketServer } from '../setup/testServer';
import { createTestClient, waitForEvent, TestClient } from '../setup/testHelpers';
import { AuthService } from '../../../services/AuthService';
import { ChatService } from '../../../services/ChatService';
import { RealtimeService } from '../../../services/RealtimeService';

describe('Socket.IO Integration Flow', () => {
  let testServer: TestSocketServer;
  let serverPort: number;
  let authService: AuthService;

  beforeAll(async () => {
    // Initialize test server
    testServer = new TestSocketServer({ mockAuth: false });
    serverPort = await testServer.start();
    authService = new AuthService();
  });

  afterAll(async () => {
    await testServer.stop();
  });

  describe('Authentication Flow', () => {
    let client: TestClient;

    afterEach(async () => {
      if (client?.socket) {
        client.socket.close();
      }
    });

    it('should authenticate with valid token', async () => {
      const validToken = authService.generateAccessToken({
        id: 'user-123',
        email: 'test@example.com',
        username: 'testuser',
        roles: ['user']
      });

      client = await createTestClient(serverPort, validToken, 'user-123');
      
      expect(client.socket.connected).toBe(true);
      expect(client.socket.id).toBeDefined();
    });

    it('should reject invalid token', async () => {
      await expect(
        createTestClient(serverPort, 'invalid-token')
      ).rejects.toThrow('Authentication failed');
    });

    it('should reject connection without token', async () => {
      await expect(
        createTestClient(serverPort, '')
      ).rejects.toThrow('No token provided');
    });
  });

  describe('Chat Flow', () => {
    let client1: TestClient;
    let client2: TestClient;

    beforeEach(async () => {
      // Create two authenticated clients
      const token1 = testServer.generateTestToken('user-1');
      const token2 = testServer.generateTestToken('user-2');

      client1 = await createTestClient(serverPort, token1, 'user-1');
      client2 = await createTestClient(serverPort, token2, 'user-2');

      // Mock character selection
      client1.socket.emit('character:select', { characterId: 'char-1' });
      client2.socket.emit('character:select', { characterId: 'char-2' });

      // Join same zone
      client1.socket.emit('zone:join', { zone: 'test-zone' });
      client2.socket.emit('zone:join', { zone: 'test-zone' });
    });

    afterEach(async () => {
      client1?.socket.close();
      client2?.socket.close();
    });

    it('should broadcast chat message to zone', async () => {
      const messagePromise = waitForEvent(client2.socket, 'chat:message');

      client1.socket.emit('chat:send', {
        channel: 'zone:test-zone',
        content: 'Hello from client 1!'
      });

      const message = await messagePromise;
      expect(message).toMatchObject({
        content: 'Hello from client 1!',
        channel: 'zone:test-zone'
      });
    });

    it('should handle whisper between players', async () => {
      const whisperPromise = waitForEvent(client2.socket, 'chat:whisper');

      client1.socket.emit('chat:whisper', {
        targetUsername: 'user-2',
        content: 'Secret message'
      });

      const whisper = await whisperPromise;
      expect(whisper).toMatchObject({
        from: 'user-1',
        content: 'Secret message'
      });
    });
  });

  describe('Error Handling', () => {
    let client: TestClient;

    beforeEach(async () => {
      const token = testServer.generateTestToken();
      client = await createTestClient(serverPort, token);
    });

    afterEach(async () => {
      client?.socket.close();
    });

    it('should handle chat without character selection', async () => {
      const errorPromise = waitForEvent(client.socket, 'error');

      client.socket.emit('chat:send', {
        channel: 'global',
        content: 'Test message'
      });

      const error = await errorPromise;
      expect(error).toMatchObject({
        code: 'CHARACTER_REQUIRED',
        message: expect.stringContaining('character')
      });
    });

    it('should enforce rate limiting', async () => {
      // Select character first
      client.socket.emit('character:select', { characterId: 'char-1' });

      // Send multiple messages rapidly
      for (let i = 0; i < 10; i++) {
        client.socket.emit('chat:send', {
          channel: 'global',
          content: `Message ${i}`
        });
      }

      const error = await waitForEvent(client.socket, 'chat:error');
      expect(error.message).toContain('too quickly');
    });
  });
});
```

### 5. Update Test Types
```typescript
// packages/server/src/sockets/__tests__/types/test.types.ts
import { Socket } from 'socket.io';
import { MockedFunction } from 'vitest';

export interface TestSocketUser {
  userId: string;
  email: string;
  username: string;
  roles: string[];
}

export interface TestSocket extends Partial<Socket> {
  id: string;
  user?: TestSocketUser;
  characterId?: string;
  emit: MockedFunction<any>;
  on: MockedFunction<any>;
  join: MockedFunction<any>;
  leave: MockedFunction<any>;
  to: MockedFunction<any>;
  broadcast: {
    emit: MockedFunction<any>;
  };
  rooms: Set<string>;
  handshake: {
    auth: {
      token?: string;
    };
  };
}
```

### 6. Update Vitest Configuration
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import path from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    setupFiles: ['./test/setup.ts'],
    pool: 'forks', // Use forks for Socket.IO tests
    testTimeout: 10000, // 10 seconds for integration tests
    hookTimeout: 10000,
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@test': path.resolve(__dirname, './src/__tests__'),
    },
  },
});
```

### 7. Create Test Setup File
```typescript
// test/setup.ts
import { vi } from 'vitest';

// Global test setup
beforeAll(() => {
  // Mock console.error to reduce noise in tests
  vi.spyOn(console, 'error').mockImplementation(() => {});
  
  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.JWT_SECRET = 'test-secret';
  process.env.JWT_REFRESH_SECRET = 'test-refresh-secret';
});

afterAll(() => {
  // Restore console
  vi.restoreAllMocks();
});

// Increase timeout for integration tests
if (process.env.TEST_TYPE === 'integration') {
  vi.setConfig({ testTimeout: 30000 });
}
```

## 🧪 Validation Rules

### Test Organization
```typescript
// Standard test structure for all socket tests
describe('FeatureName', () => {
  // Setup
  let testServer: TestSocketServer;
  let client: TestClient;
  
  beforeAll(async () => {
    testServer = new TestSocketServer();
    await testServer.start();
  });
  
  afterAll(async () => {
    await testServer.stop();
  });
  
  beforeEach(async () => {
    // Fresh client for each test
    client = await createTestClient(testServer.getPort());
  });
  
  afterEach(() => {
    client?.socket.close();
  });
  
  // Tests...
});
```

## 🔁 Event & Real-Time Logic

### Proper Event Testing Pattern
```typescript
it('should handle event correctly', async () => {
  // Setup promise before emitting
  const responsePromise = waitForEvent(client.socket, 'response:event');
  
  // Emit event
  client.socket.emit('request:event', { data: 'test' });
  
  // Wait for response with timeout
  const response = await responsePromise;
  
  // Assert
  expect(response).toMatchObject({ expected: 'data' });
});
```

## 🚧 Edge Cases

1. **Connection Timeout**: Tests should timeout gracefully
2. **Multiple Clients**: Ensure proper isolation between test clients
3. **Server Restart**: Each test suite gets fresh server instance
4. **Memory Leaks**: Properly close all connections after tests
5. **Port Conflicts**: Use port 0 to get random available port

## 🚀 Deployment Considerations

### CI/CD Pipeline Compatibility
```yaml
# .github/workflows/test.yml
- name: Run Socket.IO Tests
  run: |
    npm run test:sockets -- --reporter=verbose
  env:
    NODE_ENV: test
    TEST_TYPE: integration
```

### Test Categories
```json
// package.json scripts
{
  "scripts": {
    "test:sockets": "vitest run src/sockets/__tests__",
    "test:sockets:unit": "vitest run src/sockets/__tests__ --exclude='**/*.integration.test.ts'",
    "test:sockets:integration": "TEST_TYPE=integration vitest run src/sockets/__tests__/integration",
    "test:ci": "vitest run --coverage"
  }
}
```

---

### 🔐 Self‑Audit Commands
```bash
# 1. Run all socket tests
npm run test:sockets -- --reporter=verbose
# Expected: All tests pass

# 2. Run integration tests specifically
npm run test:sockets:integration
# Expected: Integration tests pass with real server

# 3. Check for type errors
npm run typecheck
# Expected: 0 errors

# 4. Verify spy/mock usage
grep -r "is not a spy" packages/server/src/sockets/__tests__ || echo "✅ No spy errors"
# Expected: No matches

# 5. Run full test suite for CI
npm run test:ci
# Expected: All tests pass, coverage >80%

# 6. Check for undefined variables
grep -rE "(ioServer|serverPort|clientSocket).*undefined" packages/server/src/sockets/__tests__ || echo "✅ No undefined variables"
# Expected: No matches
```

### Expected Results:
- **All Socket Tests**: ✅ Passing
- **Integration Tests**: ✅ Passing with real Socket.IO server
- **Type Safety**: ✅ Socket vs SocketWithAuth resolved
- **CI/CD Pipeline**: ✅ Ready for automated testing
- **Technical Debt**: ✅ Eliminated
- **Test Coverage**: ✅ >80% for socket layer